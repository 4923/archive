<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>archive</title>
<link>https://dotpyo.github.io/archive/</link>
<atom:link href="https://dotpyo.github.io/archive/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.551</generator>
<lastBuildDate>Sat, 09 Mar 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>DCGAN face tutorial</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/GAN/DCGAN_tutorial.html</link>
  <description><![CDATA[ 





<section id="gan" class="level2">
<h2 class="anchored" data-anchor-id="gan">GAN?</h2>
<ol type="1">
<li>학습 데이터들의 <em>분포</em>를 학습해</li>
<li>새로운 데이터를 <em>생성</em></li>
</ol>
<ul>
<li>생성자와 구분자로 구별되는 두 모델을 가지고 있다.
<ul>
<li>생성자: 실제 이미지와 유사한 정교한 이미지 생성</li>
<li>구분자: 실제 이미지인지 생성자의 이미지인지 판별</li>
</ul></li>
<li>생성자와 구분자의 상호작용을 통해 실제와 같은 이미지를 만들어낸다.</li>
<li>구분자가 생성자의 이미지 중 50%를 제대로 판별할 때 <em>균형상태</em>에 도달했다고 말한다.</li>
</ul>
<blockquote class="blockquote">
<p>DGGAN: GAN에서 파생된 모델로 생성자와 구분자에서 ’합성곱 신경망(Convolution)’과 ’전치 합성곱 신경망(Convolution-transpose)’를 사용했다</p>
</blockquote>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> __future__ <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> print_function</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> argparse</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn </span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.parallel</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.backends.mps <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mps </span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.utils.data</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dset</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> vutils</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.animation <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> animation</span>
<span id="cb1-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HTML</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed</span></span>
<span id="cb2-2">manualSeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Seed: "</span>, manualSeed)</span>
<span id="cb2-4">random.seed(manualSeed)</span>
<span id="cb2-5">np.random.seed(manualSeed)</span>
<span id="cb2-6">torch.manual_seed(manualSeed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Random Seed:  42</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>&lt;torch._C.Generator at 0x11820d070&gt;</code></pre>
</div>
</div>
<section id="config" class="level3">
<h3 class="anchored" data-anchor-id="config">Config</h3>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dataset dir root path</span></span>
<span id="cb5-2">dataroot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/celeba"</span> </span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dataloader에서 사용할 thread 수</span></span>
<span id="cb5-5">workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-6"></span>
<span id="cb5-7">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이미지의 크기; 모든 이미지 변환하여 크기 통일함</span></span>
<span id="cb5-10">image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number channel; RGB이미지이므로 3</span></span>
<span id="cb5-13">nc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># latent vector size = 생성자의 입력값 크기</span></span>
<span id="cb5-16">nz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 생성자를 통과하는 특징 데이터의 채널 크기</span></span>
<span id="cb5-19">ngf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb5-20"></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 구분자를 통과하는 특징 데이터의 채널 크기</span></span>
<span id="cb5-22">ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb5-23"></span>
<span id="cb5-24">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-25"></span>
<span id="cb5-26">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0002</span></span>
<span id="cb5-27"></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adam optimizer의 beta1 하이퍼파라미터</span></span>
<span id="cb5-29">beta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb5-30"></span>
<span id="cb5-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사용가능한 gpu 번호; cpu = 0</span></span>
<span id="cb5-32">ngpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
</div>
</section>
<section id="data" class="level3">
<h3 class="anchored" data-anchor-id="data">Data</h3>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dset.ImageFolder(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataroot,</span>
<span id="cb6-2">                            transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.Compose([</span>
<span id="cb6-3">                                transforms.Resize(image_size),</span>
<span id="cb6-4">                                transforms.CenterCrop(image_size),</span>
<span id="cb6-5">                                transforms.ToTensor(),</span>
<span id="cb6-6">                                transforms.Normalize((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)),</span>
<span id="cb6-7">                            ]))</span>
<span id="cb6-8"></span>
<span id="cb6-9">dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size,</span>
<span id="cb6-10">                                            shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터가 너무 커서 샘플로 몇개만 뽑음</span></span>
<span id="cb6-13">sample_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb6-14">dataset, _dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.random_split(dataset, lengths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[sample_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sample_size])</span>
<span id="cb6-15">dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size,</span>
<span id="cb6-16">                                            shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># device</span></span>
<span id="cb6-19">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mps'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.backends.mps.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># real batch check</span></span>
<span id="cb7-2">real_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dataloader))</span>
<span id="cb7-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb7-4">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb7-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training Image"</span>)</span>
<span id="cb7-6">plt.imshow(np.transpose(vutils.make_grid(real_batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].to(device)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>], padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).cpu(),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dotpyo.github.io/archive/posts/LabHAI/tutorial/GAN/DCGAN_tutorial_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="구현" class="level3">
<h3 class="anchored" data-anchor-id="구현">구현</h3>
<section id="가중치-초기화" class="level4">
<h4 class="anchored" data-anchor-id="가중치-초기화">가중치 초기화</h4>
<ul>
<li>평균 0, 분산 0.02인 정규분포
<ul>
<li><code>mean = 0</code> <code>stdev=0.02</code></li>
<li>구분자와 생성자 모두 <em>무작위 초기화</em> 진행</li>
</ul></li>
</ul>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 매개변수로 '모델'을 받아 합성곱, 전치합성곱, 배치정규화 계층을 초기화</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> weights_init(model):</span>
<span id="cb8-4">    classname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.__class__.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span></span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> classname.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ConV'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb8-6">        nn.init.normal_(model.weight.data, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> classname.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BatchNorm'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb8-8">        nn.init.normal_(model.weight.data, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)</span>
<span id="cb8-9">        nn.init.constant_(model.bias.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
</section>
<section id="생성자" class="level4">
<h4 class="anchored" data-anchor-id="생성자">생성자</h4>
<ul>
<li>잠재공간 <img src="https://latex.codecogs.com/png.latex?z">를 데이터공간, 즉 이미지로 변환하는 과정을 거친다 (<img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%2064%20%5Ctimes%2064">)</li>
<li>stride 2를 가진 전치 합성곱 계층을 이어서 구성
<ul>
<li>각 전치 합성곱 계층 하나당 아래 두개 레이어를 쌍으로 묶어 사용함
<ul>
<li>2차 배치 정규화 계층</li>
<li>relu 활성화 함수</li>
</ul></li>
</ul></li>
<li>마지막 출력 계층에서는 <code>tanh</code> 함수를 사용하는데 이는 <em>출력값을 <img src="https://latex.codecogs.com/png.latex?%5B-1,%201%5D"> 사이로 조정하기 위함</em> 이다.</li>
<li>배치 정규화 계층이 중요한데, 이 계층이 경사 하강법의 흐름에 중요한 역할을 했다고 함 (논문 원문 참조)</li>
</ul>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Generator(nn.Module):</span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ngpu):</span>
<span id="cb9-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Generator, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb9-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ngpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ngpu</span>
<span id="cb9-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.main <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb9-6">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ngf: 생성자를 통과하는 특징 데이터의 채널 크기</span></span>
<span id="cb9-7">            nn.ConvTranspose2d( nz, ngf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ),     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 왜 ngf를 8배 하나?</span></span>
<span id="cb9-8">            nn.BatchNorm2d( ngf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> ),</span>
<span id="cb9-9">            nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb9-10">            </span>
<span id="cb9-11">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위의 계층을 통과한 데이터의 크기. ``(ngf*8) x 4 x 4``</span></span>
<span id="cb9-12">            nn.ConvTranspose2d( ngf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, ngf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb9-13">            nn.BatchNorm2d(ngf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb9-14">            nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb9-15">            </span>
<span id="cb9-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위의 계층을 통과한 데이터의 크기. ``(ngf*4) x 8 x 8``</span></span>
<span id="cb9-17">            nn.ConvTranspose2d( ngf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, ngf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb9-18">            nn.BatchNorm2d(ngf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb9-19">            nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb9-20"></span>
<span id="cb9-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위의 계층을 통과한 데이터의 크기. ``(ngf*2) x 16 x 16``</span></span>
<span id="cb9-22">            nn.ConvTranspose2d( ngf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ngf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb9-23">            nn.BatchNorm2d(ngf),</span>
<span id="cb9-24">            nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb9-25"></span>
<span id="cb9-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위의 계층을 통과한 데이터의 크기. ``(ngf) x 32 x 32``</span></span>
<span id="cb9-27">            nn.ConvTranspose2d( ngf, nc, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb9-28">            nn.Tanh()</span>
<span id="cb9-29">        )</span>
<span id="cb9-30">    </span>
<span id="cb9-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb9-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.main(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">netG <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator(ngpu).to(device)</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모든 가중치의 평균을 0, 분산을 0.02로 초기화</span></span>
<span id="cb10-4">netG.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(weights_init)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 구조 확인</span></span>
<span id="cb10-7">netG</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>Generator(
  (main): Sequential(
    (0): ConvTranspose2d(100, 512, kernel_size=(4, 4), stride=(1, 1))
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): ConvTranspose2d(512, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU(inplace=True)
    (9): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (10): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU(inplace=True)
    (12): ConvTranspose2d(64, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (13): Tanh()
  )
)</code></pre>
</div>
</div>
</section>
</section>
<section id="구분자" class="level3">
<h3 class="anchored" data-anchor-id="구분자">구분자</h3>
<ul>
<li>입력: <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%2064%20%5Ctimes%2064"></li>
<li>Conv2d, BatchNorm2d, LeakyReLU로 데이터를 가공
<ul>
<li>stride를 합성곱 계층에서 적용하는데 논문에서는 스스로 pooling을 학습하기 때문에 pooling 계층을 넣지 않아도 효과가 좋았다고 한다.</li>
</ul></li>
<li>마지막 계층 Sigmoid로 확률값 반환</li>
</ul>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Discriminator(nn.Module):</span>
<span id="cb12-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ngpu):</span>
<span id="cb12-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Discriminator, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb12-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ngpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ngpu</span>
<span id="cb12-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.main <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb12-6">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 입력 데이터의 크기는 ``(nc) x 64 x 64``</span></span>
<span id="cb12-7">            nn.Conv2d(nc, ndf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb12-8">            nn.LeakyReLU(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb12-9">            </span>
<span id="cb12-10">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위의 계층을 통과한 데이터의 크기. ``(ndf) x 32 x 32``</span></span>
<span id="cb12-11">            nn.Conv2d(ndf, ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb12-12">            nn.BatchNorm2d(ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb12-13">            nn.LeakyReLU(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb12-14">            </span>
<span id="cb12-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위의 계층을 통과한 데이터의 크기. ``(ndf*2) x 16 x 16``</span></span>
<span id="cb12-16">            nn.Conv2d(ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb12-17">            nn.BatchNorm2d(ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb12-18">            nn.LeakyReLU(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb12-19">            </span>
<span id="cb12-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위의 계층을 통과한 데이터의 크기. ``(ndf*4) x 8 x 8``</span></span>
<span id="cb12-21">            nn.Conv2d(ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb12-22">            nn.BatchNorm2d(ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb12-23">            nn.LeakyReLU(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb12-24">            </span>
<span id="cb12-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위의 계층을 통과한 데이터의 크기. ``(ndf*8) x 4 x 4``</span></span>
<span id="cb12-26">            nn.Conv2d(ndf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb12-27">            nn.Sigmoid()</span>
<span id="cb12-28">        )</span>
<span id="cb12-29"></span>
<span id="cb12-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb12-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.main(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">netD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Discriminator(ngpu).to(device)</span>
<span id="cb13-2">netD.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(weights_init)</span>
<span id="cb13-3">netD</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Discriminator(
  (main): Sequential(
    (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): LeakyReLU(negative_slope=0.2, inplace=True)
    (5): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (9): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (10): LeakyReLU(negative_slope=0.2, inplace=True)
    (11): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (12): Sigmoid()
  )
)</code></pre>
</div>
</div>
</section>
<section id="최적화" class="level3">
<h3 class="anchored" data-anchor-id="최적화">최적화</h3>
<ul>
<li><p>손실함수로 <code>BCELoss</code><sup>1</sup> 사용</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%5Cell(x,%20y)%20=%20L%20=%20%5C%7Bl_1,%5Cdots,l_N%5C%7D%5E%5Ctop,%20%5Cquad%20l_n%20=%20-%20%5Cleft%5B%20y_n%20%5Ccdot%20%5Clog%20x_n%20+%20(1%20-%20y_n)%20%5Ccdot%20%5Clog%20(1%20-%20x_n)%20%5Cright%5D%5Cend%7Balign%7D"></p>
<ul>
<li>여기서 조정해야하는 <img src="https://latex.codecogs.com/png.latex?log(D(x))"> 와 <img src="https://latex.codecogs.com/png.latex?log(1%20-%20D(G(Z)))"> 를 확인할 수 있다.</li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p>목표: <img src="https://latex.codecogs.com/png.latex?y">를 이용하여 손실함수를 최대화하는 방법 찾기</p>
</blockquote>
<div id="cell-20" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BCELoss()</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 입력, 잠재공간 벡터 생성</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># device = device 아니고 device만 넣으면 에러</span></span>
<span id="cb15-5">fixed_noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, nz, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 참 거짓의 라벨</span></span>
<span id="cb15-8">real_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-9">fake_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> </span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optimizer 생성</span></span>
<span id="cb15-12">optimizerD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.Adam(netD.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, betas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(beta1, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.999</span>))</span>
<span id="cb15-13">optimizerG <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.Adam(netG.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, betas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(beta1, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.999</span>))</span></code></pre></div>
</div>
</section>
<section id="학습" class="level3">
<h3 class="anchored" data-anchor-id="학습">학습</h3>
<section id="구분자의-학습" class="level4">
<h4 class="anchored" data-anchor-id="구분자의-학습">구분자의 학습</h4>
<blockquote class="blockquote">
<p>손실함수를 어떻게 최대화 할 것인가?</p>
</blockquote>
<ol type="1">
<li>실제 데이터만 가져와 미니배치를 만든 후 훈련한다: <img src="https://latex.codecogs.com/png.latex?D"> (학습)
<ol type="1">
<li>1의 결과로 얻은 <img src="https://latex.codecogs.com/png.latex?log(D(x))"> 의 손실값을 계산한다. (수식 계산)</li>
<li>역전파 과정에서의 변화도를 계산한다.</li>
</ol>
<ul>
<li>이들 변화값은 축적(accumulate)시켜야 한다.</li>
<li>이후 최적화 함수를 사용한다.</li>
</ul></li>
<li><img src="https://latex.codecogs.com/png.latex?log(D(G(z)))"> 를 최대화 하는 방식으로 학습<sup>2</sup>
<ul>
<li>진짜 이미지들에서 <code>G</code>의 손실값을 구하고 가짜이미지에서도 같은 방식을 적용한다.</li>
<li>이 과정에서 <code>BCELoss</code>의 일부인 <img src="https://latex.codecogs.com/png.latex?log(x)">를 일부 사용할 수 있다.</li>
</ul></li>
</ol>
<blockquote class="blockquote">
<p>실제값과 거짓값의 학습에서 나타나는 차이점을 통해 손실함수를 분리한다.</p>
</blockquote>
<p>튜토리얼에서는 다음과 같이 사용한다.</p>
<ul>
<li><strong>Loss_D</strong> - 진짜 데이터와 가짜 데이터들 모두에서 구해진 손실값. (<img src="https://latex.codecogs.com/png.latex?log(D(x))%20+%20log(1%20-%20D(G(z)))">).</li>
<li><strong>Loss_G</strong> - 생성자의 손실값. <img src="https://latex.codecogs.com/png.latex?log(D(G(z)))"></li>
<li><strong>D(x)</strong> - 구분자가 데이터를 판별한 확률값입니다. 처음에는 1에 가까운 값이다가, G가 학습할수록 0.5값에 수렴하게 됩니다.</li>
<li><strong>D(G(z))</strong> - 가짜데이터들에 대한 구분자의 출력값입니다. 처음에는 0에 가까운 값이다가, G가 학습할수록 0.5에 수렴하게 됩니다</li>
</ul>
<div id="cell-24" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 손실값들을 저장</span></span>
<span id="cb16-2"></span>
<span id="cb16-3">img_list, G_losses, D_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], [], []</span>
<span id="cb16-4">iters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `배치` 반복</span></span>
<span id="cb16-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> batch_loop(dataloader, netD, netG, criterion, epoch):</span>
<span id="cb16-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, data <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb16-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##################################</span></span>
<span id="cb16-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1) D 신경망 업데이트</span></span>
<span id="cb16-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실제 데이터로 학습</span></span>
<span id="cb16-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 손실함수 값을 최대화</span></span>
<span id="cb16-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##################################</span></span>
<span id="cb16-14"></span>
<span id="cb16-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- 실제 데이터 학습 --- #</span></span>
<span id="cb16-16">        netD.zero_grad()</span>
<span id="cb16-17"></span>
<span id="cb16-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 배치의 사이즈나 사용할 디바이스에 맞게 조정하는 이유? </span></span>
<span id="cb16-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt;&gt; 효율성?</span></span>
<span id="cb16-20">        real_cpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].to(device)</span>
<span id="cb16-21">        b_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> real_cpu.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-22">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.full((b_size,), real_label,</span>
<span id="cb16-23">                            dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb16-24">        </span>
<span id="cb16-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실제 데이터 투입</span></span>
<span id="cb16-26">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netD(real_cpu).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 손실값</span></span>
<span id="cb16-28">        errD_real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(output, label)</span>
<span id="cb16-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("errD_real: ", errD_real)</span></span>
<span id="cb16-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 역전파 하며 변화도 계산</span></span>
<span id="cb16-31">        errD_real.backward()</span>
<span id="cb16-32">        D_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.mean().item()</span>
<span id="cb16-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("D_x: ", D_x)</span></span>
<span id="cb16-34">        </span>
<span id="cb16-35"></span>
<span id="cb16-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- 가짜 데이터 학습 --- #</span></span>
<span id="cb16-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 생성자에 사용할 잠재공간 벡터</span></span>
<span id="cb16-38">        noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(b_size, nz, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb16-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 가짜 이미지 생성</span></span>
<span id="cb16-40">        fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netG(noise)</span>
<span id="cb16-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fill_ ?</span></span>
<span id="cb16-42">        label.fill_(fake_label)</span>
<span id="cb16-43">        </span>
<span id="cb16-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># D를 이용해 데이터 진위여부 판별</span></span>
<span id="cb16-45">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netD(fake.detach()).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># D의 손실값 계산</span></span>
<span id="cb16-47">        errD_fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(output, label)</span>
<span id="cb16-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 가짜 이미지의 변화도를 계산한 후 변화도에 더한다 (accumulate)</span></span>
<span id="cb16-49">        errD_fake.backward()</span>
<span id="cb16-50">        D_G_z1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.mean().item()</span>
<span id="cb16-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 손실값들을 모두 더한다.</span></span>
<span id="cb16-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># errD는 학습 상태를 리포팅 할 때 사용한다! &gt; 임의로 생성한 결과니</span></span>
<span id="cb16-53">        errD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> errD_real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> errD_fake </span>
<span id="cb16-54"></span>
<span id="cb16-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># D업데이트</span></span>
<span id="cb16-56">        optimizerD.step()</span>
<span id="cb16-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("errD: ", errD)</span></span>
<span id="cb16-58"></span>
<span id="cb16-59"></span>
<span id="cb16-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##################################</span></span>
<span id="cb16-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1) G 신경망 업데이트</span></span>
<span id="cb16-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실제 데이터를 생성</span></span>
<span id="cb16-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># log(D(G(z))) 값을 최대화</span></span>
<span id="cb16-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##################################</span></span>
<span id="cb16-65">        netG.zero_grad()</span>
<span id="cb16-66">        label.fill_(real_label)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 생성자의 손실값을 위해</span></span>
<span id="cb16-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># D를 제대로 업데이트했으므로 다시 가짜데이터 투입</span></span>
<span id="cb16-68">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netD(fake).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># G의 손실값 계산</span></span>
<span id="cb16-70">        errG <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(output, label)</span>
<span id="cb16-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># G의 변화도 계산</span></span>
<span id="cb16-72">        errG.backward()</span>
<span id="cb16-73">        D_G_z2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.mean().item()</span>
<span id="cb16-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># G 업데이트</span></span>
<span id="cb16-75">        optimizerG.step()</span>
<span id="cb16-76"></span>
<span id="cb16-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------</span></span>
<span id="cb16-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 훈련 상태를 출력합니다</span></span>
<span id="cb16-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb16-80">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">][</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Loss_D: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Loss_G: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D(x): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D(G(z)): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> / </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb16-81">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (epoch, num_epochs, i, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader),</span>
<span id="cb16-82">                        errD.item(), errG.item(), D_x, D_G_z1, D_G_z2))</span>
<span id="cb16-83"></span>
<span id="cb16-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이후 그래프를 그리기 위해 손실값들을 저장해둡니다</span></span>
<span id="cb16-85">        G_losses.append(errG.item())</span>
<span id="cb16-86">        D_losses.append(errD.item())</span>
<span id="cb16-87"></span>
<span id="cb16-88">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fixed_noise를 통과시킨 G의 출력값을 저장해둡니다</span></span>
<span id="cb16-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (iters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> ((epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> num_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)):</span>
<span id="cb16-90">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb16-91">                fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netG(fixed_noise).detach().cpu()</span>
<span id="cb16-92">            img_list.append(vutils.make_grid(fake, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Starting Training Loop...")</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for epoch in range(num_epochs):</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     batch_loop(dataloader, netD, netG, criterion, epoch)</span></span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     iters += 1</span></span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Starting Training Loop...</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][0/792]    Loss_D: 1.3083  Loss_G: 3.2819  D(x): 0.5943    D(G(z)): 0.5336 / 0.0397</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][50/792]   Loss_D: 0.2891  Loss_G: 15.2257 D(x): 0.8146    D(G(z)): 0.0000 / 0.0000</span></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][100/792]  Loss_D: 0.2566  Loss_G: 4.2529  D(x): 0.8360    D(G(z)): 0.0341 / 0.0382</span></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][150/792]  Loss_D: 1.1949  Loss_G: 1.6857  D(x): 0.3761    D(G(z)): 0.0447 / 0.2113</span></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][200/792]  Loss_D: 0.9831  Loss_G: 2.3191  D(x): 0.4773    D(G(z)): 0.0473 / 0.1316</span></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][250/792]  Loss_D: 0.9653  Loss_G: 4.5867  D(x): 0.8587    D(G(z)): 0.5122 / 0.0142</span></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][300/792]  Loss_D: 0.7742  Loss_G: 2.0908  D(x): 0.5511    D(G(z)): 0.0705 / 0.1749</span></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][350/792]  Loss_D: 0.7144  Loss_G: 5.1598  D(x): 0.8541    D(G(z)): 0.3957 / 0.0082</span></span>
<span id="cb17-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][400/792]  Loss_D: 1.8883  Loss_G: 1.6982  D(x): 0.2203    D(G(z)): 0.0174 / 0.2421</span></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][450/792]  Loss_D: 0.7316  Loss_G: 5.0640  D(x): 0.8330    D(G(z)): 0.3798 / 0.0097</span></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][500/792]  Loss_D: 0.4904  Loss_G: 3.8918  D(x): 0.8738    D(G(z)): 0.2750 / 0.0271</span></span>
<span id="cb17-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][550/792]  Loss_D: 0.3976  Loss_G: 3.4012  D(x): 0.7631    D(G(z)): 0.0879 / 0.0493</span></span>
<span id="cb17-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][600/792]  Loss_D: 1.3403  Loss_G: 7.2067  D(x): 0.9398    D(G(z)): 0.6828 / 0.0012</span></span>
<span id="cb17-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][650/792]  Loss_D: 0.5217  Loss_G: 3.1440  D(x): 0.8256    D(G(z)): 0.2559 / 0.0536</span></span>
<span id="cb17-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][700/792]  Loss_D: 0.3997  Loss_G: 3.3902  D(x): 0.8364    D(G(z)): 0.1774 / 0.0445</span></span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[0/1][750/792]  Loss_D: 0.4414  Loss_G: 3.4481  D(x): 0.8536    D(G(z)): 0.2275 / 0.0386</span></span>
<span id="cb17-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
</div>
</section>
</section>
<section id="결과-확인" class="level3">
<h3 class="anchored" data-anchor-id="결과-확인">결과 확인</h3>
<div id="cell-27" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dataloader에서 진짜 데이터들을 가져옵니다</span></span>
<span id="cb18-2">real_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dataloader))</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 진짜 이미지들을 화면에 출력합니다</span></span>
<span id="cb18-5">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span>
<span id="cb18-6">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-7">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb18-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Real Images"</span>)</span>
<span id="cb18-9">plt.imshow(np.transpose(vutils.make_grid(real_batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].to(device)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>], padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).cpu(),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 가짜 이미지들을 화면에 출력합니다</span></span>
<span id="cb18-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb18-13">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb18-14">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fake Images"</span>)</span>
<span id="cb18-15">plt.imshow(np.transpose(img_list[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb18-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dotpyo.github.io/archive/posts/LabHAI/tutorial/GAN/DCGAN_tutorial_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Binary Cross Entropy loss↩︎</p></li>
<li id="fn2"><p><img src="https://latex.codecogs.com/png.latex?log(1%20-%20D(G(z)))"> 최소화는 원문 논문에서 효율적이지 못하다고 언급함↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>PyTorch</category>
  <category>computer vision</category>
  <category>tutorial</category>
  <guid>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/GAN/DCGAN_tutorial.html</guid>
  <pubDate>Sat, 09 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>transfer learning tutorial</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/transfer_learning/transfer_learning_tutorial.html</link>
  <description><![CDATA[ 





<div id="cell-1" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> __future__ <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> print_function, division</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lr_scheduler</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import torch.backends.cudnn as cudnn</span></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets, models, transforms</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cudnn.benchmark = True</span></span>
<span id="cb1-17">plt.ion()   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 대화형 모드</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>&lt;contextlib.ExitStack at 0x10465a1a0&gt;</code></pre>
</div>
</div>
<section id="데이터-불러오기" class="level3">
<h3 class="anchored" data-anchor-id="데이터-불러오기">데이터 불러오기</h3>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># augmentation</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">data_transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: transforms.Compose([</span>
<span id="cb3-5">        transforms.RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>),   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 왜 224?</span></span>
<span id="cb3-6">        transforms.RandomHorizontalFlip(),   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default=0.5</span></span>
<span id="cb3-7">        transforms.ToTensor(),</span>
<span id="cb3-8">        transforms.Normalize(</span>
<span id="cb3-9">            [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.485</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.456</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.406</span>],</span>
<span id="cb3-10">            [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.229</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.224</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.225</span>]</span>
<span id="cb3-11">        )</span>
<span id="cb3-12">    ]),</span>
<span id="cb3-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: transforms.Compose([</span>
<span id="cb3-14">        transforms.Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),</span>
<span id="cb3-15">        transforms.CenterCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>),</span>
<span id="cb3-16">        transforms.ToTensor(),</span>
<span id="cb3-17">        transforms.Normalize([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.485</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.456</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.406</span>], [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.229</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.224</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.225</span>])</span>
<span id="cb3-18">    ]),</span>
<span id="cb3-19">}</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/hymenoptera_data"</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">image_datasets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {x: datasets.ImageFolder(os.path.join(data_dir, x),</span>
<span id="cb4-4">                    data_transforms[x])</span>
<span id="cb4-5">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>]}</span>
<span id="cb4-6"></span>
<span id="cb4-7">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb4-8">dataloaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {x: torch.utils.data.DataLoader(image_datasets[x], batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size,</span>
<span id="cb4-9">                                                shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-10">                                                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>]}</span>
<span id="cb4-11">dataset_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(image_datasets[x]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>]}</span>
<span id="cb4-12">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].classes </span>
<span id="cb4-13"></span>
<span id="cb4-14">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mps'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.backends.mps.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span></code></pre></div>
</div>
<p>이미지 시각화해서 확인</p>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> imshow(inp, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb5-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp.numpy().transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb5-3">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.485</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.456</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.406</span>])</span>
<span id="cb5-4">    std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.229</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.224</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.225</span>])</span>
<span id="cb5-5">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mean</span>
<span id="cb5-6">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.clip(inp, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-7">    plt.imshow(inp)</span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> title <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-9">        plt.title(title)</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 데이터의 배치를 얻고, 매번 다른 배치를 보여준다.</span></span>
<span id="cb5-12">inputs, classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dataloaders[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>]))</span>
<span id="cb5-13">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.utils.make_grid(inputs)</span>
<span id="cb5-14"></span>
<span id="cb5-15">imshow(out, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[x] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> classes])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dotpyo.github.io/archive/posts/LabHAI/tutorial/transfer_learning/transfer_learning_tutorial_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="학습" class="level3">
<h3 class="anchored" data-anchor-id="학습">학습</h3>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_model(model, criterion, optimizer, scheduler, num_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb6-2">    since <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb6-3"></span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 여기서 최고 성능의 모델을 판별하므로 함수 안에서 반복을 해야한다.</span></span>
<span id="cb6-5">    best_model_wts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> copy.deepcopy(model.state_dict())</span>
<span id="cb6-6">    best_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습</span></span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb6-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-11">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb6-12">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-13">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb6-14"></span>
<span id="cb6-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> phase <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>]:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># epoch당 두번 돈다.</span></span>
<span id="cb6-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>:</span>
<span id="cb6-17">                model.train()</span>
<span id="cb6-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb6-19">                model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 평가모드로 전환</span></span>
<span id="cb6-20">            </span>
<span id="cb6-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 먼저 선언</span></span>
<span id="cb6-22">            running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb6-23">            running_corrects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-24"></span>
<span id="cb6-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습/검증 데이터를 가져온다.</span></span>
<span id="cb6-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> inputs, labels <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataloaders[phase]:</span>
<span id="cb6-27">                inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb6-28">                labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels.to(device)</span>
<span id="cb6-29"></span>
<span id="cb6-30">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최적화를 위해 경사도를 0으로 선언</span></span>
<span id="cb6-31">                optimizer.zero_grad()</span>
<span id="cb6-32"></span>
<span id="cb6-33">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward</span></span>
<span id="cb6-34">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습때만 연산</span></span>
<span id="cb6-35">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.set_grad_enabled(phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>):</span>
<span id="cb6-36">                    outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb6-37">                    _, preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(outputs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-38">                    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, labels)</span>
<span id="cb6-39"></span>
<span id="cb6-40">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 단계인 경우 역전파 + 최적화</span></span>
<span id="cb6-41">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>:</span>
<span id="cb6-42">                        loss.backward()</span>
<span id="cb6-43">                        optimizer.step()</span>
<span id="cb6-44">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 연산 결과</span></span>
<span id="cb6-45">                running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inputs.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-46">                running_corrects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> labels.data)</span>
<span id="cb6-47">                </span>
<span id="cb6-48">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이건 또 뭐야</span></span>
<span id="cb6-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>:</span>
<span id="cb6-50">                scheduler.step()</span>
<span id="cb6-51">            </span>
<span id="cb6-52">            epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dataset_sizes[phase]</span>
<span id="cb6-53">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 원래 .double() 로 데이터형태를 맞춰줬었다.</span></span>
<span id="cb6-54">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TypeError: Cannot convert a MPS Tensor to float64 dtype </span></span>
<span id="cb6-55">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as the MPS framework doesn't support float64. </span></span>
<span id="cb6-56">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Please use float32 instead.</span></span>
<span id="cb6-57">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default 값이 float() 다. </span></span>
<span id="cb6-58">            epoch_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> running_corrects.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dataset_sizes[phase]</span>
<span id="cb6-59"></span>
<span id="cb6-60">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-61">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>phase<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Acc: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-62"></span>
<span id="cb6-63">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델을 깊은 복사(deep copy)함</span></span>
<span id="cb6-64">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> epoch_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> best_acc:</span>
<span id="cb6-65">                best_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epoch_acc</span>
<span id="cb6-66">                best_model_wts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> copy.deepcopy(model.state_dict())</span>
<span id="cb6-67"></span>
<span id="cb6-68"></span>
<span id="cb6-69">    time_elapsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> since</span>
<span id="cb6-70">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Training complete in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>time_elapsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">m </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>time_elapsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s'</span>)</span>
<span id="cb6-71">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Best val Acc: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-72"></span>
<span id="cb6-73">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 가장 나은 모델 가중치를 불러옴</span></span>
<span id="cb6-74">    model.load_state_dict(best_model_wts)</span>
<span id="cb6-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> model</span></code></pre></div>
</div>
</section>
<section id="시각화" class="level3">
<h3 class="anchored" data-anchor-id="시각화">시각화</h3>
<div id="cell-10" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> visualize_model(model, num_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):</span>
<span id="cb7-2">    was_training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.training</span>
<span id="cb7-3">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb7-4">    images_so_far <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-5">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure()</span>
<span id="cb7-6"></span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb7-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, (inputs, labels) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloaders[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>]):</span>
<span id="cb7-9">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb7-10">            labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels.to(device)</span>
<span id="cb7-11"></span>
<span id="cb7-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과값과 예측값</span></span>
<span id="cb7-13">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb7-14">            _, preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(outputs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-15"></span>
<span id="cb7-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(inputs.size()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb7-17">                images_so_far <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-18">                ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(num_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, images_so_far)</span>
<span id="cb7-19">                ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb7-20">                ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'predicted: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_names[preds[j]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb7-21">                imshow(inputs.cpu().data[j])</span>
<span id="cb7-22"></span>
<span id="cb7-23">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> images_so_far <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> num_images:</span>
<span id="cb7-24">                    model.train(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>was_training)</span>
<span id="cb7-25">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb7-26">        model.train(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>was_training)</span></code></pre></div>
</div>
</section>
<section id="미세조정" class="level3">
<h3 class="anchored" data-anchor-id="미세조정">미세조정</h3>
<p>마지막 계층을 초기화하는 단계다.</p>
<div id="cell-13" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사전학습모델 resnet</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FineTuning의 약자로 ft를 사용하는 것 같음</span></span>
<span id="cb8-3">model_ft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.resnet18(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IMAGENET1K_V1'</span>)</span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사전학습모델로부터 fc layer 입력 채널 수를 얻음</span></span>
<span id="cb8-5">num_ftrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_ft.fc.in_features  </span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사전학습의 FC layer를 nn.Linear~ 로 교체하는 작업</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력 샘플의 크기: ``nn.Linear(num_ftrs, len (class_names))`` 로 일반화</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear(in_features=512, out_features=8, bias=True)</span></span>
<span id="cb8-10">model_ft.fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(num_ftrs, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb8-11"></span>
<span id="cb8-12">model_ft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_ft.to(device)</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (역전파) 손실함수 지정</span></span>
<span id="cb8-15">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (최적화) 모든 매개변수들이 최적화되었는지 관찰</span></span>
<span id="cb8-18">optimizer_ft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.SGD(model_ft.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>, momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>)</span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7 에폭마다 0.1씩 학습률 감소</span></span>
<span id="cb8-21">exp_lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr_scheduler.StepLR(optimizer_ft, step_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, gamma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<div id="cell-14" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">model_ft.fc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>Linear(in_features=512, out_features=2, bias=True)</code></pre>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                         num_epochs=25)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------
Epoch 0/24
----------
train Loss: 0.5382 Acc: 0.7172
val Loss: 0.2261 Acc: 0.9216
----------
Epoch 10/24
----------
train Loss: 0.1790 Acc: 0.9303
val Loss: 0.1501 Acc: 0.9608
----------
Epoch 20/24
----------
train Loss: 0.1212 Acc: 0.9467
val Loss: 0.1478 Acc: 0.9477

Training complete in 1m 36s
Best val Acc: 0.960784</code></pre>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">visualize_model(model_ft)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dotpyo.github.io/archive/posts/LabHAI/tutorial/transfer_learning/transfer_learning_tutorial_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>PyTorch</category>
  <category>computer vision</category>
  <category>tutorial</category>
  <guid>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/transfer_learning/transfer_learning_tutorial.html</guid>
  <pubDate>Fri, 08 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>fgsm tutorial</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/GAN/fgsm_tutorial.html</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>FGSM<sup>1</sup> 으로 MNIST를 속여보자.</p>
</blockquote>
<ul>
<li>입력 데이터에 최소한의 변화를 추가하여 ’잘못 분류되게 하는 것’이 공격자의 목표다.</li>
<li>공격의 종류
<ul>
<li>화이트박스: 공격자가 모델의 구조 (입출력, 가중치) 모두를 알고 접근할 수 있다고 가정한다.</li>
<li>블랙박스: 공격자가 모델의 입력과 출력단에 접근 가능하고, 모델의 내부는 모른다고 가정한다.</li>
</ul></li>
</ul>
<p>여기서 FGSM은 <em>오분류</em>를 목표로 하는 화이트박스 공격이다.</p>
<section id="fgsm" class="level3">
<h3 class="anchored" data-anchor-id="fgsm">FGSM</h3>
<blockquote class="blockquote">
<p>역전파에서 가중치를 조정하여 손실을 ‘최<strong>대</strong>화’ 하도록 입력 데이터를 조정한다.</p>
</blockquote>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://github.com/dotpyo/archive/assets/60145951/adf238c7-f050-4e4d-9a02-04fe806e558a" class="img-fluid figure-img"></p>
<figcaption>fgsm_panda_image</figcaption>
</figure>
</div>
</section>
<section id="구현" class="level3">
<h3 class="anchored" data-anchor-id="구현">구현</h3>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> __future__ <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> print_function</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets, transforms</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출처: fgsm tutorial 공식 colab</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 아래는 MNIST 데이터셋을 내려받을 때 "User-agent" 관련한 제한을 푸는 코드입니다.</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       더 자세한 내용은 https://github.com/pytorch/vision/issues/3497 을 참고해주세요.</span></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> six.moves <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urllib</span>
<span id="cb1-14">opener <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urllib.request.build_opener()</span>
<span id="cb1-15">opener.addheaders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'User-agent'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mozilla/5.0'</span>)]</span>
<span id="cb1-16">urllib.request.install_opener(opener)</span></code></pre></div>
</div>
<ol type="1">
<li>입력 매개변수를 파악한다.</li>
<li>공격할, 공격 중인 모델을 정의한다.</li>
<li>공격, 테스트를 진행한다.</li>
</ol>
<section id="입력-매개변수" class="level4">
<h4 class="anchored" data-anchor-id="입력-매개변수">입력 매개변수</h4>
<div id="cell-8" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. 실행에 사용할 엡실론 리스트. 0값은 원래 테스트 셋의 모델 성능이므로 반드시 포함시켜야 한다.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 엡실론이 클수록 모델 정확도를 저하시키는데 효과가 있으며 값은 0~1 사이다.</span></span>
<span id="cb2-3">epsilons:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>]</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. MNIST 모델을 사용한다.</span></span>
<span id="cb2-6">pretrained_model:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/lenet_mnist_model.pth"</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. 이 튜토리얼에선 학습 시간 오래 걸리지 않으므로 CPU 써도 무관하다.</span></span>
<span id="cb2-9">use_cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</div>
</section>
</section>
<section id="공격을-받는-모델" class="level3">
<h3 class="anchored" data-anchor-id="공격을-받는-모델">공격을 받는 모델</h3>
<p>MNIST 예제에서 복사해온다. - 모델과 데이터로더 정의 - 모델 초기화 - 학습된 가중치 로드</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LeNet 모델 정의</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Net(nn.Module):</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 네트워크 구조 정의</span></span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Net, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2_drop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Dropout2d()</span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">320</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb3-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 방법 정의</span></span>
<span id="cb3-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-14">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(F.max_pool2d(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb3-15">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(F.max_pool2d(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2_drop(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(x)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb3-16">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">320</span>)</span>
<span id="cb3-17">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(x))</span>
<span id="cb3-18">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.dropout(x, training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training)</span>
<span id="cb3-19">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(x)</span>
<span id="cb3-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> F.log_softmax(x, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST 테스트 데이터셋과 데이터로더 선언</span></span>
<span id="cb3-23">test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(</span>
<span id="cb3-24">    datasets.MNIST(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data'</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.Compose([</span>
<span id="cb3-25">            transforms.ToTensor(),</span>
<span id="cb3-26">            ])),</span>
<span id="cb3-27">        batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 어떤 디바이스를 사용할지 정의 &gt;&gt; CPU 사용 예정</span></span>
<span id="cb3-30"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CUDA Available: "</span>,torch.cuda.is_available())</span>
<span id="cb3-31">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (use_cuda <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> torch.cuda.is_available()) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 초기화하기</span></span>
<span id="cb3-34">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Net().to(device)</span>
<span id="cb3-35"></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 미리 학습된 모델 읽어오기</span></span>
<span id="cb3-37">model.load_state_dict(torch.load(pretrained_model, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>))</span>
<span id="cb3-38"></span>
<span id="cb3-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델을 평가 모드로 설정하기. 드롭아웃 레이어들을 위해 사용됨</span></span>
<span id="cb3-40">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CUDA Available:  False</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>Net(
  (conv1): Conv2d(1, 10, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(10, 20, kernel_size=(5, 5), stride=(1, 1))
  (conv2_drop): Dropout2d(p=0.5, inplace=False)
  (fc1): Linear(in_features=320, out_features=50, bias=True)
  (fc2): Linear(in_features=50, out_features=10, bias=True)
)</code></pre>
</div>
</div>
</section>
<section id="fgsm-공격" class="level3">
<h3 class="anchored" data-anchor-id="fgsm-공격">FGSM 공격</h3>
<ul>
<li><code>fgsm_attack</code> 함수를 만들어 사용하는데, 이때 입력 파라미터로 위에서 정의한 값들을 넣는다.</li>
</ul>
<ol type="1">
<li>원본 이미지 <img src="https://latex.codecogs.com/png.latex?x"></li>
<li>epsilon; pixel 단위의 변화 <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"></li>
<li>data_grad; 입력 영상에 대한 변화도 손실값</li>
</ol>
<div id="cell-14" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FGSM 공격 코드</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fgsm_attack(image, epsilon, data_grad):</span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data_grad 의 요소별 부호 값을 얻어옵니다</span></span>
<span id="cb6-4">    sign_data_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_grad.sign()</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 입력 이미지의 각 픽셀에 sign_data_grad 를 적용해 작은 변화가 적용된 이미지를 생성합니다</span></span>
<span id="cb6-6">    perturbed_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sign_data_grad</span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 값 범위를 [0,1]로 유지하기 위해 자르기(clipping)를 추가합니다</span></span>
<span id="cb6-8">    perturbed_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clamp(perturbed_image, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 작은 변화가 적용된 이미지를 리턴합니다</span></span>
<span id="cb6-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> perturbed_image</span></code></pre></div>
</div>
</section>
<section id="테스트" class="level3">
<h3 class="anchored" data-anchor-id="테스트">테스트 (*)</h3>
<p>테스트 기능을 호출할 때마다 1. 데이터셋에서 전체 테스트 단계를 수행한 후 2. 최종 정확도를 보고한다.</p>
<ul>
<li>여기서도 <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> 을 사용하는데, 테스트 함수가 이에 따라 모델의 정확도를 보고하기 때문이다. (픽셀단위의 변화이므로)</li>
<li>공격을 받은 이미지가 작은 변화가 적용된 이미지를 확인한 후 &gt;&gt; 그 이미지의 변화가 <strong>적대적</strong>인지 확인한다.</li>
</ul>
<div id="cell-17" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test( model, device, test_loader, epsilon ):</span>
<span id="cb7-2"></span>
<span id="cb7-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정확도 카운터</span></span>
<span id="cb7-4">    correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-5">    adv_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-6"></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 테스트 셋의 모든 예제에 대해 루프를 돕니다</span></span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> data, target <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb7-9"></span>
<span id="cb7-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 디바이스(CPU or GPU) 에 데이터와 라벨 값을 보냅니다</span></span>
<span id="cb7-11">        data, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.to(device), target.to(device)</span>
<span id="cb7-12"></span>
<span id="cb7-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 텐서의 속성 중 requires_grad 를 설정합니다. 공격에서 중요한 부분입니다 &gt;&gt; 증가시켜야하므로</span></span>
<span id="cb7-14">        data.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-15"></span>
<span id="cb7-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터를 모델에 통과시킵니다</span></span>
<span id="cb7-17">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(data)</span>
<span id="cb7-18">        init_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 로그 확률의 최대값을 가지는 인덱스를 얻습니다</span></span>
<span id="cb7-19"></span>
<span id="cb7-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 만약 초기 예측이 틀리면, 공격하지 않도록 하고 계속 진행합니다</span></span>
<span id="cb7-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> init_pred.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> target.item():</span>
<span id="cb7-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb7-23"></span>
<span id="cb7-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 손실을 계산합니다</span></span>
<span id="cb7-25">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.nll_loss(output, target)</span>
<span id="cb7-26"></span>
<span id="cb7-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델의 변화도들을 전부 0으로 설정합니다</span></span>
<span id="cb7-28">        model.zero_grad()</span>
<span id="cb7-29"></span>
<span id="cb7-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 후방 전달을 통해 모델의 변화도를 계산합니다</span></span>
<span id="cb7-31">        loss.backward()</span>
<span id="cb7-32"></span>
<span id="cb7-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 변화도 값을 모읍니다</span></span>
<span id="cb7-34">        data_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.grad.data</span>
<span id="cb7-35"></span>
<span id="cb7-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FGSM 공격을 호출합니다</span></span>
<span id="cb7-37">        perturbed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fgsm_attack(data, epsilon, data_grad)</span>
<span id="cb7-38"></span>
<span id="cb7-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 작은 변화가 적용된 이미지에 대해 재분류합니다</span></span>
<span id="cb7-40">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(perturbed_data)</span>
<span id="cb7-41"></span>
<span id="cb7-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 올바른지 확인합니다</span></span>
<span id="cb7-43">        final_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 로그 확률의 최대값을 가지는 인덱스를 얻습니다</span></span>
<span id="cb7-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> final_pred.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target.item():</span>
<span id="cb7-45">            correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 엡실론 예제에 대해서 저장합니다</span></span>
<span id="cb7-47">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(adv_examples) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb7-48">                adv_ex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perturbed_data.squeeze().detach().cpu().numpy()</span>
<span id="cb7-49">                adv_examples.append( (init_pred.item(), final_pred.item(), adv_ex) )</span>
<span id="cb7-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-51">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 추후 시각화를 위하 다른 예제들을 저장합니다</span></span>
<span id="cb7-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(adv_examples) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb7-53">                adv_ex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perturbed_data.squeeze().detach().cpu().numpy()</span>
<span id="cb7-54">                adv_examples.append( (init_pred.item(), final_pred.item(), adv_ex) )</span>
<span id="cb7-55"></span>
<span id="cb7-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 해당 엡실론에서의 최종 정확도를 계산합니다</span></span>
<span id="cb7-57">    final_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader))</span>
<span id="cb7-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epsilon: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Test Accuracy = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> / </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(epsilon, correct, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader), final_acc))</span>
<span id="cb7-59"></span>
<span id="cb7-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정확도와 적대적 예제를 리턴합니다</span></span>
<span id="cb7-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> final_acc, adv_examples</span></code></pre></div>
</div>
</section>
<section id="공격-실행" class="level3">
<h3 class="anchored" data-anchor-id="공격-실행">공격 실행</h3>
<div id="cell-19" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">accuracies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-2">examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 엡실론에 대해 테스트 함수를 실행합니다</span></span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> eps <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> epsilons:</span>
<span id="cb8-6">    acc, ex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test(model, device, test_loader, eps)</span>
<span id="cb8-7">    accuracies.append(acc)</span>
<span id="cb8-8">    examples.append(ex)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epsilon: 0  Test Accuracy = 9810 / 10000 = 0.981
Epsilon: 0.05   Test Accuracy = 9426 / 10000 = 0.9426
Epsilon: 0.1    Test Accuracy = 8510 / 10000 = 0.851
Epsilon: 0.15   Test Accuracy = 6826 / 10000 = 0.6826
Epsilon: 0.2    Test Accuracy = 4301 / 10000 = 0.4301
Epsilon: 0.25   Test Accuracy = 2082 / 10000 = 0.2082
Epsilon: 0.3    Test Accuracy = 869 / 10000 = 0.0869</code></pre>
</div>
</div>
</section>
<section id="결과" class="level3">
<h3 class="anchored" data-anchor-id="결과">결과</h3>
<p>시각화를 진행한다.</p>
<blockquote class="blockquote">
<p>엡실론이 증가함에 따라 테스트 정확도가 감소해야 한다.</p>
</blockquote>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctherefore"> 엡실론 값이 선형적이더라도 곡선의 추세는 선형적이지 않다.</p>
<div id="cell-22" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb10-2">plt.plot(epsilons, accuracies, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*-"</span>)</span>
<span id="cb10-3">plt.yticks(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span>
<span id="cb10-4">plt.xticks(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>, step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>))</span>
<span id="cb10-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy vs Epsilon"</span>)</span>
<span id="cb10-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epsilon"</span>)</span>
<span id="cb10-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy"</span>)</span>
<span id="cb10-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dotpyo.github.io/archive/posts/LabHAI/tutorial/GAN/fgsm_tutorial_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="문제" class="level3">
<h3 class="anchored" data-anchor-id="문제">문제</h3>
<ul>
<li>엡실론이 증가할수록 정확도는 떨어지지만: 작은 변화는 더 쉽게 인식한다.</li>
<li>노이즈가 추가되었더라도 작은 객체는 제대로 선별할 수 있는 경우도 있다.</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Fast Gradient Sign Attack↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>PyTorch</category>
  <category>computer vision</category>
  <category>tutorial</category>
  <guid>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/GAN/fgsm_tutorial.html</guid>
  <pubDate>Fri, 08 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Graph 101</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/Graph/GNN101.html</link>
  <description><![CDATA[ 





<section id="general-notation" class="level2">
<h2 class="anchored" data-anchor-id="general-notation">General Notation</h2>
<table class="table">
<colgroup>
<col style="width: 47%">
<col style="width: 33%">
<col style="width: 19%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">denote</th>
<th style="text-align: left;">meaning</th>
<th style="text-align: left;">note</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Ccal%7BG%7D%20=%20(%5Ccal%7BV,%20E%7D)"></td>
<td style="text-align: left;">formal definition of graph</td>
<td style="text-align: left;">calligraphic font used</td>
</tr>
<tr class="even">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV%7D"></td>
<td style="text-align: left;">a set of nodes</td>
<td style="text-align: left;">node = vertex</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Ccal%7BE%7D"></td>
<td style="text-align: left;">a set of edges, edges between nodes</td>
<td style="text-align: left;"><img src="https://latex.codecogs.com/png.latex?%5Ctherefore"> edge needs coordinate-likely information to denote each one</td>
</tr>
<tr class="even">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u%20%5Cin%20%5Ccal%7BV%7D"></td>
<td style="text-align: left;">a node of node set <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV%7D"></td>
<td style="text-align: left;">normally node denoted by <img src="https://latex.codecogs.com/png.latex?%5Ccal%7Bu%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Ccal%7Bv%7D"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?(u,%20v)%20%5Cin%20%5Ccal%7BE%7D"></td>
<td style="text-align: left;">when u, v in <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV%7D">, it means an edge from u to v vice versa</td>
<td style="text-align: left;">check it is direct graph or not</td>
</tr>
</tbody>
</table>
</section>
<section id="introduction" class="level1">
<h1>1. Introduction</h1>
<p>그래프는 어디에나 있는 데이터 구조이며 복잡한 시스템을 묘사하는 일반적인 언어이다. 대부분의 일반적인 관점에서 그래프는 정점(<code>node</code>)들과 그 상호작용 집합인 간선(<code>edge</code>)와 같은 단순한 객체들의 집합이었다. 예를 들어 사회 관계망을 그래프로 부호화(encode) 하는 경우 우리는 아마 개인을 표현하기 위해 정점을, 개인이 친구임을 표현하기 위해서는 간선를 사용할 것이다. 생물학 도메인에서는 그래프의 정점을 단백질을 표현하는데 사용할 수 있으며 간선은 다양한 생물학적 연관관계; 예를들어 단백질 사이의 운동관계를 표현하는데 사용할 수 있다.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img a="Zachary Karate Club Network" src="https://github.com/dotpyo/archive/assets/60145951/344c9b97-9d0d-46c6-89fa-c3cbb19b3ba2" width="100%"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Zachary Karate Club Network</td>
</tr>
</tbody>
</table>
<p>위는 유명한 자카리 가라테 클럽 네트워크로 가라테 클럽 멤버 사이의 친밀도를 나타내는 사회 관계망 그래프이며 웨인 W 자카리가 190-1972 사이에 연구한 결과다. 간선은 두 개인이 클럽 바깥에서 아는 사이이면 연결된다. 연구동안 클럽은 0번과 33번 정점을 중심으로 양분되었는데 연구자는 어떤 정점(회원)이 어디로 나뉠지 그래프 구조를 기반으로 정확하게 예측한 바 있다.</p>
<p>그래프 형식의 강점은 관계와 (개별 지점 대신에) 각 지점 ’사이’에 초점을 맞추는데 있으며 그 일반화 능력을 빠트릴 수 없다. 같은 그래프 형태는 사회 관계망, 약물과 단백질 사이의 상호작용, 원자와 분자간 상호작용 등… 을 표현할 수 있다. 다시말해, 정점을 정의하는것이 무엇이냐에 따라 같은 그래프도 다르게 사용될 수 있다.</p>
<section id="what-is-a-graph" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-graph">1.1 What is a graph</h2>
<p>그래프에서의 머신러닝을 논하기 이전에 ’그래프 데이터’가 정확히 무엇을 의미하는지 나타내는 공적인 표현에 대해 조금 알아둘 필요가 있다. 공식적으로, 그래프 <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BG%7D%20=%20(%5Ccal%7BV,%20E%7D)"> 는 정점의 집합인 <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV%7D"> 와 정점 사이의 간선의 집합인 <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BE%7D"> 로 정의된다. 정점 <img src="https://latex.codecogs.com/png.latex?u%20%5Cin%20%5Ccal%7BV%7D"> 와 <img src="https://latex.codecogs.com/png.latex?v%20%5Cin%20%5Ccal%7BV%7D"> 로 이루어진 간선은 다음과 같이 정의한다: <img src="https://latex.codecogs.com/png.latex?(u,%20v)%20%5Cin%20%5Ccal%7BE%7D">. 많은 경우에 (우리는) 단순 그래프 (<em>simple graph</em>) 만을 고려하는데, 단순 그래프는 대부분 하나의 간선이 각 정점의 쌍 사이에 존재하는 집합으로 어떤 간선도 정점 하나에 존재하지는 않는 그래프이다.</p>
<p>그래프를 편리하게 표현하는 방법은 <strong><em>adjacency matrix (인접행렬)</em></strong> <img src="https://latex.codecogs.com/png.latex?A%20%5Cin%20%5Cmathbb%7BR%7D%5E%7B%7C%5Ccal%7BV%7D%7C*%7C%5Ccal%7BV%7D%7C%7D"> 를 사용하는 방법이다.<sup>1</sup> <img src="https://latex.codecogs.com/png.latex?A"> 로 그래프를 표현하기 위해서는 그래프의 정점을 순서대로 배열함으로써 모든 정점의 색인들(indexes)이 인접행렬 <img src="https://latex.codecogs.com/png.latex?A">의 각각의 행과 열이 되게 해야 한다. 그렇게 하면 다음 조건의 행렬에서의 모든 간선의 존재를 표현할 수 있다: <img src="https://latex.codecogs.com/png.latex?A%5Bu,%20v%5D%20=%201"> if <img src="https://latex.codecogs.com/png.latex?(u,v)%20%5Cin%20%5Ccal(E)"> and <img src="https://latex.codecogs.com/png.latex?A%5Bu,%20v%5D%20=%200"> otherwise <sup>2</sup> 만약 그래프가 방향이 없는 간선 (undirected edge)으로만 구성된 경우 인접행렬 <img src="https://latex.codecogs.com/png.latex?A">는 대칭행렬이 된다. 하지만 간선들이 방향성이 있다면 (edge direction matters) <img src="https://latex.codecogs.com/png.latex?A">는 대칭이지 않아도 된다. 몇몇 그래프들은 가중치를 가질 수도 있는데 (weighted edges) 그 경우 그래프에 기재되는 값이 {0, 1}이 아닌 임의의 실수가 된다. 예를 들어 가중 그래프 중 단백질간 상호작용 그래프는 두 단백질 사이의 연관된 힘을 나타내는 그래프로 쓰일 수 있다.</p>
<aside id="footnotes" class="footnotes footnotes-end-of-block">
<ol>
<li id="fn1"><p><img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV%20=%20V_1%7D%20%5Ccup%20%5Ccal%7BV_2%7D%20%5Ccup%20%5Cdots%20%5Ccup%20%5Ccal%7BV_k%7D"> where <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV_i%7D%20%5Ccap%20%5Ccal%7BV_j%7D%20=%20%5Cemptyset,%20%5Cforall_i%20%5Cneq%20j">↩︎</p></li>
<li id="fn2"><p><img src="https://latex.codecogs.com/png.latex?A%5Bu,%20v%5D%20=%201"> if <img src="https://latex.codecogs.com/png.latex?(u,v)%20%5Cin%20%5Ccal(E)"> and <img src="https://latex.codecogs.com/png.latex?A%5Bu,%20v%5D%20=%200"> - <img src="https://latex.codecogs.com/png.latex?A%5Bu,%20v%5D%20=%201">: <img src="https://latex.codecogs.com/png.latex?u">와 <img src="https://latex.codecogs.com/png.latex?v"> 사이에 간선이 존재할 때 (<img src="https://latex.codecogs.com/png.latex?A%5Bu,%20v%5D%20=%200">: 존재하지 않을 때) - <img src="https://latex.codecogs.com/png.latex?(u,%20v)"> 가 그래프 안에 있고 간선 집합 <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BE%7D"> 안에 존재할 때 <img src="https://latex.codecogs.com/png.latex?A">의 위치 <img src="https://latex.codecogs.com/png.latex?(u,%20v)">에 올 수 있는 값은 간선이 존재하거나 (1) 존재하지 않는 (0) 두 가지 경우의 수 뿐이다.↩︎</p></li>
</ol>
</aside>
<section id="multi-relational-graph" class="level3">
<h3 class="anchored" data-anchor-id="multi-relational-graph">1.1.1 Multi-relational Graph</h3>
<p><em>multi-relational graph</em>는 방향이 있는 간선, 없는 간선, 가중치가 있는 간선을 넘어 다양한 종류의 간선이 있는 그래프를 고려한다. 예를 들어, 약물과 약물의 상호작용 그래프에서 각 간선이 두 약물을 동시에 복용할 때 발생할 수 있는 부작용에 대하여 서로 두가지의 간선이 필요할 수 있다. 이 예에서 간선 표기법을 확장하여 다음을 표현할 수 있다:</p>
<p>간선 또는 관계 유형 <img src="https://latex.codecogs.com/png.latex?%5Ctau">, (<img src="https://latex.codecogs.com/png.latex?u">, <img src="https://latex.codecogs.com/png.latex?%5Ctau">, <img src="https://latex.codecogs.com/png.latex?v">) <img src="https://latex.codecogs.com/png.latex?%5Cin"> <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BE%7D">, 그리고 하나의 인접행렬 <img src="https://latex.codecogs.com/png.latex?A_%7B%5Ctau%7D"> 를 간선 종류마다 정의할 수 있다. 이러한 그래프를 <em>multi-relational</em> 하다고 말하며 전체의 그래프는 인접 텐서 <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BA%7D%20%5Cin%20%5Cmathbb%7BR%7D%5E%7B%5Ccal%7B%7CV%7C%20*%20%7CR%7C%20*%20%7CV%7C%7D%7D"> 로 정의된다.<sup>3</sup> <em>multi-relational graph</em>의 두가지 중요한 부분집합은 1. <code>heterogenous</code>, 2. <code>multiplex</code> 그래프로 나뉜다. <em>tau</em> (<img src="https://latex.codecogs.com/png.latex?%5Ctau">)는 간선의 타입을 의미하며, 간선의 종류에는 위에 기술한 바와 같이 방향이 있는 것, 없는 것, 가중치가 있는 것 등이 포함된다. 이렇게 간선의 종류가 달라지면 Adjacency Matrix <img src="https://latex.codecogs.com/png.latex?A">도 따로 정의해야 한다.</p>
<aside id="footnotes" class="footnotes footnotes-end-of-block">
<ol start="3">
<li id="fn3"><p><img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV%20=%20V_1%7D%20%5Ccup%20%5Ccal%7BV_2%7D%20%5Ccup%20%5Cdots%20%5Ccup%20%5Ccal%7BV_k%7D"> where <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV_i%7D%20%5Ccap%20%5Ccal%7BV_j%7D%20=%20%5Cemptyset,%20%5Cforall_i%20%5Cneq%20j">↩︎</p></li>
</ol>
</aside>
<p><strong>Heterogeneous graph</strong></p>
<p>Heterogeneous graph에서, 정점들은 <em>type</em>에 물들어있다. 다시 말해, 정점 집합의 일부는 다음과 같이 해체될 수 있다: <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV%20=%20V_1%7D%20%5Ccup%20%5Ccal%7BV_2%7D%20%5Ccup%20%5Cdots%20%5Ccup%20%5Ccal%7BV_k%7D"> where <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV_i%7D%20%5Ccap%20%5Ccal%7BV_j%7D%20=%20%5Cemptyset,%20%5Cforall_i%20%5Cneq%20j"> <sup>4</sup>. heterogeneous graph의 간선은 일반적으로 제한이 걸려있는데 이는 집합 <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV%7D">가 서로 겹치지 않는 부분집합 <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV_1%7D"> 부터 <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV_k%7D"><sup>5</sup> 의 합집합이다.</p>
<aside id="footnotes" class="footnotes footnotes-end-of-block">
<ol start="4">
<li id="fn4"><p><img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV%20=%20V_1%7D%20%5Ccup%20%5Ccal%7BV_2%7D%20%5Ccup%20%5Cdots%20%5Ccup%20%5Ccal%7BV_k%7D"> where <img src="https://latex.codecogs.com/png.latex?%5Ccal%7BV_i%7D%20%5Ccap%20%5Ccal%7BV_j%7D%20=%20%5Cemptyset,%20%5Cforall_i%20%5Cneq%20j">↩︎</p></li>
<li id="fn5"><p><img src="https://latex.codecogs.com/png.latex?%5Cforall"> : forall↩︎</p></li>
</ol>
</aside>


<!-- -->

</section>
</section>
</section>

 ]]></description>
  <category>graph</category>
  <guid>https://dotpyo.github.io/archive/posts/Graph/GNN101.html</guid>
  <pubDate>Fri, 08 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>finetuning tutorial</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/maskrcnn/torchvision_finetuning_instance_segmentation.html</link>
  <description><![CDATA[ 





<pre><code>  pytorch                               2.2.1-py3.10_0
  torchaudio                            2.2.1-py310_cpu
  torchvision                           0.17.1-py310_cpu</code></pre>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img a="sample penn-fundan DS" src="https://github.com/dotpyo/archive/assets/60145951/3c5ec485-1520-4df8-9b2b-188c92e7d699" width="100%"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Penn-Fudan Database sample (image, mask)</td>
</tr>
</tbody>
</table>
<ul>
<li>Dataset: Penn-Fudan Database for Pedestrian Detection and Segmentation
<ul>
<li>number
<ul>
<li>(total) 170 images</li>
<li>(total) 345 instances of pedestrians<sup>1</sup></li>
</ul></li>
<li>usually used benchmark as segmentation</li>
<li><a href="https://www.cis.upenn.edu/~jshi/ped_html/">https://www.cis.upenn.edu/~jshi/ped_html/</a></li>
</ul></li>
<li>Model: pretrained Mask R-CNN</li>
</ul>
<div id="cell-3" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FastRCNN: https://arxiv.org/abs/1506.01497</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.faster_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastRCNNPredictor</span></code></pre></div>
</div>
<section id="배경지식" class="level3">
<h3 class="anchored" data-anchor-id="배경지식">배경지식</h3>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Object detection history
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><strong><a href="http://www.huppelen.nl/publications/selectiveSearchDraft.pdf">Selective Search for Object Recognition</a></strong></p>
<ol type="1">
<li>Sliding window<sup>2</sup>: 목표는 이미지의 전체 영역을 다양한 크기의 window로 sliding 시키고 각 window에 목표 object가 포함되는지 탐색한다. 컴퓨팅 리소스를 비효율적으로 사용한다.</li>
<li>Region Proposal<sup>3</sup>: 직관적으로 생각했을 때 전체 이미지를 확인하는건 당연히 비효율적이다. <code>물체가 있을만한 구역</code>(RoI; Region of Interest)을 살피는게 중요하다.
<ul>
<li><p>selective search: 논문에서 밝힌 바에 따르면 해당 알고리즘은 다음 목표를 가지고 설계되었다.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img a="selective search" src="https://github.com/dotpyo/archive/assets/60145951/c06c82c0-19a6-43d0-8c9e-1fdab3c61407" width="100%"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">selective search example</td>
</tr>
</tbody>
</table>
<ol type="1">
<li>Capture All Scale: 객체는 어떤 형태로든 나타날 수 있다. 따라서 위의 이미지처럼 다양한 크기의 bbox를 만들어 사용한다.
<ul>
<li>hierarchical grouping algorithm; segmentation에서 일반적으로 사용하는 bottom up grouping이 비슷한 특징을 가진 것끼리 묶는 방식이라면 selective search는 이미 비슷한 특징을 가진 픽셀을 분류해두었다. 따라서 같은 객체에 해당하는 것끼리 묶기만 하면 된다.</li>
</ul></li>
<li>Diversification: 특정 구역을 지정하지 않는다. 구역은 인접한 곳의 색깔, 질감 등을 고려하여 설정되며 밝기까지 이 구역 생성 방법에 영향을 미친다.<sup>4</sup></li>
<li>Fast to Compute: 이렇게 다양한 조건을 고려하면 컴퓨팅 리소스를 많이 사용하지 않을까? 아니다. 이 알고리즘의 개발 목표부터 효율 추구였다.<sup>5</sup> 위와 같은 bbox 생성 과정<sup>6</sup>은 컴퓨터 병목현상<sup>7</sup> <sup>8</sup>에 걸리지 않을 것을 목표로 한다. 결국 2.1.에서 언급한 hierarchical algorithm(or hypotheses)가 제대로 작동했기에 효율적인 컴퓨팅 리소스 사용이 가능해졌다.</li>
</ol></li>
</ul></li>
</ol>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
1 stage detector vs 2 stage detector
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<blockquote class="blockquote">
<p>object detection을 한번에 진행하느냐, 두단계에 나눠서 진행하느냐</p>
</blockquote>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img a="object detection" src="https://github.com/dotpyo/archive/assets/60145951/a0dbb2ce-972e-4d0e-8533-25b516863e90" width="100%"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Zou et al.&nbsp;2019. Object Detection in 20 Years: A Survey</td>
</tr>
</tbody>
</table>
<ol type="1">
<li>1-Stage는 RoI가 아니라 <code>Anchor box</code>를 추출한다. 먼저 이미지를 그리드 단위로 나누고, 그리드에서 confidence matrix를 생성한다. 이때문에 이미지의 맥락적 이해도가 낮고 2 stage보다 정확도가 떨어질 수 있지만 속도가 빠르다는 장점이 있어 영상처리 등에서 사용된다.
<ul>
<li>e.g.&nbsp;YOLO, SSD</li>
</ul></li>
<li>2-Stage는 고전적인 방식처럼 1. <code>RoI</code>를 탐지하고 2. Classification 또는 Box Regression을 진행한다. 여기서 bbox를 뽑는 과정은 box regression, classification은 이미지 자체의 답을 분류하는 일이다.
<ul>
<li>e.g.&nbsp;R-CNN계열: Fast R-CNN, Faster R-CNN</li>
</ul></li>
</ol>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Faster R-CNN, Mask R-CNN; Image Segmentation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<blockquote class="blockquote">
<p>based on top of Faster R-CNN; a model that predict both bounding boxes and class scores for potential objects in the image</p>
</blockquote>
<blockquote class="blockquote">
<p>regional proposal에서 selective search가 <strong>아닌</strong> CNN을 사용한다. (=<code>RPN</code>)</p>
</blockquote>
<p>Faster R-CNN의 한 종류 중 하나다. 분기점은 어디에 있을까? R-CNN이 ’potential object in the image’를 찾아내는 과정이었다면 Mask R-CNN은 그 범주를 <code>bounding box</code><sup>9</sup> 와 <code>segmentation</code><sup>10</sup> 하여 구체화한다. 같은 class여도 다른 객체로 인식하는 instance segmentation task에서 사용하기 위해 개발되었다.</p>
<p><strong><a href="https://arxiv.org/pdf/1506.01497.pdf">Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</a></strong></p>
<ul>
<li>Region Proposal Network, RPN
<ul>
<li>앞서 언급한 것과 같이 CNN으로 이루어져 있다.</li>
<li>하나의 CNN으로 region proposal을 제안하고, object detection도 수행한다. = detection network인 R-CNN과 연산을 공유한다.</li>
<li>이 과정이 FPN의 핵심이고, Mask R-CNN도 해당 과정을 채택했다고 직접 언급했다.</li>
<li>과정
<ol type="1">
<li>특성 추출; 이 과정을 어떻게 진행하느냐에 따라 방법론이 달라진다. (RPN)
<ol type="1">
<li>이미지를 사전학습 된 Conv Layer에 통과시켜 feature map을 추출한다.</li>
<li><em>backbone network</em>를 얻은 feature map의 각 위치에서 sliding window를 수행한다.<sup>11</sup>
<ul>
<li>[발췌] slide a small network over the convolution feature map output
<ul>
<li>small network! takes input as an <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> spatial windows</li>
</ul></li>
</ul></li>
<li>region proposal 생성을 위해 k개의 anchor box를 사용한다.</li>
<li>최종적으로 bbox를 결정하게 된다.</li>
</ol></li>
<li>RoIPool을 통해 bbox cls, bbox reg를 진행하는 과정 (Fast R-CNN identical)
<ol type="1">
<li>classification 과정으로, k개의 box에 객체가 있는지 없는지 binary score로 결과를 준다.</li>
<li>regression layer가 k개 box의 좌표를 출력한다.<sup>12</sup></li>
</ol></li>
</ol></li>
</ul></li>
</ul>
<p><strong><a href="https://arxiv.org/pdf/1703.06870.pdf">Mask R-CNN</a></strong></p>
<ul>
<li>Mask R-CNN
<ul>
<li>RPN에서 RoI를 가져오고, mask branch를 추가한 형태다.
<ul>
<li>bbox reg branch와 평행으로 추가</li>
<li>mask branch; 각 RoI에 작은 FCN을 추가한 형태</li>
</ul></li>
</ul>
<ol type="1">
<li>RoI: R-CNN에서 사용하는 RoIPool 대신 RoIAlign을 사용한다.
<ul>
<li>RoIPool: RoI로부터 작은 크기의 feature map을 추출한다.<sup>13</sup></li>
<li>RoIAlign: RoIPool에서의 양자화를 제거하고 bilinear interpolation을 통해 <em>추출된 특징에 맞게</em> align되게 한다. 즉, 위치정보를 보존할 수 있다.</li>
</ul></li>
<li>mask branch: segmentation은 픽셀 단위의 이미지 classification이다. 공간 정보가 보존된 RoI map이 있으므로 binary mask를 출력할 수 있다.<sup>14</sup></li>
</ol></li>
</ul>
<p><br></p>
<ul>
<li>출처
<ul>
<li><a href="https://deep-learning-study.tistory.com/464">https://deep-learning-study.tistory.com/464</a></li>
<li><a href="https://herbwood.tistory.com/10">https://herbwood.tistory.com/10</a></li>
<li><a href="https://ropiens.tistory.com/76">https://ropiens.tistory.com/76</a></li>
<li><a href="https://velog.io/@skhim520/Mask-R-CNN-%EB%85%BC%EB%AC%B8-%EB%A6%AC%EB%B7%B0">https://velog.io/<span class="citation" data-cites="skhim520/Mask-R-CNN">@skhim520/Mask-R-CNN</span>-%EB%85%BC%EB%AC%B8-%EB%A6%AC%EB%B7%B0</a></li>
<li><a href="https://medium.com/@parkie0517/mask-r-cnn-%EB%85%BC%EB%AC%B8-%EB%A6%AC%EB%B7%B0-roialign-mask-prediction-branch%EC%97%90-%EA%B4%80%ED%95%B4%EC%84%9C-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0-1b1fc2715600">RoI Align</a></li>
</ul></li>
</ul>
</div>
</div>
</div>
</section>
<section id="라이브러리" class="level3">
<h3 class="anchored" data-anchor-id="라이브러리">라이브러리</h3>
<div id="cell-6" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> read_image </span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.ops.boxes <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> masks_to_boxes</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tv_tensors</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms.v2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span></code></pre></div>
</div>
</section>
<section id="데이터셋-생성" class="level3">
<h3 class="anchored" data-anchor-id="데이터셋-생성">데이터셋 생성</h3>
<div id="cell-9" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> read_image</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/PennFudanPed/PNGImages/FudanPed00046.png"</span>)</span>
<span id="cb4-6">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/PennFudanPed/PedMasks/FudanPed00046_mask.png"</span>)</span>
<span id="cb4-7"></span>
<span id="cb4-8">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb4-9">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb4-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image"</span>)</span>
<span id="cb4-11">plt.imshow(image.permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb4-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb4-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mask"</span>)</span>
<span id="cb4-14">plt.imshow(mask.permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dotpyo.github.io/archive/posts/LabHAI/tutorial/maskrcnn/torchvision_finetuning_instance_segmentation_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-10" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""데이터를 한번에 불러오기"""</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PennFudanDataset(torch.utils.data.Dataset):</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `root dir` 에서의 `root`</span></span>
<span id="cb5-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, root, transforms):</span>
<span id="cb5-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> root </span>
<span id="cb5-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms </span>
<span id="cb5-7"></span>
<span id="cb5-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load all image file</span></span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ensure that they are aligned; img, mask 한꺼번에 다루기 위해 </span></span>
<span id="cb5-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(os.listdir(os.path.join(root, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PNGImages"</span>))))</span>
<span id="cb5-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(os.listdir(os.path.join(root, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PedMasks"</span>))))</span>
<span id="cb5-12">    </span>
<span id="cb5-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb5-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load images and masks</span></span>
<span id="cb5-15">        img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.root, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PNGImages"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.imgs[idx])</span>
<span id="cb5-16">        mask_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.root, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PedMasks"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.masks[idx])</span>
<span id="cb5-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위에서 import 한 torchvision의 read_image사용</span></span>
<span id="cb5-18">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_image(img_path)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [3, 397, 396]</span></span>
<span id="cb5-19">        mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_image(mask_path)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1, 397, 396]</span></span>
<span id="cb5-20"></span>
<span id="cb5-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 고유한 값 추출</span></span>
<span id="cb5-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch.unique(input:Tensor) -&gt; return the unique elements of the input tensor</span></span>
<span id="cb5-23">        obj_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.unique(mask)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [0, 1, 2] (shape: [3])</span></span>
<span id="cb5-24">        obj_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj_ids [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이때 첫값은 배경: black</span></span>
<span id="cb5-25">        num_objs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(obj_ids)         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 총 채널 개수</span></span>
<span id="cb5-26"></span>
<span id="cb5-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split the color-encoded mask into a set of binary masks</span></span>
<span id="cb5-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mask: [2, 1, 1] 형태의 [0, 1]로 이루어진 행렬; binary mask</span></span>
<span id="cb5-29">        masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> obj_ids[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8)</span>
<span id="cb5-30"></span>
<span id="cb5-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bbox generate</span></span>
<span id="cb5-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [number of people, 4]</span></span>
<span id="cb5-33">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> masks_to_boxes(mask)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [x1, y1, x2, y2], 사람의 수만큼 해당 행렬이 포함되어있다.</span></span>
<span id="cb5-34"></span>
<span id="cb5-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># label이 하나이므로 (1) 속하느냐 (0) 속하지 않느냐 로 구분된다.</span></span>
<span id="cb5-36">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones((num_objs,), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int64)</span>
<span id="cb5-37"></span>
<span id="cb5-38">        image_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx</span>
<span id="cb5-39">        area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (boxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (boxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># suppose all instances are not crowd</span></span>
<span id="cb5-41">        iscrowd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((num_objs,), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int64)</span>
<span id="cb5-42"></span>
<span id="cb5-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrap sample and targets into torchvision tv_tensors:</span></span>
<span id="cb5-44">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tv_tensors.Image(img)</span>
<span id="cb5-45"></span>
<span id="cb5-46">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-47">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boxes"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tv_tensors.BoundingBoxes(</span>
<span id="cb5-48">                            boxes, </span>
<span id="cb5-49">                            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XYXY"</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>F.get_size(img))</span>
<span id="cb5-50">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"masks"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tv_tensors.Mask(masks)</span>
<span id="cb5-51">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"labels"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels</span>
<span id="cb5-52">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_id</span>
<span id="cb5-53">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"area"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> area</span>
<span id="cb5-54">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iscrowd"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iscrowd</span>
<span id="cb5-55"></span>
<span id="cb5-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transforms <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-57">            img, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transforms(img, target)</span>
<span id="cb5-58"></span>
<span id="cb5-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img, target</span>
<span id="cb5-60"></span>
<span id="cb5-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.imgs)</span></code></pre></div>
</div>
</section>
<section id="모델-선언" class="level3">
<h3 class="anchored" data-anchor-id="모델-선언">모델 선언</h3>
<div id="cell-12" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.faster_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastRCNNPredictor</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load a model pre-trained on COCO; backbone</span></span>
<span id="cb6-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.models.detection.fasterrcnn_resnet50_fpn(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEFAULT"</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace the classifier with a new one, that has</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># num_classes which is user-defined</span></span>
<span id="cb6-9">num_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1 class (person) + background</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get number of input features for the classifier</span></span>
<span id="cb6-11">in_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.box_predictor.cls_score.in_features</span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace the pre-trained head with a new one</span></span>
<span id="cb6-13">model.roi_heads.box_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastRCNNPredictor(in_features, num_classes)</span></code></pre></div>
</div>
<section id="backbone" class="level4">
<h4 class="anchored" data-anchor-id="backbone">backbone</h4>
<div id="cell-14" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FasterRCNN</span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AnchorGenerator:</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   that generates anchors for a set of feature maps and image sizes.</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   The module support computing anchors at multiple sizes </span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   and aspect ratios per feature map. </span></span>
<span id="cb7-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.rpn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AnchorGenerator</span>
<span id="cb7-8"></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- load a pre-trained model for cls --- #</span></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://github.com/pytorch/vision/blob/main/torchvision/models/mobilenetv2.py</span></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backbone의 결과값은 ordered dict이므로 인덱싱도 가능</span></span>
<span id="cb7-13">backbone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.models.mobilenet_v3_small(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEFAULT"</span>).features</span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ``FasterRCNN`` needs to know the number of output channels in a backbone.</span></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   \because backbone의 output channel이 anchor box가 된다.</span></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torchvision.models.mobilenet_v2(weights="DEFAULT").features 코드로 확인 가능</span></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설계상 Conv 마지막 레이어를 빠져나오면 last channel이 1280으로 된다.</span></span>
<span id="cb7-18">backbone.out_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1280</span></span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- RPN anchors: 5 x 3 --- #</span></span>
<span id="cb7-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5 different sizes and 3 different aspect(측면 비율)</span></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 특징 맵이 잠재적으로 다른 사이즈와 측면 비율을 가질 수 있기 때문</span></span>
<span id="cb7-23">anchor_generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AnchorGenerator(</span>
<span id="cb7-24">    sizes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)),     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5</span></span>
<span id="cb7-25">    aspect_ratios<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>))     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3</span></span>
<span id="cb7-26">)</span>
<span id="cb7-27"></span>
<span id="cb7-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- define feature map --- #</span></span>
<span id="cb7-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backbone이 Tensor를 반환할 때 'feature_names'는 [0]이 될 것으로 가정</span></span>
<span id="cb7-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 일반적으로 백본은 OrderedDict[Tensor] 이르모 이름을 정할 수 있다.</span></span>
<span id="cb7-31">roi_pooler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.MultiScaleRoIAlign(</span>
<span id="cb7-32">    featmap_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List[str]</span></span>
<span id="cb7-33">    output_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 구현된 바 7x7 이었음</span></span>
<span id="cb7-34">    sampling_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-35">)   </span>
<span id="cb7-36"></span>
<span id="cb7-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- define model --- #</span></span>
<span id="cb7-38">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FasterRCNN(</span>
<span id="cb7-39">    backbone<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>backbone,</span>
<span id="cb7-40">    num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># binary segmentation</span></span>
<span id="cb7-41">    rpn_anchor_generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>anchor_generator,</span>
<span id="cb7-42">    box_roi_pool<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>roi_pooler</span>
<span id="cb7-43">)</span></code></pre></div>
</div>
</section>
<section id="데이터셋에-맞추어-객체-검출-object-detection-segmentation" class="level4">
<h4 class="anchored" data-anchor-id="데이터셋에-맞추어-객체-검출-object-detection-segmentation">데이터셋에 맞추어 객체 검출 (object detection, segmentation)</h4>
<ul>
<li>1 stage 방법론을 채택</li>
</ul>
<div id="cell-16" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.faster_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastRCNNPredictor</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.mask_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaskRCNNPredictor</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_model_instance_segmentation(num_classes):</span>
<span id="cb8-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사전학습된 모델을 불러올 것</span></span>
<span id="cb8-7">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.models.detection.maskrcnn_resnet50_fpn(weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEFAULT"</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># '분류를 위해' 입력 특징을 받아온다.</span></span>
<span id="cb8-10">    in_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.box_predictor.cls_score.in_features</span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 미리 학습된 헤더를 새로운 것으로 바꾸는데, 헤더란?</span></span>
<span id="cb8-12">    model.roi_heads.box_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastRCNNPredictor(in_features, num_classes)</span>
<span id="cb8-13"></span>
<span id="cb8-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mask predictor'를 위한' 입력 특징의 '차원'을 얻는다.</span></span>
<span id="cb8-15">    in_features_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.mask_predictor.conv5_mask.in_channels</span>
<span id="cb8-16">    hidden_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb8-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mask predictor 변경</span></span>
<span id="cb8-18">    model.roi_heads.mask_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MaskRCNNPredictor(in_features_mask,</span>
<span id="cb8-19">                                                        hidden_layer,</span>
<span id="cb8-20">                                                        num_classes)</span>
<span id="cb8-21"></span>
<span id="cb8-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> model</span></code></pre></div>
</div>
</section>
</section>
<section id="통합" class="level3">
<h3 class="anchored" data-anchor-id="통합">통합</h3>
<div id="cell-18" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># #| output: false</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># os.system("wget https://raw.githubusercontent.com/pytorch/vision/main/references/detection/engine.py")</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># os.system("wget https://raw.githubusercontent.com/pytorch/vision/main/references/detection/utils.py")</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># os.system("wget https://raw.githubusercontent.com/pytorch/vision/main/references/detection/coco_utils.py")</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># os.system("wget https://raw.githubusercontent.com/pytorch/vision/main/references/detection/coco_eval.py")</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># os.system("wget https://raw.githubusercontent.com/pytorch/vision/main/references/detection/transforms.py")</span></span></code></pre></div>
</div>
<section id="데이터-증강-및-변환" class="level4">
<h4 class="anchored" data-anchor-id="데이터-증강-및-변환">데이터 증강 및 변환</h4>
<div id="cell-20" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import transforms as T  # ModuleNotFoundError: No module named 'sgmllib'</span></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> v2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> T</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_transform(train):</span>
<span id="cb10-5">    transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-6">    transforms.append(T.PILToTensor())</span>
<span id="cb10-7">    transforms.append(T.ToDtype(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb10-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> train:</span>
<span id="cb10-9">        transforms.append(T.RandomHorizontalFlip(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb10-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> T.Compose(transforms)</span></code></pre></div>
</div>
<p>테스트 코드</p>
<div id="cell-22" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> utils</span>
<span id="cb11-2"></span>
<span id="cb11-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.models.detection.fasterrcnn_resnet50_fpn(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEFAULT"</span>)</span>
<span id="cb11-4">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PennFudanDataset(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data/PennFudanPed/'</span>, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_transform(train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb11-5">data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(</span>
<span id="cb11-6">    dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb11-7">    collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>utils.collate_fn)</span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># num_workers=0 issue &gt;&gt; RuntimeError: DataLoader worker (pid(s) 75278) exited unexpectedly</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 시</span></span>
<span id="cb11-10">images,targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(data_loader))</span>
<span id="cb11-11">images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(image <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> images)</span>
<span id="cb11-12">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{k: v <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> t.items()} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets]</span>
<span id="cb11-13">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(images,targets)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns losses and detections</span></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 추론 시</span></span>
<span id="cb11-15">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb11-16">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>), torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)]</span>
<span id="cb11-17">predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns predictions</span></span></code></pre></div>
</div>
</section>
</section>
<section id="메인-학습-검증" class="level3">
<h3 class="anchored" data-anchor-id="메인-학습-검증">메인 학습, 검증</h3>
<div id="cell-24" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() : device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> torch.backends.mps.is_available() : device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mps'</span>)</span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> : device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb12-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using mps</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> engine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_one_epoch, evaluate</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GPU: cuda -&gt; mps</span></span>
<span id="cb14-4">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mps'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.backends.mps.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># device = 'cpu'</span></span>
<span id="cb14-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dataset; 2 classes; background, person</span></span>
<span id="cb14-9">num_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use PennFundanPed dataset, define transform</span></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get_transform; 위에서 정의함 - 50% 확률로 좌우 flip</span></span>
<span id="cb14-12">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PennFudanDataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/PennFudanPed'</span>, get_transform(train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb14-13">dataset_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PennFudanDataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/PennFudanPed'</span>, get_transform(train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span>
<span id="cb14-14"></span>
<span id="cb14-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split dataset (train, test)</span></span>
<span id="cb14-16">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randperm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)).tolist()</span>
<span id="cb14-17">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.Subset(dataset, indices[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>])</span>
<span id="cb14-18">dataset_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.Subset(dataset_test, indices[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>:])</span>
<span id="cb14-19"></span>
<span id="cb14-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define dataloaders</span></span>
<span id="cb14-21">data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(</span>
<span id="cb14-22">    dataset,</span>
<span id="cb14-23">    batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb14-24">    shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb14-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># num_workers=4,</span></span>
<span id="cb14-26">    collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>utils.collate_fn</span>
<span id="cb14-27">)</span>
<span id="cb14-28"></span>
<span id="cb14-29">data_loader_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(</span>
<span id="cb14-30">    dataset_test,</span>
<span id="cb14-31">    batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-32">    shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb14-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># num_workers=4,</span></span>
<span id="cb14-34">    collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>utils.collate_fn</span>
<span id="cb14-35">)</span>
<span id="cb14-36"></span>
<span id="cb14-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get model</span></span>
<span id="cb14-38">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model_instance_segmentation(num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes)</span>
<span id="cb14-39"></span>
<span id="cb14-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move model into device; model도 옮겨야 한다.</span></span>
<span id="cb14-41">model.to(device)</span>
<span id="cb14-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from torch import nn; model = nn.DataParallel(model)</span></span>
<span id="cb14-43"></span>
<span id="cb14-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># construct an optimizer</span></span>
<span id="cb14-45">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model.parameters() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p.requires_grad]</span>
<span id="cb14-46">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(</span>
<span id="cb14-47">    params,</span>
<span id="cb14-48">    lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>,</span>
<span id="cb14-49">    momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,</span>
<span id="cb14-50">    weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0005</span></span>
<span id="cb14-51">)</span>
<span id="cb14-52"></span>
<span id="cb14-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and a learning rate scheduler</span></span>
<span id="cb14-54">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.StepLR(</span>
<span id="cb14-55">    optimizer,</span>
<span id="cb14-56">    step_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb14-57">    gamma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb14-58">)</span>
<span id="cb14-59"></span>
<span id="cb14-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's train it just for 2 epochs</span></span>
<span id="cb14-61">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-62"></span>
<span id="cb14-63"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb14-64">    </span>
<span id="cb14-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train for one epoch, printing every 10 iterations</span></span>
<span id="cb14-66">    train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb14-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the learning rate</span></span>
<span id="cb14-68">    lr_scheduler.step()</span>
<span id="cb14-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># evaluate on the test dataset</span></span>
<span id="cb14-70">    evaluate(model, data_loader_test, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb14-71"></span>
<span id="cb14-72"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"That's it!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using mps
That's it!</code></pre>
</div>
</div>
<div class="callout callout-style-simple callout-caution callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
— 이슈 기록 —
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><code>Loss is nan, stopping training</code></p>
<blockquote class="blockquote">
<p>확인 결과: OOM - 메모리에 데이터를 올려두는 과정에서 배치를 1로 정하면 문제가 생기지 않는데, 2부터는 문제가 발생함.</p>
</blockquote>
<pre><code># mps 사용시 발생하는 이슈;
#   mps nightly 배포 당시 사용했을 때 문제없이 딥러닝이 돌아갔었는데 갑자기 안 됨.
#   v2로 올라가서 생기는 문제일지도 모르겠지만 tv_tensor를 사용해야 해서
#   버전 다운그레이드는 불가능한 상황

Error: command buffer exited with error status.
    The Metal Performance Shaders operations encoded on it may not have completed.
    Error: 
    (null)
    Internal Error (0000000e:Internal Error)
    &lt;AGXG13XFamilyCommandBuffer: 0x6a0739b40&gt;
    label = &lt;none&gt; 
    device = &lt;AGXG13XDevice: 0x12e53f000&gt;
        name = Apple M1 Pro 
    commandQueue = &lt;AGXG13XFamilyCommandQueue: 0x12f22ba00&gt;
        label = &lt;none&gt; 
        device = &lt;AGXG13XDevice: 0x12e53f000&gt;
            name = Apple M1 Pro 
    retainedReferences = 1</code></pre>
<ul>
<li>source code
<ul>
<li><a href="https://github.com/pytorch/pytorch/issues/77764">official pytorch github implementing list</a></li>
<li><a href="https://github.com/pytorch/pytorch/pull/102148#issuecomment-1564555666">mps implemented test code</a></li>
</ul></li>
<li>pytorch github issue
<ul>
<li><a href="https://github.com/pytorch/pytorch/issues/119968">#119968</a></li>
<li><a href="https://github.com/pytorch/pytorch/issues/111173">#111173</a></li>
<li><a href="https://github.com/google/jax/issues/19110#issuecomment-1868385445">Solved!</a></li>
</ul></li>
<li>apple forum
<ul>
<li><a href="https://developer.apple.com/forums/thread/693849">#693849</a></li>
<li><a href="https://forums.developer.apple.com/forums/thread/711854">#711854</a></li>
</ul></li>
</ul>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>보행자↩︎</p></li>
<li id="fn2"><p>Convolution에서 kernel이 특징을 추출하는 과정과 비슷해보이기도 한다. 실제로 개념은 같다.↩︎</p></li>
<li id="fn3"><p>e.g.&nbsp;selective search, edge boxes↩︎</p></li>
<li id="fn4"><p>이 다양성이 다양한 bbox를 생성하는데 영향을 미치는 것 같다.↩︎</p></li>
<li id="fn5"><p>비효율적이라면 sliding window를 쓰면 됐다.↩︎</p></li>
<li id="fn6"><p>‘the creation’?↩︎</p></li>
<li id="fn7"><p>CPU 혹은 GPU 중 하나의 리소스가 부족한 경우 느려지는 현상.↩︎</p></li>
<li id="fn8"><p>2012년에 발표된 논문에서 언급한 병목현상이니 해당 알고리즘은 CPU에서 동작할 것으로 보인다.↩︎</p></li>
<li id="fn9"><p>localize approximately↩︎</p></li>
<li id="fn10"><p>localize by edging↩︎</p></li>
<li id="fn11"><p>논문에서는 3x3 filter 사용↩︎</p></li>
<li id="fn12"><p>box중앙, x좌표, y좌표, height, width↩︎</p></li>
<li id="fn13"><p>그래서 RPN에서 feature map을 사용할 수 있었다.↩︎</p></li>
<li id="fn14"><p>segmentation 보충↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>PyTorch</category>
  <category>computer vision</category>
  <category>tutorial</category>
  <guid>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/maskrcnn/torchvision_finetuning_instance_segmentation.html</guid>
  <pubDate>Thu, 07 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to read a paper</title>
  <dc:creator>S. Keshav</dc:creator>
  <link>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/How_2_read_a_paper.html</link>
  <description><![CDATA[ 





<p>처음부터 정독하며 필요한 부분을 발췌 혹은 보충한다.</p>
<blockquote class="blockquote">
<h3 id="tldr" class="anchored">TL;DR</h3>
<ol type="1">
<li>논문의 전반적인 핵심 논제를 파악할 것</li>
<li>실제 논문의 내용을 이해할 것, 그러나 모든 세부 내용까지 알 필요는 없다.</li>
<li>깊이 읽으며 앞선 pass에서 읽어내지 못한 부분까지 파악한다.</li>
</ol>
</blockquote>
<ul>
<li>General Terms: Documentation</li>
<li>Keywords: Paper, Reading, Hints</li>
</ul>
<section id="abstract" class="level2">
<h2 class="anchored" data-anchor-id="abstract">Abstract</h2>
<p>연구자들이 논문을 읽는데 사용하는 시간에 비하여 그것을 읽는 방법은 충분히 가르쳐지지 않고 있으며 이는 상당한 손실을 야기한다. 본 논문은 논문을 읽을 때에 실용적이고 효과적인 <code>three-pass method</code> 개요를 서술할 것이며 포괄적 문헌 조사 (literature survey)에서 이를 어떻게 사용하는지 보이려 한다.</p>
</section>
<section id="introduction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>연구자들은 논문을 여러가지 이유로 읽는다.</p>
<ul>
<li>최신 동향을 살피기 위해</li>
<li>새로운 분야로의 진출을 위해</li>
<li>컨퍼런스나 수업의 리뷰를 위함
<ul>
<li>리뷰란 정확히 무엇을 말하는가?: 전반적으로 검토하는 행위 혹은 리뷰 논문을 읽는 행위 등을 말할 수 있으나 본 맥락에서는 피어리뷰(peer review)<sup>1</sup>를 말하는 것 같다.</li>
</ul></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;동료 평가로, 타 연구자의 연구를 객관적으로 분석하고 저널에 실리기 적합한지 판정하는 과정이다. 저널의 영역, 목적, 독자층을 살피는 과정이 수반되며 논문의 가치를 판정하기 위해 몇 가지 항목을 검토하게 된다.</p></div><div class="margin-aside">
<p>검토되는 항목은 다음과 같다.</p>
<ul>
<li>보존 가치</li>
<li>참신성</li>
<li>연구 윤리/직업적 무결성</li>
<li>글의 완성도</li>
<li>데이터의 질과 분석의 타당성</li>
<li>결론의 타당성</li>
</ul>
</div></div>
<div class="callout callout-style-simple callout-tip callout-titled" title="Reviewer Guidelines for Journal Selections">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Reviewer Guidelines for Journal Selections
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>논문 작성 시 유념할 것</li>
</ul>
<ol type="1">
<li><strong>보존가치 Archival</strong>: 저널에 싣는다는 것은 어떤 형태로든 해당 연구가 기록되고 외부에 퍼진다는 의미다. 따라서 저널에 실릴 논문은 결과나 해석의 가치가 있는 결과를 포함해야 한다.
<ul>
<li>논문의 내용이 과거의 연구와 관계있거나 향후 연구의 초석이 될 가능성이 있는가?</li>
<li>결과나 해석이 지속 가능한 과학적 가치를 가지고 있는가?</li>
<li>해당 주제가 연구 분야에서 중요한가?</li>
<li>SOTA (State Of The Art) 를 넘어서는 성능 혹은 강점을 가지고 있는가?</li>
</ul></li>
<li><strong>참신성 Innovative</strong>: 기술적으로 새롭거나, 혁신적이거나, 구조적인 리뷰여야 한다. 연구의 가치를 판정함에 있어 가장 중요한 지표로 보인다.
<ul>
<li>주제가 오늘날의 청중에게 흥미로운 내용이거나 중요한 내용인가?</li>
<li>아이디어/정보/방법이 가치있거나 새롭거나 창의적인가?</li>
<li>저자가 제시한 정보가 완전히 새로운 것인가?</li>
<li>분석적이거나, 수치적이거나, 실험적인 결과 혹은 해석이 독창적인가? (Are ~ original 에서 original을 독창적으로 해석)</li>
<li>결과가 미칠 영향이 선명하게 기술되어 있는가?</li>
</ul></li>
<li><strong>직업적 무결성 Professional Integrity</strong>: 기본적인 윤리에 대한 문제다. 연구자로서 개인의 사적 이익과 견해를 최대한 배제하고 객관적이고 공정하게 연구에 임했는지 확인한다.
<ul>
<li>특정 자본과 밀접한 관계를 맺고 있지 않은가?</li>
<li>개인적이거나 편향된 관점을 가지지는 않았는가?</li>
<li>선행연구가 적절히 인용되어 있는가?</li>
<li>(만약 그렇게 주장할 경우) 실제로 최초로 사용된 기술인가?</li>
<li>반대되는 주장이나 경쟁 구도에 있는 연구 등을 폄하하지 않는가?</li>
<li>선행연구를 공정하고 건설적인 방식으로 참조하고 있는가?</li>
<li>연구자로서 적절한 규정 및 윤리 지침을 따랐는가?</li>
</ul></li>
<li><strong>발표 Presentation</strong>: 논문도 글이다. 읽히기에 적합한 글인지, 연구의 내용을 명료하고 병확하게 기술했는지 판정한다.
<ul>
<li>서론에서 동기를 설명하고 독자의 방향을 제시하는가?</li>
<li>논문에 수행 작업, 방법, 주된 결과가 설명되어 있는가?</li>
<li>주제에서 벗어나지 않았는가?</li>
<li>표와 그림이 명확하고 정확한가?</li>
<li>논문에서 사용한 개념이 명확히 제시되어 있는가?</li>
<li>제목과 주요 단어가 오용되지 않았는가?</li>
<li>논문의 길이가 논문의 범위에 적합한지까지 살피는 줄 몰랐는데 그렇다고 한다.</li>
<li>기본적인 작문 기술을 갖추었는가?; 단어 선택, 문장 구조, 단락 구성, 참고 문헌 인용 등</li>
</ul></li>
<li><strong>질 Quality</strong>: 데이터의 질과 분석과 기술의 타당성을 확인한다. 아무리 좋은 데이터라도 적합한 분석 과정을 거치지 않는다면 무의미하며, 아무리 좋은 기술이라도 적절한 데이터를 사용하지 않는다면 적합한 결과를 확인할 수 없다.
<ul>
<li>기술적으로 건전한가?</li>
<li>강점 뿐 아니라 그 한계까지 평가하고 있는가?</li>
<li>평가 지표가 명시되어 있는가?</li>
<li>선행 연구를 충분히 검토하였는가?</li>
<li>선행 연구에서 이어지는 연구인가? 즉, 이전에 입증된 연구에서 참조된 가정으로부터 비롯된 연구인가?</li>
</ul></li>
<li><strong>결론의 타당성 Soundness of conclusions</strong>: 글과 주장을 올바르게 맺었는지 확인한다.
<ul>
<li>주장이 확고한가?</li>
<li>결론이 이론적, 실험적으로 타당한가?</li>
<li>제시한 사실이 충분히 결론을 뒷받침 할 수 있는가?</li>
</ul></li>
</ol>
<ul>
<li>출처: <a href="https://www.sae.org/binaries/content/assets/cm/content/publications/journals/resources/reviewerrubricresourcepage.pdf">SAE International</a></li>
</ul>
</div>
</div>
</div>
<p>이와 같은 이유로 연구자들은 매년 수백시간을 논문을 읽는데 사용한다. 당연히 논문을 읽는 방법이 중요할 수 밖에 없는데, 적절하게 논문을 읽는 방법이 가르쳐지지 않은 실정이다. 대학원생들은 스스로 시행착오를 겪으며 ’논문 읽기’를 습득해야 하는데 이는 노력을 낭비하는 일이 아닐 수 없다.</p>
<p>여러해 동안 저자는 쉽고 효율적으로 논문에 접근하는 방법을 사용해왔는데, 이를 이 논문에서 제시하겠다고 한다.</p>
<p>여기까지가 도입부의 내용이다. callout으로 정리한 내용에 따르면 일반적으로 introduction 에는 ‘동기’ 및 ’연구의 방향’을 제시하는 과정이 필요하다. 이번 논문의 내용을 살펴보자. 서론은 세줄로 요약이 가능하다. (1) 연구자들은 논문을 많이 읽는다/읽어야 한다. (2) 그러나 도움을 받을 방법이 없기에 그 접근 장벽은 상당히 높아졌다. (3) 저자는 이를 쉽게 해결할 방법(three-pass approach)을 알고 있다.</p>
<p>짧은 도입부지만 여기에는 동기 (1~2) 와 연구의 방향 (3) 이 모두 제시되어 있다. 도입부로써 적절하다고 판단할 수 있겠다.</p>
</section>
<section id="the-three-pass-approach" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-three-pass-approach">The Three-pass approach</h2>
<p>주요 아이디어는: 처음부터 끝까지 냅다 읽어내리지 말고, 세번정도에 나누어 읽으라는 것이다. 각각의 ’pass’에는 성취해야 할 목표들이 있는데 이를 나열하면 다음과 같다.</p>
<ol type="1">
<li>논문의 전반적인 핵심 논제를 파악할 것</li>
<li>실제 논문의 내용을 이해할 것, 그러나 모든 세부 내용까지 알 필요는 없다.</li>
<li>깊이 읽으며 앞선 pass에서 읽어내지 못한 부분까지 파악한다.</li>
</ol>
<section id="the-first-pass" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-first-pass">The first pass</h3>
<p>읽어볼만 한지, 그렇다면 얼마나 깊게 읽어야 하는지 전반적으로 판단하는 단계다. 5분에서 10분을 들여 빠르게 스키밍 한다. 단계는 다음과 같다.</p>
<ol type="1">
<li>제목, 초록, 소개를 읽고</li>
<li>섹션과 하위섹션의 <strong>제목</strong>을 읽으며 무슨 내용일지 파악한다.</li>
<li>결론을 확인한다.</li>
<li>참고문헌을 훑어보며<sup>2</sup> 읽은 내용을 전반적으로 검토한다.<sup>3</sup></li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;glance: 흘낏 보다, 휙휙 훑어보다.</p></div><div id="fn3"><p><sup>3</sup>&nbsp;tick sbd/sth off: (이미 처리했음을 나타내기 위해) ~에 체크 표시(✓)를 하다</p></div></div><p>해당 단계가 제대로 진행 되었다면 다음 항목에 대답할 수 있어야 한다.</p>
<ul class="task-list">
<li><label><input type="checkbox">범주: 어떤 종류의 논문인가? - 주제, 연구방법 등</label></li>
<li><label><input type="checkbox">맥락: 다른 논문과의 연관성은 어떠한가?</label></li>
<li><label><input type="checkbox">정확도: 가정은 타당해 보이는가?</label></li>
<li><label><input type="checkbox">기여도: 주된 기여도는 무엇인가? - novelty 등을 말하는 것으로 보임</label></li>
<li><label><input type="checkbox">명확성: 논문은 잘 쓰여졌는가?</label></li>
</ul>
<p>위 질문에 대답함으로써 이해도를 파악하고, 그 대답을 통해 논문을 마저 읽을지 말지 결정할 수 있는데 배경 지식이 부족해 충분히 이해하지 못했거나, 논문의 주장이 빈약하거나, 논문의 질 자체가 좋지 않은 경우 더 읽지 않아도 좋다. 다만 연구 분야가 아니더라도 향후 도움이 될 것으로 판단되면 첫번째 단계는 통과한 것으로 본다.</p>
<div class="callout callout-style-simple callout-note callout-titled" title="제목과 소제목들은 이래서 중요하다.">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
제목과 소제목들은 이래서 중요하다.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>첫번째 단계에서 더 읽을지 말지가 결정된다. 작성한 논문이 읽힐지 말지 결정되는건 이 짧은 5~10분 사이의 시간이므로 섹션 제목을 <strong>일관성 있게</strong> 선택하고 <strong>간결하며 포괄적인 초록</strong>을 작성하는데 주의를 기울여라.</p>
<ul>
<li>리뷰 통과 뿐 아니라, 일반 연구자들을 위해서도 그렇게 해야 한다.</li>
<li>5분이 지나도 논문의 핵심을 이해하지 못하면 논문이 읽히지 않을 가능성이 높다.</li>
</ul>
</div>
</div>
</div>
</section>
<section id="the-second-pass" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-second-pass">The second pass</h3>
<p>첫번째 단계를 통과했다면 더 주의깊게 읽을 때가 됐다. 세부사항은 잠시 넘겨두고 논문을 이해하는데 초점을 맞추자. 메모하거나 의견을 정리하는 것도 도움이 된다.</p>
<ol type="1">
<li><p>시각자료 검토</p>
<p>특히 논문의 그림, 도표 등 시각 자료를 시간들여 살피는 것이 좋은데, 이는 논문의 질을 판단하는 주요한 요소가 되기 때문이다. 예를 들어; 축에 레이블이 제대로 붙어있는지, 결과가 오차 막대와 함께 포함되어 있는지<sup>4</sup> 결론이 통계적으로 유효한지 확인할 수 있는 방법이다.] 등을 확인하는 것이 좋다.</p></li>
<li><p>참고문헌 검토</p>
<p>또한, 참고문헌의 경우 나중에 읽을 것을 분류하는게 좋은데 이는 논문의 배경에 대해 알 수 있는 좋은 방법이기 때문이다. 읽지 않은 참고 문헌을 나중에 읽을 수 있게 표시하라고 명시해 두었으니, 참고문헌을 찾아 읽는 습관도 함께 들여두자.</p></li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn4"></div></div><p>그렇다면 두번째 단계를 통과했는지 알아보는 척도는 무엇일까. 아마도 내용의 이해일 것이다.</p>
<blockquote class="blockquote">
<p>After this pass, you should be able to grasp the content of the paper. <strong>You should be able to summarize the main thrust of the paper, with supporting evidence, to someone else.</strong> This level of detail is appropriate for a paper in which you are interested, but does not lie in your research speciality.</p>
</blockquote>
<p>한시간 안에 이 단계를 끝마치는게 좋다.<sup>5</sup> 만약 한시간이 지나도 논문을 이해하지 못한다면 우리에겐 세가지 선택지가 남는다.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;전문 분야는 한시간 이내에 끝내야 한다는 의미일까? 아니면 더 오랜 시간을 들여서 검토해야 한다는 의미일까? 전자인것 같긴 하다.</p></div></div><ol type="1">
<li>포기한다.</li>
<li>미뤄둔다.</li>
<li>계속한다.</li>
</ol>
<p>포기한다고 해서 세상이 끝나는건 아니다. 미룬다고 해서 큰일이 당장 벌어지는 것도 아닐 것이다. 특히 두번째 선택지는, 전진을 위한 후퇴에 가깝다. 배경지식을 습득하고 보는 것이기 때문이다. 하지만 언제나 준비만 할 수는 없는 것 같다.</p>
<p>대개 나는 두번째 방법을 선택하는데, 지난한 시간 끝에 때로 3번을 강행하는게 좋다는 결론을 내리게 되었다. 모르면 모르는대로 실험해보자. 그 과정에서 얻은 것이 배경지식보다 더 빠른 길을 제시할 수 있다.</p>
</section>
<section id="the-third-pass" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-third-pass">The third pass</h3>
<p>이제 논문을 완전히 이해할 때가 됐다. 완전히 이해했다는 건 어떤 의미일까? 전 단계에서 다른 사람에게 설명할 수 있을 정도로 충분히 이해했다면, 다시말해 이해의 수준이 ’다른 사람에게 내보일만큼’에 도달했다면 마지막은 나에게 떳떳할만큼의 수준을 갖추는 것이 순서일 것이다.</p>
<blockquote class="blockquote">
<p>The key to the third pass is to attempt to virtually re-implement the paper: that is, making the same assumptions as the authors, re-create the work.</p>
</blockquote>
<p>재현이다. 이 과정과 실제 논문을 비교하면 첫번째 단계에서 가늠해보았던 논문의 혁신적인 부분을 직접 체험할 수 있을 뿐 아니라 두번째 단계에서 찾아내지 못했던 실험의 미비함이나 가정의 불완전함 또한 발견할 수 있다. 그 과정에서 새로운 연구 주제를 찾을 수 있게 된다.</p>
<p>이 과정은 까다롭게 진행해야 한다. 모든 가정을 파악하고, 모든 요소에 이의를 제기하며, 본인이라면 어떻게 증명했을지 생각한 후에 논문과 비교하는 과정을 거쳐야한다. 이 과정은 초심자에겐 네다섯시간, 숙련자에겐 한시간정도 소요된다.</p>
<p>세번째 단계를 거쳤다면 다음을 해낼 수 있어야 한다. 거의 해당 논문을 리뷰하는 수준까지 가야 하는 것 같다.</p>
<blockquote class="blockquote">
<p>At the end of this pass, you should be able to reconstruct the entire structure of the paper from memory, as well as be able to identify its strong and weak points.</p>
</blockquote>
<p>특히 논문에 직접적으로 드러나지 않은 <strong>암시적인 가정</strong><sup>6</sup>, 인용의 누락, 분석 기법의 잠재적 문제점까지 찾아내는 것이 목표다.</p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;implicit assumptions</p></div></div></section>
</section>
<section id="doing-a-literature-survey" class="level2">
<h2 class="anchored" data-anchor-id="doing-a-literature-survey">Doing A Literature survey</h2>
<p>실제로 논문을 찾아보는 단계다. 간단히 방법만 기록하겠다.</p>
<ol type="1">
<li>Google Scholar, CiteSeer 등의 학술 검색 엔진에서 키워드를 잘 선택하여 최신 논문 세개에서 다섯개를 찾을 것</li>
<li>논문을 훑어보며 내용을 파악하고 관련 내용을 검토할 것
<ul>
<li>이때 서베이 논문을 찾을 수도 있는데, 그렇다면 기뻐하며 끝내자.</li>
</ul></li>
<li><strong>참고문헌</strong>에서 반복되는 저자 이름을 찾을 것.
<ul>
<li>이때 반복되는 논문과 주요 저자의 최근 연구 이력을 잘 살피자.</li>
</ul></li>
<li>영향력이 큰 컨퍼런스의 최근 발표 내용을 살펴보고, 수준 높은 연구를 익힐 것.</li>
<li>3번에서 모아둔 주요 연구자료와 4번에서 찾은 연구들을 함께 살피고, 반복해서 읽는다.</li>
</ol>
</section>
<section id="experience-related-work" class="level2">
<h2 class="anchored" data-anchor-id="experience-related-work">4~5 experience, related work</h2>
<p>경험에 근거하여 숲을 보기 전에 나무부터 살피고 있지 말라는 조언을 전한다.</p>
<p>또한</p>
<ul>
<li>리뷰 논문을 작성하는 중이라면 아래 논문을 참고하라
<ul>
<li>S. Peyton Jones, “Research Skills,”
<ul>
<li><a href="http://research.microsoft.com/%20simonpj/Papers/giving-%20a-talk/giving-a-talk.html">http://research.microsoft.com/ simonpj/Papers/giving- a-talk/giving-a-talk.html</a></li>
</ul></li>
</ul></li>
<li>기술 논문을 작성하는 중이라면 아래 웹 사이트와 프로세스 개요를 탐독하라
<ul>
<li>H. Schulzrinne, “Writing Technical Articles,”
<ul>
<li><a href="http://www.cs.columbia.edu/%20hgs/etc/writing-%20style.html">http://www.cs.columbia.edu/ hgs/etc/writing- style.html</a></li>
</ul></li>
<li>G.M. Whitesides, “Whitesides’ Group: Writing a Paper,”
<ul>
<li><a href="http://www.che.iitm.ac.in/misc/dd/writepaper.pdf">http://www.che.iitm.ac.in/misc/dd/writepaper.pdf</a></li>
</ul></li>
</ul></li>
<li>이 모든 연구 기술의 스펙트럼을 다루는 웹 사이트도 하나 추천한다.
<ul>
<li>ACM SIGCOMM Computer Communication Review Online
<ul>
<li><a href="http://www.sigcomm.org/ccr/drupal/">http://www.sigcomm.org/ccr/drupal/</a></li>
</ul></li>
</ul></li>
</ul>


</section>


 ]]></description>
  <category>tutorial</category>
  <guid>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/How_2_read_a_paper.html</guid>
  <pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>PyTorch101</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/pytorch101.html</link>
  <description><![CDATA[ 





<section id="왜-파이토치냐" class="level2">
<h2 class="anchored" data-anchor-id="왜-파이토치냐">1. 왜 파이토치냐?</h2>
<ol type="1">
<li>이전에 <code>왜 텐서냐</code>, 부터 시작해야 한다.</li>
<li>왜 텐서일까?
<ul>
<li>텐서란 무엇일까?
<ul>
<li>텐서는 배열이나 행렬과 같은 특수 자료 구조. GPU에서 사용할 수 있도록 NumPy의 ndarray를 개량했다. 개념적으로는 배열(array)와 다를게 없다.</li>
<li>정말로 다를게 없나?
<ul>
<li>그렇다! 텐서와 넘파이배열은 종종 내부 메모리를 공유하며 서로 형태를 전환할 수 있기까지 하다.</li>
</ul></li>
</ul></li>
</ul></li>
<li>그러므로 다른 자료형과 구분되는 텐서의 특징은 <code>GPU 사용이 가능</code>하다는 점이다. 즉, 병렬연산에 최적화 되어있다는 것과 같다.</li>
<li>그 빠른 병렬연산으로 하는 일이 <code>automatic differentiation</code> 즉, 자동 미분이다.</li>
</ol>
<blockquote class="blockquote">
<p>Tensor is optimized at automatic differentiation</p>
</blockquote>
</section>
<section id="주요-내용" class="level2">
<h2 class="anchored" data-anchor-id="주요-내용">2. 주요 내용</h2>
<blockquote class="blockquote">
<p>데이터셋 구축 코드와 학습 코드를 분리하는 것이 가독성 및 유지보수면에서 좋다.</p>
</blockquote>
<section id="데이터는-어떻게" class="level3">
<h3 class="anchored" data-anchor-id="데이터는-어떻게">2.1. 데이터는 어떻게?</h3>
<p><code>PyTorch</code>의 데이터셋 관리 방식은 독특하지만 편리하다. 데이터 작업을 위한 기본 요소 두가지가 존재하는데 이는 각각 <code>DataLoader</code> 와 <code>Dataset</code>이다. <sup>1</sup> 데이터를 받아오는건 샘플(feature), 정답(label)으로 구성된 <code>Dataset</code>이고 각각의 값을 iterable한 객체로 감싸 접근하게 쉽게 만든 객체가 <code>DataLoader</code>다.</p>
<aside id="footnotes" class="footnotes footnotes-end-of-block">
<ol>
<li id="fn1"><p>모두 <code>torch.utils.data</code> 하위의 모듈이다.↩︎</p></li>
</ol>
</aside>
<ul>
<li><code>Dataset</code>: sample, label; 정답이 매칭된 데이터
<ul>
<li>Dataset을 직접 생성하는 경우도 있는데, 이후에 <code>DataLoader</code>로 사용하기 위해 다음 세가지 magic method를 구현해야 한다: <code>__init__</code>, <code>__len__</code>, <code>__getitem__</code></li>
</ul></li>
<li><code>DataLoader</code> iterable data; data를 minibatch에 전달하는 역할을 하며, 에폭마다 섞는 shuffle을 수행한다. PyTorch의 장점인 multiprocessing으로 속도 향상을 꾀할 수 있다.</li>
</ul>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
__init__
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>Dataset 객체가 구축될 때 한 번 실행되는 초기화 함수.</li>
<li>예를 들어, 이미지 파일과 주석 파일이 포함된 디렉토리와 변형방법 (transform, target_transform) 을 초기화한다.</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotations_file, img_dir, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, target_transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-2">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(annotations_file)</span>
<span id="cb1-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dir</span>
<span id="cb1-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transform</span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_transform</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
__getitem__
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>len 으로 총 개수를 알았으니 인덱스로 값을 불러올 수 있다.</li>
<li>계속해서 이미지를 예로 들었을 때, <code>pd.readcsv</code> 로 <code>self.img_labels</code>를 불러왔으니 <code>DataFrame</code>형태다.</li>
</ul>
<ol type="1">
<li>디스크에서 이미지 위치를 식별한다.</li>
<li><code>torchvision</code><sup>2</sup> 의 <code>read_image</code> method 를 이용해 <em>이미지를 텐서로 변환</em> 한다.</li>
<li><code>__init__</code>에서 정의한 <code>self.img_labels</code> 로 텐서로 변환된 이미지의 라벨 값을 호출한다.
<ul>
<li>(선택) 필요시 transform 절차를 거친다. <sup>3</sup></li>
</ul></li>
<li>텐서 이미지와 라벨을 최종 형태인 <strong>dictionary</strong> 로 변환한다.</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>:</span>
<span id="cb2-2">    img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_dir, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_labels.iloc[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-3">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_image(img_path)</span>
<span id="cb2-4">    label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_labels.iloc[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform:</span>
<span id="cb2-6">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform(image)</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_transform:</span>
<span id="cb2-8">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_transform(label)</span>
<span id="cb2-9">    sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>: image, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: label}</span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sample</span></code></pre></div>
</div>
</div>
</div>
<aside id="footnotes" class="footnotes footnotes-end-of-block">
<ol start="2">
<li id="fn2"><p><a href="http://torchvision.io">torchvision.io</a>↩︎</p></li>
<li id="fn3"><p>왜 하필 이 단계에서 진행하는지는 <code>target_transform</code>을 확인할 것↩︎</p></li>
</ol>
</aside>
<section id="활용은-이렇게-한다." class="level4">
<h4 class="anchored" data-anchor-id="활용은-이렇게-한다.">2.1.1. 활용은 이렇게 한다.</h4>
<ol type="1">
<li><code>from torch.utils.data import DataLoader</code>로 데이터로더를 받아오고, 인자로 데이터셋과 배치사이즈를 전달한다.</li>
<li><code>Dataset</code>마다 loader가 있어야 하니 train, test <strong>모두</strong> <code>DataLoader</code>로 받아와야한다.</li>
<li>배치 자동화, 샘플링, 섞기 등 다양한 기능을 내부에서 제공한다.</li>
<li>배치사이즈에 맞는 개수의 feature와, label을 묶은 객체의 요소 (batch) 를 반환한다.</li>
</ol>
<ul>
<li>iterable한 객체이므로 for문으로 간단하게 테스트 할 수 있다.</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이전 단계에서 정의한 학습용, 테스트용 데이터셋</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb3-3"></span>
<span id="cb3-4">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(training_data:Dataset, batch_size:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, shuffle:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-5">test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(test_data, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
</section>
<section id="모델은-어떻게" class="level3">
<h3 class="anchored" data-anchor-id="모델은-어떻게">2.2. 모델은 어떻게?</h3>
<p>PyTorch의 모델들은 <code>nn.Module</code> 을 상속받는 클래스를 생성해서 정의한다. 모델을 구성하는 기본 요소가 이미 세팅되어있어 __init__에서 세팅만 하면 되니 편리하다.</p>
<ol type="1">
<li><code>__init__</code> 함수에서 계층들을 정의하고</li>
<li><code>forward</code> 메서드에서 데이터를 전달하는 방식을 정한다.</li>
<li>어떤 하드웨어(cpu, gpu, mps)를 사용할지 결정하는 것도 이 단계다.</li>
</ol>
<section id="예시-모델-확인" class="level4">
<h4 class="anchored" data-anchor-id="예시-모델-확인">2.2.1. 예시 모델 확인</h4>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tutorials.pytorch.py</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="tutorials.pytorch.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습에 사용할 CPU나 GPU, MPS 장치를 얻습니다.</span></span>
<span id="cb4-2">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span></span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available()</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span></span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.backends.mps.is_available()</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span></span>
<span id="cb4-8">)</span>
<span id="cb4-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Using </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> device"</span>)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델을 정의합니다.</span></span>
<span id="cb4-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> NeuralNetwork(nn.Module):</span>
<span id="cb4-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.flatten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Flatten()</span>
<span id="cb4-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear_relu_stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb4-17">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>),</span>
<span id="cb4-18">            nn.ReLU(),</span>
<span id="cb4-19">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>),</span>
<span id="cb4-20">            nn.ReLU(),</span>
<span id="cb4-21">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-22">        )</span>
<span id="cb4-23"></span>
<span id="cb4-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb4-25">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.flatten(x)</span>
<span id="cb4-26">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear_relu_stack(x)</span>
<span id="cb4-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> logits</span>
<span id="cb4-28"></span>
<span id="cb4-29">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NeuralNetwork().to(device)</span>
<span id="cb4-30"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model)</span></code></pre></div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
logits?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><strong>선형 딥러닝 모델의 최종 값이다.</strong></p>
<ul>
<li>log + odds</li>
<li>정규화 되지 않은 로그 확률로, 모든 실수가 될 수 있다.</li>
<li>log-odds function은 <img src="https://latex.codecogs.com/png.latex?0~1"> 사이의 값을 계산하는 시그모이드의 역함수다.<sup>4</sup></li>
</ul>
<p>classification을 진행할 때 중간 레이어에 무엇을 넣든 마지막에 FC layer로 마무리하는데 이때 노드를 분류하는 클래스의 수만큼 만든다. 즉, 이 FC layer를 통과한 결과가 특정 클래스에 해당할 가능성을 의미한다고 볼 수 있다. FC layer에 들어가기 전단계인 활성화 함수로는 Sigmoid, Softmax, ReLU 등을 사용한다. 활성화 함수에 넣기 전의 로그 확률을 logits라고 말하며 PyTorch에서는 실질적으로 이 값을 다룬다.</p>
<blockquote class="blockquote">
<p>역순으로 생각하면 쉽다.<br>
1. 분류 문제에서 각 클래스에 해당할 확률을 알아낸다.<br>
2. 그 확률은 활성화 함수라는 값을 통해 나온 값이다.<sup>5</sup><br>
3. 위의 활성화 함수에 넣는 값이 <code>logit</code> 이다</p>
</blockquote>
<p><strong>왜 최종 확률이 아니라 logits을 남겨두는가?</strong></p>
<p>활성화 함수를 통한 값, 확률을 보면 직관적인 이해도가 높아지지만 잠재적으로 값이 누수되거나 연산 과정에서 값이 누락될 위험이 잔존한다.<sup>6</sup> 활성화 함수를 통해 확률을 구하는 과정은 어렵지 않으므로 그 원형인 <code>logits</code>을 보존하는게 나은 선택이다. 그뿐 아니라 logit은 entropy 연산에서도 사용되므로 남겨두는 편이 활용도가 좋다.</p>
<blockquote class="blockquote">
<p>즉, logit을 남겨두는 이유를 아래로 정리할 수 있다.<br>
1. 정보의 손실을 막기 위해<br>
2. cross entropy loss 등의 loss 계열에 사용하기 위해</p>
</blockquote>
</div>
</div>
</div>
<aside id="footnotes" class="footnotes footnotes-end-of-block">
<ol start="4">
<li id="fn4"><p><a href="https://haje01.github.io/2019/11/19/logit.html"><span class="citation" data-cites="haje01">@haje01</span></a>↩︎</p></li>
<li id="fn5"><p>활성화 함수는 확률을 연산하는 함수다.↩︎</p></li>
<li id="fn6"><p><a href="https://discuss.pytorch.org/t/why-have-a-model-output-raw-logits-instead-of-softmax/114289/2"><span class="citation" data-cites="KFrank">@KFrank</span></a>↩︎</p></li>
</ol>
</aside>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>backward</code>는?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>순전파와 역전파는 역할이 분리된 함수 각각에 포함되어 있다.</p>
<ul>
<li>순전파는 모델을 구성하는 방식이고</li>
<li>역전파는 학습에서의 파라미터 ‘최적화’ 과정이다.
<ul>
<li><code>.backward()</code>로 구현되어 있다. 다음 단계인 train 함수에서 사용한다.</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
굳이 <code>model().to(device)</code> 를 해줘야 하는 이유?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>기본적으로 텐서의 <strong>생성</strong> 위치는 CPU인데 tensor.to(‘cuda’) 를 통해 GPU로 텐서를 <strong>이동</strong> 할 수 있다.</li>
<li>모든 텐서의 위치가 동일해야 연산을 할 수 있으니 코드 설계에 유의하자.</li>
</ul>
</div>
</div>
</div>
</section>
</section>
<section id="학습은-어떻게" class="level3">
<h3 class="anchored" data-anchor-id="학습은-어떻게">2.3. 학습은 어떻게?</h3>
<p>텐서플로우에서 처럼 <code>fit</code>으로 끝나는게 아니라 <code>train</code>함수를 따로 정의해야했다. DataLoader는 학습에 필요한 데이터니 이때 모델이 학습할 수 있게 데이터를 넘겨주고 위에서 선언한 모델과 손실함수, 최적화 함수를 함께 전달한다. 실질적인 학습이 진행되는 곳이라 위에서 <strong>정의</strong>한 값들을 다 여기에 <strong>전달</strong>해주는게 맞다.</p>
<ol type="1">
<li>최적화 단계: 하이퍼파라미터를 정의하고 학습하며 파라미터를 조정한다. (train_loop)
<ul>
<li>epoch, batch size<sup>7</sup>, learning rate</li>
<li>각 epoch마다 어떤 단계를 거칠 것인가, 모델 설계는 이쪽에 들어간다</li>
</ul></li>
</ol>
<aside id="footnotes" class="footnotes footnotes-end-of-block">
<ol start="7">
<li id="fn7"><p>size에 맞추어 batch를 넘겨줄 수 있는것도 DataLoader가 배치를 만들어주는 역할을 하기 때문이다.↩︎</p></li>
</ol>
</aside>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
배치 정규화
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<blockquote class="blockquote">
<p>학습 데이터의 분포를 정하는 방식, 학습 단계에서만 사용한다.</p>
</blockquote>
<p>학습을 하면서 분포를 정하는 방식인 배치 정규화는 과적합 외에도 기울기 소실 및 폭주를 완화하여 학습을 안정적으로 할 수 있게 돕는데 가중치 <img src="https://latex.codecogs.com/png.latex?w"> 가 커질 경우 다음 층에서 학습해야 하는 범위가 커진다. 따라서 학습 중 레이어 단위의 가중치 조절이 필요한데 이 역할이 배치 정규화다.</p>
</div>
</div>
</div>
<ol start="3" type="1">
<li>검증 단계 (test_loop)
<ul>
<li>손실함수: 모델 출력인 logit이 여기서 사용된다.</li>
<li><code>eval()</code> 로 평가모드 전환 잊지 말 것</li>
</ul></li>
</ol>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>eval</code>이 무엇인가
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>evaluation의 약자로 모델을 평가하는 과정이다.</li>
<li>모델을 평가모드로만 전환하는 단계다.
<ol type="1">
<li>dropout 비활성화</li>
<li>배치정규화(의 이동평균, 이동분산) 업데이트 정지</li>
</ol>
<ul>
<li>일관성 있는 결과를 얻을 수 있다. (모델 자체의 성능에 집중할 수 있다.)</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tutorials.pytorch.py</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="tutorials.pytorch.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_loop(dataloader, model, loss_fn, optimizer):</span>
<span id="cb5-2">    size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader.dataset)</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch, (X, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader):</span>
<span id="cb5-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측(prediction)과 손실(loss) 계산</span></span>
<span id="cb5-5">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb5-6">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(pred, y)</span>
<span id="cb5-7"></span>
<span id="cb5-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 역전파</span></span>
<span id="cb5-9">        optimizer.zero_grad()</span>
<span id="cb5-10">        loss.backward()</span>
<span id="cb5-11">        optimizer.step()</span>
<span id="cb5-12"></span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-14">            loss, current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss.item(), (batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X)</span>
<span id="cb5-15">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;7f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;5d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;5d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>)</span>
<span id="cb5-16"></span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_loop(dataloader, model, loss_fn):</span>
<span id="cb5-19">    size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader.dataset)</span>
<span id="cb5-20">    num_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader)</span>
<span id="cb5-21">    test_loss, correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-22"></span>
<span id="cb5-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb5-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> X, y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataloader:</span>
<span id="cb5-25">            pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb5-26">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss_fn(pred, y).item()</span>
<span id="cb5-27">            correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (pred.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb5-28"></span>
<span id="cb5-29">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> num_batches</span>
<span id="cb5-30">    correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> size</span>
<span id="cb5-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test Error: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>correct)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;0.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%, Avg loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;8f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
</section>
<section id="모델-관리는-어떻게" class="level3">
<h3 class="anchored" data-anchor-id="모델-관리는-어떻게">2.4. 모델 관리는 어떻게?</h3>
<section id="저장하고-불러오기" class="level4">
<h4 class="anchored" data-anchor-id="저장하고-불러오기">저장하고 불러오기</h4>
<p>모델의 형태를 포함하여 저장하고 불러오는 것을 목표로 한다.</p>
<ol type="1">
<li><p>모델 전체를 불러오는 <code>torch.save()</code></p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tutorials.pytorch.py</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="tutorials.pytorch.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 경로 지정</span></span>
<span id="cb6-2">PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entire_model.pt"</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장하기</span></span>
<span id="cb6-5">torch.save(net, PATH)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 불러오기</span></span>
<span id="cb6-8">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(PATH)</span>
<span id="cb6-9">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span></code></pre></div>
</div></li>
<li><p>[권장] 매개변수만 저장하는 <code>torch.save_dict()</code></p>
<ul>
<li>문법이 직관적이다.</li>
<li>하지만 모델 저장시 사용한 클래스 밑 디렉토리 구조에 종속된다. (매개변수이니 어쩔 수 없다.)</li>
</ul>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tutorials.pytorch.py</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="tutorials.pytorch.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 경로 지정</span></span>
<span id="cb7-2">PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state_dict_model.pt"</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장하기</span></span>
<span id="cb7-5">torch.save(net.state_dict(), PATH)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 불러오기</span></span>
<span id="cb7-8">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Net()</span>
<span id="cb7-9">model.load_state_dict(torch.load(PATH))</span>
<span id="cb7-10">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span></code></pre></div>
</div></li>
</ol>
<ul>
<li>불러올 때에도 <code>.eval()</code> 과정을 거친단걸 잊지 말자!</li>
</ul>
</section>
</section>
</section>
<section id="전체-흐름" class="level2">
<h2 class="anchored" data-anchor-id="전체-흐름">3. 전체 흐름</h2>
<ol type="1">
<li>데이터셋 구축
<ul class="task-list">
<li><label><input type="checkbox">Dataset? DataLoader?</label></li>
<li><label><input type="checkbox">값들이 모두 가속장치로 옮겨가 있는가?</label></li>
</ul></li>
<li>모델 구축
<ul class="task-list">
<li><label><input type="checkbox"><code>__init__</code> 에 모델을 선언하고</label></li>
<li><label><input type="checkbox"><code>__forward__</code> 에 학습 과정을 정의했는가?</label></li>
</ul></li>
<li>하이퍼파라미터 정의 (학습)
<ul class="task-list">
<li><label><input type="checkbox">학습은 얼마나?</label></li>
<li><label><input type="checkbox">배치 사이즈는 얼마나?</label></li>
<li><label><input type="checkbox">학습률은 얼마나?</label></li>
</ul></li>
<li>최적화 단계는 어떻게? (학습)
<ul class="task-list">
<li><label><input type="checkbox">손실 함수는?</label></li>
<li><label><input type="checkbox">최적화 함수는?</label></li>
</ul></li>
<li>모델 정의 방법?
<ul class="task-list">
<li><label><input type="checkbox">리팩토링 등을 예정하지 않고 있다면 <code>torch.save_dict()</code></label></li>
</ul></li>
</ol>


</section>

 ]]></description>
  <category>PyTorch</category>
  <category>tutorial</category>
  <guid>https://dotpyo.github.io/archive/posts/LabHAI/tutorial/pytorch101.html</guid>
  <pubDate>Tue, 05 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Zero-shot Learning</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/techniques/zero_shot.html</link>
  <description><![CDATA[ 





<p>딥러닝의 성능은 데이터의 질, 양과 정비례하는데 데이터 수집의 어려움, 레이블링의 까다로움, 레이블링의 시간 및 금전적 비용 부담으로 더 이상 데이터에 의존하기엔 어려운 단계에 이르렀다. 이러한 수렴단계에서 데이터의 절대량에 구애받지 않는 모델의 중요성이 대두되었고 데이터의 context를 읽어내는 이른바 meta learning이 발전하게 되었다. Zero-shot Learning은 그 중 한 방법론으로 한 번도 본 적 없는 레이블을 구분해 낼 수 있는 모델이다.</p>
<blockquote class="blockquote">
<p>Zero-shot learning 이란: label이 지정된 소수의 클래스 집합 데이터와 클래스에 대한 ‘추가 정보만을’ 사용하여 한 번도 본 적 없는 많은 클래스까지 잘 예측하도록 학습한 모델.</p>
</blockquote>
<p>그렇다면 어떤 추가정보를 사용해 학습했기에 본 적 없는 데이터까지 추론할 수 있을까? 얼룩말을 학습한 모델에게 호랑이 이미지를 주고 어떤 동물인지 알아내라는 질문을 했다고 하자.</p>
<br>
<center>
<img src="https://github.com/dotpyo/archive/assets/60145951/76d655d6-a81f-4d9b-bea2-bb45e1aa9c42" width="600"> <img src="https://github.com/dotpyo/archive/assets/60145951/368f0152-5969-4ea0-81d4-e4b033618b4c" width="600">
</center>
<p><br></p>
<p>얼룩말을 학습한 모델이 호랑이를 본다면 먼저 얼룩말에서 학습한 특성을 살필 것이다. 꼬리가 있는가, 줄무늬가 있는가, 갈기가 있는가. 이러한 정보를 살핀 모델은 호랑이를 ‘꼬리가 있고 검은 줄무늬가 있으나 갈기는 없는 주황색 가죽을 가진 동물’ 로 설명할 수 있을 것이다. 기존처럼 이미지 모델을 이용해 분류 문제를 풀면 이 동물이 얼룩말이 아니라는 결론만 얻을 수 있지만 Zero-shot learning은 이미지를 묘사한 context를 얻을 수 있음에 주목한다. 이렇게 얻어낸 호랑이를 설명한 묘사를 언어 모델에 넣는다면 어떨까? 언어모델은 위키피디아를 포함한 다량의 언어를 학습한 모델이므로, 이미지 모델에서 동물의 종류를 찾기엔 부족했던 ‘갈기가 없고 주황색 가죽을 가진’ 특징을 찾아낼 수 있을 것이다. 주황색 바탕에 검은 줄무늬를 가진 얼룩말 크기의 동물은 무엇일까? 호랑이다.</p>
<p>이렇게 이미지 모델에서 이미지의 특성을 찾아내고, 그 특성을 언어모델에 물어 학습하지 않았던 label을 분류하는 모델이 Zero-shot model이다.</p>
<p>그런데 이미지 모델에서 이미지의 특성은 어떻게 찾아낼까?</p>
<br>
<center>
<img src="https://github.com/dotpyo/archive/assets/60145951/e2610724-f239-43af-b336-9fa351fa562b" width="600">
</center>
<p><br></p>
<p>이미지 모델은 이미지를 이미지가 아닌 행렬로 받아들인다. 이미지의 특성은 숫자로 표현되어 행렬이 되는데, 이렇게 특성을 반영하는 방식을 ’(semantic) embedding’이라고 한다. 임베딩 된 두 이미지를 비교하면 공통된 특성은 유사한 숫자로 표현되어 있을 것이다. 이렇게 학습되지 않은 특성도 임베딩 벡터 값으로 보존할 수 있다.</p>
<br>
<center>
<img src="https://github.com/dotpyo/archive/assets/60145951/faa2e767-c41c-44f6-bd3f-285a3f851bbc" width="600">
</center>
<p><br></p>
<p>이렇게 Zero-shot learning의 직관을 얻을 수 있었다. 추후 모델이 작용하는 구체적인 기작과 Meta Learning에 대해 알아보도록 하겠다.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Few-shot learning task with meta-learning
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>DMQM 연구실의 세미나 기록은 청자들의 후기에서도 사고를 확장할 수 있는데 이번에 눈에 들어온 부분은 아래와 같다.</p>
<blockquote class="blockquote">
<p>Few-shot learning task with meta-learning Meta learning은 Meta training(경험을 쌓고)과 Meta testing(관심 대상의 소수데이터로 다수데이터를 잘 예측)으로 이루어진다. Meta training을 위해 확보된 데이터 셋에서 여러 개의 과업을 나눈다. 즉, 각 과업은 예측하고자 하는 클래스, 소수데이터, 다수데이터가 서로 다르다. 이렇게 여러 과업으로 나누어 학습하는 방법을 에피소딕 학습(episodic training)으로 말한다. 이렇게 얻어낸 “경험”으로 부터 관심 대상이 되는 과업(task new)을 잘 수행해야 하는데 어떤 “경험”을 반영할 지 선택하는 게 중요하다.</p>
</blockquote>
<p>메타러닝은 배우는 방법을 배우는 방법이라고 간략하게 알고 있다. 조금 더 사람의 이해에 가까운 학습 방법으로 느껴져 흥미가 간다.</p>
</div>
</div>
</div>



 ]]></description>
  <category>Meta learning</category>
  <category>theory</category>
  <guid>https://dotpyo.github.io/archive/posts/techniques/zero_shot.html</guid>
  <pubDate>Sat, 21 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Model freezing</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/techniques/freezing.html</link>
  <description><![CDATA[ 








 ]]></description>
  <category>PyTorch</category>
  <guid>https://dotpyo.github.io/archive/posts/techniques/freezing.html</guid>
  <pubDate>Fri, 20 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Handling imbalanced Data</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/techniques/handling_imbalanced_data.html</link>
  <description><![CDATA[ 





<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>under sampling : 너무 많은 양의 데이터를 잘라내는 방식</li>
<li>over sampling : 적은 양의 데이터를 증강하는 방식</li>
<li>weight sampling : 학습할 배치에 데이터가 들어갈 확률을 지정하는 방식</li>
<li>loss function : 적은 양의 데이터 학습과정에 가중치를 주는 방식</li>
</ol>
<p>데이터의 절대량을 조정하는 방법과 (1, 2) 학습할 때 데이터의 균형을 맞추는 방법이 (3, 4) 있다.</p>
<p>이들 중 <code>weight sampling</code> 방법과 imbalanced data task에 적합한 <code>loss function</code>를 알아보겠다.</p>
<section id="weight-sampling" class="level3">
<h3 class="anchored" data-anchor-id="weight-sampling">Weight sampling</h3>
<p>배치(batch)크기는 하이퍼파라미터(hyperparameter)의 한 종류로 한 번 기울기를 갱신할 때(step) 사용하는 데이터의 개수를 말한다. 배치는 미니배치(mini batch)라고도 불리며 <img src="https://latex.codecogs.com/png.latex?2%5En"> 개로 구성된다. 이 때 배치를 구성하는 방식을 샘플링(Sampling)이라고 하는데 Weight Sampling은 배치를 구성하는 데이터를 각각 다른 확률에 따라 추출하는 샘플링 방식이다. 따라서 데이터의 절대적인 개수가 작아 뽑힐 확률이 적은 데이터에게 가중치를 주어 더 자주 뽑힐 수 있게 조정하는 과정을 거칠 수 있다.</p>
<p>예를 들어, 아래 표와 같은 데이터가 있을 때, c가 뽑힐 확률은 0.1, d가 뽑힐 확률은 0.4로 d가 뽑힐 확률이 네배 더 크다. 불균형 데이터(imbalanced data) 에서는 치명적으로, 한 배치에 뽑힌 데이터가 모두 한 label로 구성될 가능성이 있기 때문이다. 아래 표에서 배치가 32라고 할 때, 배치를 구성하는 label이 모두 d라면 모델은 균형있는 학습을 하지 못하게 되거나 d에 과적합 될 수 있다. 그러므로 전체 데이터가 불균형하더라도 배치 안에서는 균형있는 학습을 진행하기 위해 <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.WeightedRandomSampler"><code>torch.utils.data.WeightedRandomSampler</code></a> 메서드를 사용한다.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">label</th>
<th style="text-align: center;">count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">a</td>
<td style="text-align: center;">30</td>
</tr>
<tr class="even">
<td style="text-align: center;">b</td>
<td style="text-align: center;">20</td>
</tr>
<tr class="odd">
<td style="text-align: center;">c</td>
<td style="text-align: center;">10</td>
</tr>
<tr class="even">
<td style="text-align: center;">d</td>
<td style="text-align: center;">40</td>
</tr>
</tbody>
</table>
<p><code>WeightedRandomSampler</code> 를 사용하면 코드 셀과 같은 결과를 확인할 수 있다. 첫번째 예제에서는 index 1의 가중치가 0.9로 가장 크며 복원추출(replacement=True)한 결과 역시 1이 세번으로 가장 많이 추출된 것을 확인 할 수 있다.</p>
<div id="cell-7" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> WeightedRandomSampler</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"replacement = True</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-&gt; "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(WeightedRandomSampler([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)))</span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"replacement = False</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-&gt; "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(WeightedRandomSampler([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>replacement = True  -&gt;  [4, 1, 1, 4, 1]
replacement = False -&gt;  [0, 1, 2, 4, 5]</code></pre>
</div>
</div>
</section>
<section id="loss-function" class="level3">
<h3 class="anchored" data-anchor-id="loss-function">loss function</h3>
<p>다른 방법으로는 학습 과정에서 가중치를 주는 방법이 있다. 모델이 문제를 풀 때 해당 문제가 쉬운지 어려운지는 어떻게 판별할까? 분류 문제에서는 최종 확률값으로 문제의 난이도를 판별한다. 이것 같기도 하고, 저것 같기도 해서 헷갈리니 각 label이 답일 확률이 비슷비슷하게 높은 것이다. 따라서 <img src="https://latex.codecogs.com/png.latex?logit"> <img src="https://latex.codecogs.com/png.latex?%5E1)"> 값의 평균은 낮을 수밖에 없다. 답을 결정하는 최종 확률은 그 중 가장 높은 값을 고른 것이니 최종 확률이 낮을수록 어려운 문제다.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5E1)"> <img src="https://latex.codecogs.com/png.latex?logit"> : <a href="https://kevinitcoding.tistory.com/entry/%EB%94%A5-%EB%9F%AC%EB%8B%9D%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%9A%8C%EA%B7%80-%EB%B6%84%EC%84%9D%EC%9D%98-%EC%9D%B4%ED%95%B4-Logit-Sigmoid-Softmax">어떤 사건이 벌어질 확률 <img src="https://latex.codecogs.com/png.latex?p">가 <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D"> 사이의 값일때 이를 <img src="https://latex.codecogs.com/png.latex?%5B-%5Cinfty,%20+%5Cinfty%5D"> 사이 실수값으로 변환하는 과정을 로짓(logit) 변환이라고 한다.</a></li>
</ul>
<section id="focal-loss" class="level5">
<h5 class="anchored" data-anchor-id="focal-loss">focal loss</h5>
<p>문제가 어려운 문제인지 아닌지 알아야 하는 이유는 여기에 있다. <code>focal loss</code>는 불균형 데이터 문제를 해결할 때 대표적으로 쓰이는 손실함수로, 쉬운 문제를 틀렸을 때엔 작은 loss 값을, 어려운 문제를 틀렸을 때엔 큰 loss 값을 반환한다. 데이터가 적어 상대적으로 잘 학습하지 못한 label은 틀렸을 때 모델의 성능에 크게 영향을 미치게 되므로 학습 과정에서 가중치를 준다고 생각할 수 있다. 그렇다면 focal loss의 최대값은 어떻게 될까? focal loss는 기본적으로 연산한 loss에서 난이도만큼 값을 ‘깎는’ 원리이므로 focal loss의 최대값은 기본 손실값과 같을 것이다.</p>
<ul>
<li>torchvision에서 제공하는 focal loss : <a href="https://pytorch.org/vision/main/_modules/torchvision/ops/focal_loss.html">source code</a></li>
</ul>
<p>이 외에도 기존 손실함수에 가중치를 줄 수 있는데 f1, cross entropy, fbeta, accuracy 등의 함수가 그러하다. 해당 함수들의 ‘average’ 인자값에 ’weighted’를 주면 가중된 손실이 누적된다. 이렇게 가중된 손실함수를 여러개 사용하면 모델의 성능이 개선될 수 있다.</p>


</section>
</section>
</section>

 ]]></description>
  <category>technique</category>
  <guid>https://dotpyo.github.io/archive/posts/techniques/handling_imbalanced_data.html</guid>
  <pubDate>Fri, 20 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>tips</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/NLP/huggingface/tips.html</link>
  <description><![CDATA[ 





<section id="다운로드-받은-모델-삭제하는-방법-cache-cli에서-지우기" class="level3">
<h3 class="anchored" data-anchor-id="다운로드-받은-모델-삭제하는-방법-cache-cli에서-지우기">다운로드 받은 모델 삭제하는 방법 (cache cli에서 지우기)</h3>
<pre><code>➜ huggingface-cli scan-cache
REPO ID                     REPO TYPE SIZE ON DISK NB FILES LAST_ACCESSED LAST_MODIFIED REFS                LOCAL PATH
--------------------------- --------- ------------ -------- ------------- ------------- ------------------- -------------------------------------------------------------------------
glue                        dataset         116.3K       15 4 days ago    4 days ago    2.4.0, main, 1.17.0 /home/wauplin/.cache/huggingface/hub/datasets--glue
google/fleurs               dataset          64.9M        6 1 week ago    1 week ago    refs/pr/1, main     /home/wauplin/.cache/huggingface/hub/datasets--google--fleurs
Jean-Baptiste/camembert-ner model           441.0M        7 2 weeks ago   16 hours ago  main                /home/wauplin/.cache/huggingface/hub/models--Jean-Baptiste--camembert-ner
bert-base-cased             model             1.9G       13 1 week ago    2 years ago                       /home/wauplin/.cache/huggingface/hub/models--bert-base-cased
t5-base                     model            10.1K        3 3 months ago  3 months ago  main                /home/wauplin/.cache/huggingface/hub/models--t5-base
t5-small                    model           970.7M       11 3 days ago    3 days ago    refs/pr/1, main     /home/wauplin/.cache/huggingface/hub/models--t5-small

Done in 0.0s. Scanned 6 repo(s) for a total of 3.4G.
Got 1 warning(s) while scanning. Use -vvv to print details.</code></pre>
<p>삭제 : <code>rm -r {LOCAL PATH}</code></p>
<p>ref : <a href="https://huggingface.co/docs/huggingface_hub/guides/manage-cache">https://huggingface.co/docs/huggingface_hub/guides/manage-cache</a></p>


</section>

 ]]></description>
  <category>NLP</category>
  <category>huggingface</category>
  <guid>https://dotpyo.github.io/archive/posts/NLP/huggingface/tips.html</guid>
  <pubDate>Wed, 18 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>PEFT</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/NLP/huggingface/PEFT.html</link>
  <description><![CDATA[ 





<section id="quicktour" class="level3">
<h3 class="anchored" data-anchor-id="quicktour">Quicktour</h3>
<p>모든 peft는 PeftConfig class를 정의한다. PeftConfig는 PeftModel을 만드는데 중요한 parameters를 저장한다. huggingface Quicktour에서는 LoRA를 이용해 클래스 분류문제를 푸므로 여기서 생성해야 할 PeftConfig는 LoraConfig다.</p>
<p>LoraConfig는 아래와 같이 정의한다</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pip install peft</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> peft <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LoraConfig, TaskType</span>
<span id="cb1-3">peft_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoraConfig(task_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TaskType.SEQ_2_SEQ_LM, inference_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb1-4">                        lora_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, lora_dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span> )</span></code></pre></div>
<section id="major-parameters" class="level4">
<h4 class="anchored" data-anchor-id="major-parameters">major parameters</h4>
<p>각 인자는 다음을 나타낸다. (<a href="https://huggingface.co/docs/peft/main/en/package_reference/tuners#peft.LoraConfig">more</a>)</p>
<ul>
<li><code>task_type</code> : TaskType 에서 task 종류를 정의한다. 이 경우에는 Seq2Seq 언어 모델링이다.
<ul>
<li>왜 하필 Seq2Seq?</li>
</ul></li>
<li><code>inference_mode</code> : 추론을 할 때 사용한다.</li>
<li><code>r</code> : low-rank matrices의 차원을 결정한다.
<ul>
<li><p>LoRA의 LoR가 Low Rank다. (LoRA: Low Rank Adaptation) 이 때의 r 값이 ’학습 가능한 분해행렬’에 해당한다.</p></li>
<li><p>low-rank matrices: 행렬의 랭크는 행렬에서 선형적으로 독립적인 열(또는 이에 상응하는 행)의 최대 수, 행렬로 표현되는 벡터가 포함하는 최대 차원 수로 행렬에 포함된 정보의 양이라고 이해할 수 있다.</p></li>
<li><p>아래와 같이 구할 수 있다.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]])</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rank of A:"</span>, np.linalg.matrix_rank(A))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]])</span>
<span id="cb2-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rank of B:"</span>, np.linalg.matrix_rank(B))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2</span></span></code></pre></div></li>
</ul></li>
<li><code>lora_alpha</code> : low rank matrices를 위한 ‘scaling factor’, lora scaling에 필요한 파라미터다.
<ul>
<li>lora scaling? (<a href="https://dotpyo.github.io/archive/NLP/LoRA.html">LoRA 참고</a>) : LoRA는 사전학습된 가중치 행렬 <img src="https://latex.codecogs.com/png.latex?W_0"> 이 업데이트 될 때 <img src="https://latex.codecogs.com/png.latex?%5CDelta%20W"> 를 <img src="https://latex.codecogs.com/png.latex?BA"> 로 바꾸어 더하는 과정이다. <img src="https://latex.codecogs.com/png.latex?W_0%20+%20%5CDelta%20W%20=%20W_0%20+%20BA"> 여기서 <img src="https://latex.codecogs.com/png.latex?A">는 random Gaussian initialized matrix 이고 B는 0으로 initialization 된 값이다. 학습 과정에서 <img src="https://latex.codecogs.com/png.latex?%5CDelta%20W%20x"> 는 <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Calpha%7D%7B%5Cgamma%7D"> 로 <strong>scaling</strong> 되고 이후 Optimized 된다. 여기서<img src="https://latex.codecogs.com/png.latex?%5Calpha"> 를 튜닝하는 것은 learning rate처럼 tuning 될 수 있다.</li>
</ul></li>
<li><code>lora_dropout</code> : LoRA 레이어를 dropout하는 확률이다.</li>
</ul>
<p>다음으로 PeftModel을 정의한다. <code>get_peft_model()</code> 로 불러오며 불러오는 방식은 다른 huggingface 모델의 방식과 동일하다.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForSeq2SeqLM</span>
<span id="cb3-2"></span>
<span id="cb3-3">model_name_or_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bigscience/mt0-large"</span></span>
<span id="cb3-4">tokenizer_name_or_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bigscience/mt0-large"</span></span>
<span id="cb3-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSeq2SeqLM.from_pretrained(model_name_or_path)</span></code></pre></div>
<p>이렇게 기본 모델과 <code>peft_config</code>을 <code>get_peft_model</code>로 wrapping한다. 이렇게 wrap된 모델이 PeftModel이다.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> peft <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_peft_model</span>
<span id="cb4-2"></span>
<span id="cb4-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_peft_model(model, peft_config)</span>
<span id="cb4-4">model.print_trainable_parameters()</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"output: trainable params: 2359296 || all params: 1231940608 || trainable%: 0.19151053100118282"</span></span></code></pre></div>
<p>위 코드의 실행 결과를 보면 실제로 우리가 학습시켜야 하는 학습인자는 0.19%만 되는 것을 확인할 수 있다. 원체 초기 파라미터 개수가 방대라니 0.19%도 적지 않은 수겠지만 비율상 상당한 감소다.</p>
</section>
<section id="reference" class="level4">
<h4 class="anchored" data-anchor-id="reference">Reference</h4>
<ul>
<li><a href="https://huggingface.co/blog/peft">https://huggingface.co/blog/peft</a></li>
<li><a href="https://da2so.tistory.com/79">https://da2so.tistory.com/79</a></li>
</ul>


</section>
</section>

 ]]></description>
  <category>NLP</category>
  <category>huggingface</category>
  <category>tutorial</category>
  <guid>https://dotpyo.github.io/archive/posts/NLP/huggingface/PEFT.html</guid>
  <pubDate>Wed, 18 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>p tuning</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/NLP/ptuning.html</link>
  <description><![CDATA[ 





<section id="p-tuning" class="level4">
<h4 class="anchored" data-anchor-id="p-tuning">p tuning</h4>
<p>“P-tuning is a method for automatically searching and optimizing for better prompts in a continuous space.”</p>
<ul>
<li>PLM의 일부 가중치만 미세조정하여 <code>continuous prompt emobedding</code>만 tuninng한다.</li>
</ul>
</section>
<section id="reference" class="level4">
<h4 class="anchored" data-anchor-id="reference">Reference</h4>
<ul>
<li><a href="https://huggingface.co/blog/peft">https://huggingface.co/blog/peft</a></li>
</ul>


</section>

 ]]></description>
  <category>NLP</category>
  <category>LLM</category>
  <category>technique</category>
  <guid>https://dotpyo.github.io/archive/posts/NLP/ptuning.html</guid>
  <pubDate>Sun, 15 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>LoRA</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/NLP/LoRA.html</link>
  <description><![CDATA[ 





<section id="lora" class="level2">
<h2 class="anchored" data-anchor-id="lora">LoRA</h2>
<p>사전 학습된 모델 가중치를 동결하고 학습 가능한 순위 분해 행렬을 트랜스포머 아키텍처의 각 계층에 주입함으로써 LLM이 제기하는 비용 및 효율성 문제에 대한 해결책을 제시한다. 이 혁신적인 접근 방식은 다운스트림 작업에서 학습 가능한 파라미터의 수를 획기적으로 줄여 GPU 메모리 요구 사항을 크게 줄이고 학습 처리량을 개선한다. 여기서 ’Low Rank matrix’는 왜 중요할까? ’extensive deep learning model’의 가중치 행렬이 low rank matrix에 존재한다는 연구결과가 있었기 때문이다.</p>
<ul>
<li><p>e.g.&nbsp;1000차원의 임베딩 벡터가 있다고 하자. 이렇게 하면 <img src="https://latex.codecogs.com/png.latex?1000x1000"> 차원의 K, Q, V 행렬이 생성되며, 각각 <img src="https://latex.codecogs.com/png.latex?10%5E3%20*%2010%5E3%20=%2010%5E6"> 개의 훈련 가능한 파라미터가 생성된다. 반면 이를 low rank matrix로 압축시키면 학습 가능한 파라미터는 20000개로 줄어든다. 따라서 LLM의 목표는 이 행렬들을 low rank로 압축하여 학습해야하는 파라미터의 수를 줄이는 것이다. (그림 참고)</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><br><img src="https://miro.medium.com/v2/resize:fit:452/format:webp/1*Q_ygJFnJaI3AS1n-zXQvdg.png"><br></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Our reparametrization. We only train A and B. For above example r=8 and d =1000.</td>
</tr>
</tbody>
</table>
<p>LLM에서의 fine tuning은 모델 내의 모든 가중치 행렬을 또 다른 가중치 행렬로 이동하는 과정으로 이해될 수 있는데 base model의 안정성을 위해 가중치행렬을 동결하고 (freeze) <img src="https://latex.codecogs.com/png.latex?W"> 행렬을 두개의 low rank matrix인 <img src="https://latex.codecogs.com/png.latex?A">, <img src="https://latex.codecogs.com/png.latex?B"> 로 분해하는 과정을 거친다. 이 과정에서 가중치 행렬을 정확하게 찾아낼 수 있다면 좋겠지만 찾아내는 과정 또한 연산량에 포함된다. 그러므로 <code>r</code> 파라미터로 가중치 행렬이 있을만한 ’적당히 작은 랭크의 행렬’으로 정하고 근사화한다. (LoR<strong>A</strong>)</p></li>
</ul>
<section id="implementation" class="level4">
<h4 class="anchored" data-anchor-id="implementation">Implementation</h4>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> peft <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PeftModel</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> peft <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LoraConfig, get_peft_model, prepare_model_for_int8_training, set_peft_model_state_dict</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb1-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bigcode/starcoder"</span>,</span>
<span id="cb1-7">        use_auth_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-8">        device_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>: Accelerator().process_index},</span>
<span id="cb1-9">    )</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lora hyperparameters</span></span>
<span id="cb1-13">lora_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoraConfig(r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,target_modules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_proj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_attn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q_attn"</span>])</span>
<span id="cb1-14"></span>
<span id="cb1-15"></span>
<span id="cb1-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_peft_model(model, lora_config)</span>
<span id="cb1-17">training_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainingArguments(</span>
<span id="cb1-18">    ...</span>
<span id="cb1-19">)</span>
<span id="cb1-20"></span>
<span id="cb1-21">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Trainer(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>training_args, </span>
<span id="cb1-22">                  train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_data, eval_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_data)</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training..."</span>)</span>
<span id="cb1-25">trainer.train()</span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plugging the adapter into basemodel back</span></span>
<span id="cb1-28">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PeftModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bigcode/starcoder"</span>, peft_model_path)</span>
<span id="cb1-29"></span></code></pre></div>
</section>
<section id="reference" class="level4">
<h4 class="anchored" data-anchor-id="reference">Reference</h4>
<ul>
<li>LoRA : <a href="https://medium.com/@Shrishml/lora-low-rank-adaptation-from-the-first-principle-7e1adec71541">https://medium.com/<span class="citation" data-cites="Shrishml/lora-low-rank-adaptation-from-the-first-principle-7e1adec71541">@Shrishml/lora-low-rank-adaptation-from-the-first-principle-7e1adec71541</span></a></li>
<li><a href="https://huggingface.co/blog/peft">https://huggingface.co/blog/peft</a></li>
</ul>


</section>
</section>

 ]]></description>
  <category>NLP</category>
  <category>LLM</category>
  <category>technique</category>
  <guid>https://dotpyo.github.io/archive/posts/NLP/LoRA.html</guid>
  <pubDate>Sun, 15 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>encoding</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/NLP/encoding.html</link>
  <description><![CDATA[ 





<p>encoding을 <code>왜</code> 할까? 컴퓨터가 자연어를 이해할 수 있을까? 아니다. 따라서 컴퓨터가 이해할 수 있도록, <em>단어 자체의 정보는 보존</em>한 채 자연어를 숫자로 바꾸는 방법이 encoding이다.<br>
그렇다면 <code>positional encoding</code>에서 보존하고자 하는 정보는 무엇일까? <em>자리</em>다. 자리가 왜 중요한가? 자리가 의미를 반영하는 경우가 있기 때문이다. 부정어구가 대표적이다. 아래 두 문장을 보면 알 수 있다. 부정어구 <em>안</em> 이 위치하는 곳에 따라 음식의 재료가 바뀐다.</p>
<pre><code>김밥에 오이가 안 들었고 샌드위치에 오이가 들었다.  
김밥에 오이가 들었고 샌드위치에 오이가 안 들었다.</code></pre>
<p>위치가 중요함을 알았으니 위치 정보를 컴퓨터가 이해할 수 있는 언어로 바뀐 단어에 주입하는 방법에 대해 알아보자.</p>
<section id="examples-pytorch" class="level1">
<h1>Examples: PyTorch</h1>
<section id="embedding" class="level2">
<h2 class="anchored" data-anchor-id="embedding">Embedding</h2>
<section id="docstring" class="level3">
<h3 class="anchored" data-anchor-id="docstring">Docstring</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Embedding(Module):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">r"""A simple lookup table that stores embeddings of a fixed dictionary and size.</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This module is often used to store word embeddings and retrieve them using indices.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The input to the module is a list of indices, and the output is the corresponding</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    word embeddings.</span></span></code></pre></div>
<p>pytorch의 모든 신경망은 <code>nn</code> 을 상속받음으로써 시작된다. <code>Module</code>은 <code>nn.Module</code>로 공식문서에서 별도로 import 했다. docstring에 의하면 본 모듈은 word embedding 또는 index들을 사용하여 word embedding을 검색하는데 사용된다. 이 모듈을 향한 <em>입력</em> 은 index들로 구성된 <em>list</em> 이고, 이 모듈의 결과값은 word embedding에 해당한다.</p>
</section>
<section id="arguments" class="level3">
<h3 class="anchored" data-anchor-id="arguments">Arguments</h3>
<blockquote class="blockquote">
<p>instance를 생성할 때 입력할 params</p>
</blockquote>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">    Args:</span>
<span id="cb3-2">        num_embeddings (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>): size of the dictionary of embeddings</span>
<span id="cb3-3">        embedding_dim (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>): the size of each embedding vector</span>
<span id="cb3-4">        padding_idx (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, optional): If specified, the entries at :attr:`padding_idx` do <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> contribute to the gradient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5">                                     therefore, the embedding vector at :attr:`padding_idx` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> updated during training,</span>
<span id="cb3-6">                                     i.e. it remains <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> a fixed <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pad"</span>. For a newly constructed Embedding,</span>
<span id="cb3-7">                                     the embedding vector at :attr:`padding_idx` will default to <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> zeros,</span>
<span id="cb3-8">                                     but can be updated to another value to be used <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> the padding vector.</span>
<span id="cb3-9">        max_norm (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, optional): If given, each embedding vector <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> norm larger than :attr:`max_norm`</span>
<span id="cb3-10">                                    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> renormalized to have norm :attr:`max_norm`.</span>
<span id="cb3-11">        norm_type (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, optional): The p of the p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>norm to compute <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> the :attr:`max_norm` option. Default ``<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>``.</span>
<span id="cb3-12">        scale_grad_by_freq (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>, optional): If given, this will scale gradients by the inverse of frequency of</span>
<span id="cb3-13">                                                the words <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> the mini<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>batch. Default ``False``.</span>
<span id="cb3-14">        sparse (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>, optional): If ``True``, gradient w.r.t. :attr:`weight` matrix will be a sparse tensor.</span>
<span id="cb3-15">                                 See Notes <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> more details regarding sparse gradients.</span></code></pre></div>
<ul>
<li>num_embeddings : int 값으로, embedding 될 단어쌍 (dictionary) 의 최대 값을 말한다.</li>
<li>embedding_dim : int 값으로, 각 embedding 벡터의 길이를 말한다.</li>
</ul>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
왜 num_embeddings 에는 임베딩 될 값의 크기보다 더 큰 값을 넣어야 하는가?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>instance인 <code>embedding</code> 을 어떻게 쓸 지 생각해보면 좋다. 우리는 <em>어떤 값</em>을 숫자로 표현할 것이고 input 값에 9가 들어가든 len(‘가나다라마바사’) 가 들어가든 아무런 상관이 없다. 단지 숫자로 변환 할 때 모듈이 nn.Embedding 이고 instance를 생성할 때 미리 parameter를 준비해 놔야 하는 점만 중요하게 여기면 된다.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'가나다라마바사'</span>)]])</span>
<span id="cb4-2">embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4">embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor([ 0.2074,  0.0673, -0.1462], grad_fn=&lt;EmbeddingBackward0&gt;)</span></span></code></pre></div>
<p>nn.Embedding 을 통해 인스턴스를 생성할 때 <code>(num_embeddings * embedding_eim)</code> 모양의 파라미터가 생긴다. <code>embedding(input)</code> 을 통해 input 값을 임베딩 하면 미리 만들어둔 파라미터에 임베딩 된 값이 걸리게 되는 셈이다.</p>
<ul>
<li>reference
<ul>
<li><a href="https://discuss.pytorch.kr/t/embedding/942">https://discuss.pytorch.kr/t/embedding/942</a></li>
</ul></li>
</ul>
</div>
</div>
</div>
</section>
<section id="attributes" class="level3">
<h3 class="anchored" data-anchor-id="attributes">Attributes</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">    Attributes:</span>
<span id="cb5-2">        weight (Tensor): the learnable weights of the module of shape (num_embeddings, embedding_dim)</span>
<span id="cb5-3">                         initialized <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> :math:`\mathcal{N}(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)`</span></code></pre></div>
<p>이전에 instance를 생성할 때 num_embeddings, embedding_dim 을 할당하면 그 형태의 파라미터가 생성된다고 적은 바 있다. 이 형태에 따라 랜덤하게 가중치를 할당하는 역할을 한다. 최초에는 0부터 1 사이의 값으로 할당되며 <em>이 Tensor는 직접적으로 학습</em>되는 값이다.</p>
</section>
<section id="shape" class="level3">
<h3 class="anchored" data-anchor-id="shape">Shape</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">    Shape:</span>
<span id="cb6-2">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Input: :math:`(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)`, IntTensor <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> LongTensor of arbitrary shape containing the indices to extract</span>
<span id="cb6-3">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Output: :math:`(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, H)`, where `<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> the <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> :math:`H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>\text{embedding\_dim}`</span>
<span id="cb6-4"></span>
<span id="cb6-5">    .. note::</span>
<span id="cb6-6">        Keep <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mind that only a limited number of optimizers support</span>
<span id="cb6-7">        sparse gradients: currently it<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s :class:`optim.SGD` (`CUDA` and `CPU`),</span></span>
<span id="cb6-8"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">        :class:`optim.SparseAdam` </span>(`CUDA` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> `CPU`) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> :<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span>:`optim.Adagrad` (`CPU`)</span>
<span id="cb6-9"></span>
<span id="cb6-10">    .. note::</span>
<span id="cb6-11">        When :attr:`max_norm` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> ``None``, :<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span>:`Embedding`<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s forward method will modify the</span></span>
<span id="cb6-12"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">        :attr:`weight` tensor in-place. Since tensors needed for gradient computations cannot be</span></span>
<span id="cb6-13">        modified <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>place, performing a differentiable operation on ``Embedding.weight`` before</span>
<span id="cb6-14">        calling :<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span>:`Embedding`<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s forward method requires cloning ``Embedding.weight`` when</span></span>
<span id="cb6-15"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">        :attr:`max_norm` is not ``None``. For example::</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">            n, d, m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb6-18">            embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(n, d, max_norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-19">            W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((m, d), requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-20">            idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb6-21">            a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embedding.weight.clone() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W.t()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weight must be cloned for this to be differentiable</span></span>
<span id="cb6-22">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embedding(idx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W.t()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modifies weight in-place</span></span>
<span id="cb6-23">            out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb6-24">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.sigmoid().prod()</span>
<span id="cb6-25">            loss.backward()</span></code></pre></div>
</section>
<section id="examples" class="level3">
<h3 class="anchored" data-anchor-id="examples">Examples</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">    Examples::</span>
<span id="cb7-2"></span>
<span id="cb7-3">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># an Embedding module containing 10 tensors of size 3</span></span>
<span id="cb7-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a batch of 2 samples of 4 indices each</span></span>
<span id="cb7-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]])</span>
<span id="cb7-7">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xdoctest: +IGNORE_WANT("non-deterministic")</span></span>
<span id="cb7-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb7-9">        tensor([[[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0251</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6902</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7172</span>],</span>
<span id="cb7-10">                 [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6431</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0748</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6969</span>],</span>
<span id="cb7-11">                 [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4970</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3448</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9685</span>],</span>
<span id="cb7-12">                 [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3677</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.7265</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1685</span>]],</span>
<span id="cb7-13"></span>
<span id="cb7-14">                [[ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4970</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3448</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9685</span>],</span>
<span id="cb7-15">                 [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4362</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4004</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9400</span>],</span>
<span id="cb7-16">                 [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6431</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0748</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6969</span>],</span>
<span id="cb7-17">                 [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9124</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.3616</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1151</span>]]])</span>
<span id="cb7-18"></span>
<span id="cb7-19"></span>
<span id="cb7-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># example with padding_idx</span></span>
<span id="cb7-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]])</span>
<span id="cb7-23">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> embedding(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb7-24">        tensor([[[ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000</span>],</span>
<span id="cb7-25">                 [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1535</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0309</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9315</span>],</span>
<span id="cb7-26">                 [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000</span>],</span>
<span id="cb7-27">                 [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1655</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9897</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0635</span>]]])</span>
<span id="cb7-28"></span>
<span id="cb7-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># example of changing `pad` vector</span></span>
<span id="cb7-30">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> padding_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>padding_idx)</span>
<span id="cb7-32">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> embedding.weight</span>
<span id="cb7-33">        Parameter containing:</span>
<span id="cb7-34">        tensor([[ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000</span>],</span>
<span id="cb7-35">                [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7895</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7089</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0364</span>],</span>
<span id="cb7-36">                [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6778</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5803</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2678</span>]], requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-37">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb7-38">        ...     embedding.weight[padding_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-39">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> embedding.weight</span>
<span id="cb7-40">        Parameter containing:</span>
<span id="cb7-41">        tensor([[ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0000</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0000</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0000</span>],</span>
<span id="cb7-42">                [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7895</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7089</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0364</span>],</span>
<span id="cb7-43">                [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6778</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5803</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2678</span>]], requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    __constants__ = ['num_embeddings', 'embedding_dim', 'padding_idx', 'max_norm',</span></span>
<span id="cb7-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                     'norm_type', 'scale_grad_by_freq', 'sparse']</span></span></code></pre></div>


</section>
</section>
</section>

 ]]></description>
  <category>NLP</category>
  <category>PyTorch</category>
  <guid>https://dotpyo.github.io/archive/posts/NLP/encoding.html</guid>
  <pubDate>Fri, 13 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>MMLAB</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/HAR/mmlab.html</link>
  <description><![CDATA[ 





<section id="mmcv-full-with-openmim" class="level3">
<h3 class="anchored" data-anchor-id="mmcv-full-with-openmim">MMCV-Full with openmim</h3>
<p>best practice를 따라 mim으로 mmcv-full을 설치함</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> openmim</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mim</span> install mmcv-full</span></code></pre></div>
</section>
<section id="mmpose-with-pip-for-third-party" class="level3">
<h3 class="anchored" data-anchor-id="mmpose-with-pip-for-third-party">MMPose with pip (for third party)</h3>
<blockquote class="blockquote">
<p><a href="https://mmpose.readthedocs.io/en/latest/install.html">Official Install Guide</a></p>
</blockquote>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pip을 사용해도 무관 (Case b)</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install mmpose</span></code></pre></div>
<section id="verify-the-installation-of-mmpose" class="level4">
<h4 class="anchored" data-anchor-id="verify-the-installation-of-mmpose">verify the installation of mmpose</h4>
<ol type="1">
<li><p>download config and checkpoint</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 본인이 원하는 폴더 생성</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> verify-mmpose<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> verify-mmpose   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># e.g.</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download</span></span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mim</span> download mmpose <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--config</span> associative_embedding_hrnet_w32_coco_512x512  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dest</span> .</span></code></pre></div></li>
<li><p>verify the inference demo</p>
<ul>
<li><p>pip을 이용해 third party 용 mmpose를 설치했으므로 demo용 python script 생성</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (optional) option (a)를 따라 /demo 폴더를 생성</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> demo<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> demo</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vi</span> bottom_up_img_demo.py    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># open vim</span></span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bottom_up_img_demo.py</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mmpose.apis <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (init_pose_model, inference_bottom_up_pose_model, vis_pose_result)</span>
<span id="cb5-3"></span>
<span id="cb5-4">config_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'associative_embedding_hrnet_w32_coco_512x512.py'</span></span>
<span id="cb5-5">checkpoint_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hrnet_w32_coco_512x512-bcb8c247_20200816.pth'</span></span>
<span id="cb5-6">pose_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_pose_model(config_file, checkpoint_file, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or device='cuda:0'</span></span>
<span id="cb5-7"></span>
<span id="cb5-8">image_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo/persons.jpg'</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test a single image</span></span>
<span id="cb5-10">pose_results, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inference_bottom_up_pose_model(pose_model, image_name)</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show the results</span></span>
<span id="cb5-13">vis_pose_result(pose_model, image_name, pose_results, out_file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo/vis_persons.jpg'</span>)</span></code></pre></div></li>
</ul></li>
<li><p>download image for test</p>
<ul>
<li>스크립트를 수정하지 않았다면 <code>verify-mmpose/demo/</code> 안에 사람이 포함된 <code>persons.jpg</code> 를 추가</li>
</ul></li>
<li><p>run script</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pwd</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /home/devin/env/verify-mmpose</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> demo/bottom_up_img_demo.py</span></code></pre></div></li>
<li><p>결과</p></li>
</ol>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209774260-15c23c02-9625-41d8-8e86-34fc6ac6c7f2.jpg" class="img-fluid" alt="demo original image"></th>
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209774252-173dbaf3-3b57-4449-a07b-9208d80447bb.jpg" class="img-fluid" alt="demo result image"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">persons.jpg(input)</td>
<td style="text-align: center;">vis_persons.jpg(result)</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> verify-mmpose</span>
<span id="cb7-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> associative_embedding_hrnet_w32_coco_512x512.py <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># config</span></span>
<span id="cb7-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> demo</span>
<span id="cb7-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── bottom_up_img_demo.py</span>
<span id="cb7-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── persons.jpg</span>
<span id="cb7-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── vis_persons.jpg</span>
<span id="cb7-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> hrnet_w32_coco_512x512-bcb8c247_20200816.pth</span></code></pre></div>
</section>
<section id="issue-updated-2022.12.28" class="level4">
<h4 class="anchored" data-anchor-id="issue-updated-2022.12.28">Issue (updated 2022.12.28)</h4>
<section id="alias-expired-over-ver-1.24-numpy-has-no-attribute-int" class="level5">
<h5 class="anchored" data-anchor-id="alias-expired-over-ver-1.24-numpy-has-no-attribute-int">[alias expired over ver 1.24] ‘numpy’ has no attribute ‘int’</h5>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ERROR LOG</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Traceback</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">most</span> recent call last<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span>   File <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;stdin&gt;"</span>, line 1, in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>module<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>   File <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/ubuntu/.local/lib/python3.8/site-packages/numpy/__init__.py"</span>, line 284, in __getattr__</span>
<span id="cb8-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">raise</span> AttributeError<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module {!r} has no attribute "</span> AttributeError: module <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'numpy'</span> has no attribute <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int'</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Environment</span></span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">OS</span> Release              Ubuntu 20.04.4 LTS</span>
<span id="cb8-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mmcv-full</span>               1.7.0</span>
<span id="cb8-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mmpose</span>                  0.29.0</span>
<span id="cb8-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">numpy</span>                   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>=1.19.5</span></code></pre></div>
<p>최신버전으로 numpy를 설치했는데 demo를 실행하는 과정에서 <code>'numpy' has no attribute 'int'</code> 에러가 발생했다. 공식문서에서 추가하라고 지시한 코드에는 numpy가 없었고, 로그를 살펴보니 이미지의 크기를 정하는 과정에서 int type이 필요했다. 실행한 데모는 bottom_up_transform 이었지만 np.int가 사용된 내역을 살펴보면 bottom_up 뿐 아니라 gesture에서도 사용되는 것 같았다.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ./datasets/pipelines/gesture_transform.py</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ./datasets/pipelines/bottom_up_transform.py</span></span>
<span id="cb9-3"></span>
<span id="cb9-4">input_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([input_size, input_size], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span></code></pre></div>
<p><a href="https://stackoverflow.com/questions/74844262/how-to-solve-error-numpy-has-no-attribute-float-in-python">stackoverflow</a> 에 의하면 numpy1.20 부터 np.float 또는 np.int의 alias사용이 중단 되었다. np.int_ 로 대체하거나 int로 변환하라는 권고가 나왔는데, 소스코드를 전부 수정할 수 없는 상황이므로 requirements 에 따라 1.19 로 downgrade 하면 해결된다.</p>
<ul>
<li><p>NumPy requirements of mmpose: <code>numpy&gt;=1.19.5</code></p></li>
<li><p><a href="https://numpy.org/doc/stable/release/1.20.0-notes.html#deprecations">numpy 1.20 relesas note</a> &gt; For np.int a direct replacement with np.int_ or int is also good and will not change behavior, but the precision will continue to depend on the computer and operating system. If you want to be more explicit and review the current use, you have the following alternatives:</p></li>
<li><p><a href="https://numpy.org/doc/stable/release/1.24.0-notes.html#expired-deprecations">numpy 1.24 relesas note</a> &gt; The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.</p></li>
</ul>
</section>
</section>
</section>
<section id="mmdetection" class="level3">
<h3 class="anchored" data-anchor-id="mmdetection">MMDetection</h3>
<blockquote class="blockquote">
<p><a href="https://github.com/open-mmlab/mmdetection/blob/master/docs/en/get_started.md/#Installation">Official Install Guide</a></p>
</blockquote>
<ol type="1">
<li>마찬가지로 mim을 통해 mmcv-full을 설치한다.</li>
</ol>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> openmim</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mim</span> install mmcv-full</span></code></pre></div>
<ol start="2" type="1">
<li>pip으로 mmdet을 설치한다.</li>
</ol>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install mmdet</span></code></pre></div>
<section id="verify-installation-mmdet" class="level4">
<h4 class="anchored" data-anchor-id="verify-installation-mmdet">Verify installation MMdet</h4>
<ol type="1">
<li><p>download config and checkpoint</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 본인이 원하는 폴더 생성</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> verify-mmdet<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> verify-mmdet   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># e.g.</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download</span></span>
<span id="cb12-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mim</span> download mmdet <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--config</span> yolov3_mobilenetv2_320_300e_coco <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dest</span> .</span></code></pre></div></li>
<li><p>verify the inference demo</p>
<ul>
<li><p>pip을 이용해 third party 용 mmdet를 설치했으므로 demo용 python script 생성</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (optional) option (a)를 따라 /demo 폴더를 생성</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> demo<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> demo</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vi</span> img_demo.py    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># open vim</span></span></code></pre></div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># img_demo.py</span></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mmdet.apis <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> init_detector, inference_detector</span>
<span id="cb14-3">config_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yolov3_mobilenetv2_320_300e_coco.py'</span></span>
<span id="cb14-4">checkpoint_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yolov3_mobilenetv2_320_300e_coco_20210719_215349-d18dff72.pth'</span></span>
<span id="cb14-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_detector(config_file, checkpoint_file, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or device='cuda:0'</span></span></code></pre></div>
<p>여기까지가 공식문서의 demo script인데 이렇게 되면 inference_detector된 결과가 CLI환경에 출력되지 않는다. <a href="https://greeksharifa.github.io/references/2021/08/30/MMDetection/#high-level-apis-for-inference">https://greeksharifa.github.io/references/2021/08/30/MMDetection/#high-level-apis-for-inference</a> 위 포스트를 참고하면 결과 이미지를 확인할 수 있다.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource py number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo/demo.jpg'</span></span>
<span id="cb15-2">inference_detector(model, img)</span>
<span id="cb15-3"></span>
<span id="cb15-4">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inference_detector(model, img)</span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize the results in a new window</span></span>
<span id="cb15-6">model.show_result(img, result)</span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or save the visualization results to image files</span></span>
<span id="cb15-8">model.show_result(img, result, out_file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo/demo_result.jpg'</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test a video and show the results</span></span>
<span id="cb15-11">video <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mmcv.VideoReader(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo/demo.mp4'</span>)</span>
<span id="cb15-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> frame <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> video:</span>
<span id="cb15-13">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inference_detector(model, frame)</span>
<span id="cb15-14">    model.show_result(frame, result, wait_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div></li>
</ul></li>
<li><p>prepare for demo</p>
<ul>
<li>mmpose와는 다르게 mmdet에는 demo용 이미지와 동영상이 있으므로 그 파일을 사용하거나 다운로드한다.</li>
</ul>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pwd</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /home/devin/env/verify-mmdet</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://github.com/open-mmlab/mmdetection/blob/master/demo/demo.jpg ./demo/demo.jpg</span></code></pre></div></li>
<li><p>run script <code>bash     pwd # /home/devin/env/verify-mmdet     python3 demo/img_demo.py</code></p></li>
<li><p>결과</p></li>
</ol>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209777684-b90f1fe5-58f8-4bae-89a5-de1f796d5215.jpg" class="img-fluid" alt="demo"></th>
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209777703-9e673568-dbad-464a-90c7-39ea4a5e7462.jpg" class="img-fluid" alt="demo_result"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">demo.jpg (input)</td>
<td style="text-align: center;">demo_result.jpg (result)</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> verify-mmdet</span>
<span id="cb17-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> yolov3_mobilenetv2_320_300e_coco.py <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># config</span></span>
<span id="cb17-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> demo</span>
<span id="cb17-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── img_demo.py</span>
<span id="cb17-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> ├── demo.jpg</span>
<span id="cb17-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│&nbsp;&nbsp;</span> └── demo_result.jpg</span>
<span id="cb17-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> yolov3_mobilenetv2_320_300e_coco_20210719_215349-d18dff72.pth</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>Computer Vision</category>
  <guid>https://dotpyo.github.io/archive/posts/HAR/mmlab.html</guid>
  <pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>skeleton data plotting</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/HAR/ntu-skl-plotting.html</link>
  <description><![CDATA[ 





<div id="cell-1" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pwd</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd ntu_utils<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>parser_repo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> git remote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>v</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/home/devin/wdir/datasets/utils
mmskeleton  ntu_utils  plotting  plotting.ipynb  working.ipynb
conf.py  __pycache__  README.md  read_skeleton.py  utils.py
origin  https://github.com/Ugenteraan/NTU-RGB-Skeleton-Python.git (fetch)
origin  https://github.com/Ugenteraan/NTU-RGB-Skeleton-Python.git (push)</code></pre>
</div>
</div>
<div id="cell-2" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># basic tools</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List, Tuple</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># basic data handling tools</span></span>
<span id="cb3-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># image processing</span></span>
<span id="cb3-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cv2</span>
<span id="cb3-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> imageio</span>
<span id="cb3-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb3-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.image <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpimg</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Modules</span></span>
<span id="cb3-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ntu_utils.parser_repo.read_skeleton <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> read_skeleton</span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 원래 용법대로 사용하면 가져와서 쓸 수가 없어서 import 해서 쓸 수 있도록 변경</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !cd parser_repo; ls; python3 read_skeleton.py --skel="/home/devin/wdir/datasets/NTU_RGB+D/1_NTU-RGB+D/1_3DSkeletons/nturgb+d_skeletons/S001C001P001R001A001.skeleton" --save</span></span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">GLOBAL VARIABLE</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> args:</span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wdir/datasets/NTU_RGB+D/1_NTU-RGB+D/1_3DSkeletons/nturgb+d_skeletons/S001C001P001R001A001.skeleton</span></span>
<span id="cb4-9">    file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"S001C001P001R001A002"</span></span>
<span id="cb4-10">    skel_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"../NTU_RGB+D/1_NTU-RGB+D/1_3DSkeletons/nturgb+d_skeletons/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.skeleton"</span></span>
<span id="cb4-11">    skel_processed_sub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../processed/st-gcn-processed-data/NTU-RGB-D/xsub/train_data.npy"</span></span>
<span id="cb4-12">    skel_processed_view <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../processed/st-gcn-processed-data/NTU-RGB-D/xview/train_data.npy"</span></span>
<span id="cb4-13">    subject_ID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-14">    video <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-15">    save <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-16"></span>
<span id="cb4-17">SAMPLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_skeleton(args)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># args : class, global variable</span></span>
<span id="cb4-18">SAMPLE_NUMBER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(args.file_name.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-19"></span>
<span id="cb4-20">random_seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-21">random.seed(random_seed)</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># {color_name(str) : (color code B,G,R)}</span></span>
<span id="cb4-24">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span> : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,),</span>
<span id="cb4-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span> : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb4-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span> : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>),</span>
<span id="cb4-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span> : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>),</span>
<span id="cb4-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span> : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,),</span>
<span id="cb4-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cyan'</span> : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>),</span>
<span id="cb4-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'magenta'</span> : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>),</span>
<span id="cb4-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span> :  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-33">    }</span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># {joint_name(str) : int}</span></span>
<span id="cb4-36">joint_annotations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base of spine"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"middle of spine"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb4-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neck"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb4-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"head"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb4-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left shoulder"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb4-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left elbow"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb4-43">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left wrist"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb4-44">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left hand"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb4-45">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right shoulder"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb4-46">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right elbow"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb4-47">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right wrist"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,</span>
<span id="cb4-48">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right hand"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb4-49">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left hip"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,</span>
<span id="cb4-50">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left knee"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb4-51">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left ankle"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb4-52">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left foot"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb4-53">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right hip"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>,</span>
<span id="cb4-54">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right knee"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,</span>
<span id="cb4-55">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right ankle"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>,</span>
<span id="cb4-56">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right foot"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb4-57">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spine"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,</span>
<span id="cb4-58">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tip of left hand"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>,</span>
<span id="cb4-59">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left thumb"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>,</span>
<span id="cb4-60">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tip of right hand"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>,</span>
<span id="cb4-61">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right thumb"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb4-62">}</span>
<span id="cb4-63"></span>
<span id="cb4-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># {int : labels(str)}</span></span>
<span id="cb4-65">ntu_label_annotations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-66">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>   :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drink water"</span>,</span>
<span id="cb4-67">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>   :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eat meal/snack"</span>,</span>
<span id="cb4-68">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>   :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brushing teeth"</span>,</span>
<span id="cb4-69">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>   :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brushing hair"</span>,</span>
<span id="cb4-70">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>   :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>,</span>
<span id="cb4-71">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>   :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pickup"</span>,</span>
<span id="cb4-72">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>   :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"throw"</span>,</span>
<span id="cb4-73">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>   :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sitting down"</span>,</span>
<span id="cb4-74">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>   :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"standing up (from sitting position)"</span>,</span>
<span id="cb4-75">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clapping"</span>,</span>
<span id="cb4-76">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reading"</span>,</span>
<span id="cb4-77">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"writing"</span>,</span>
<span id="cb4-78">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tear up paper"</span>,</span>
<span id="cb4-79">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wear jacket"</span>,</span>
<span id="cb4-80">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"take off jacket"</span>,</span>
<span id="cb4-81">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wear a shoe"</span>,</span>
<span id="cb4-82">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"take off a shoe"</span>,</span>
<span id="cb4-83">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wear on glasses"</span>,</span>
<span id="cb4-84">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"take off glasses"</span>,</span>
<span id="cb4-85">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"put on a hat/cap"</span>,</span>
<span id="cb4-86">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"take off a hat/cap"</span>,</span>
<span id="cb4-87">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cheer up"</span>,</span>
<span id="cb4-88">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hand waving"</span>,</span>
<span id="cb4-89">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kicking something"</span>,</span>
<span id="cb4-90">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reach into pocket"</span>,</span>
<span id="cb4-91">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hopping (one foot jumping)"</span>,</span>
<span id="cb4-92">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jump up"</span>,</span>
<span id="cb4-93">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"make a phone call/answer phone"</span>,</span>
<span id="cb4-94">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"playing with phone/tablet"</span>,</span>
<span id="cb4-95">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"typing on a keyboard"</span>,</span>
<span id="cb4-96">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pointing to something with finger"</span>,</span>
<span id="cb4-97">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"taking a selfie"</span>,</span>
<span id="cb4-98">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"check time (from watch)"</span>,</span>
<span id="cb4-99">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rub two hands together"</span>,</span>
<span id="cb4-100">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nod head/bow"</span>,</span>
<span id="cb4-101">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shake head"</span>,</span>
<span id="cb4-102">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wipe face"</span>,</span>
<span id="cb4-103">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"salute"</span>,</span>
<span id="cb4-104">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"put the palms together"</span>,</span>
<span id="cb4-105">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cross hands in front (say stop)"</span>,</span>
<span id="cb4-106">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sneeze/cough"</span>,</span>
<span id="cb4-107">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"staggering"</span>,</span>
<span id="cb4-108">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"falling"</span>,</span>
<span id="cb4-109">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"touch head (headache)"</span>,</span>
<span id="cb4-110">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"touch chest (stomachache/heart pain)"</span>,</span>
<span id="cb4-111">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"touch back (backache)"</span>,</span>
<span id="cb4-112">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"touch neck (neckache)"</span>,</span>
<span id="cb4-113">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nausea or vomiting condition"</span>,</span>
<span id="cb4-114">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use a fan (with hand or paper)/feeling warm"</span>,</span>
<span id="cb4-115">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"punching/slapping other person"</span>,</span>
<span id="cb4-116">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kicking other person"</span>,</span>
<span id="cb4-117">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pushing other person"</span>,</span>
<span id="cb4-118">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pat on back of other person"</span>,</span>
<span id="cb4-119">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"point finger at the other person"</span>,</span>
<span id="cb4-120">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hugging other person"</span>,</span>
<span id="cb4-121">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"giving something to other person"</span>,</span>
<span id="cb4-122">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"touch other person's pocket"</span>,</span>
<span id="cb4-123">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"handshaking"</span>,</span>
<span id="cb4-124">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"walking towards each other"</span>,</span>
<span id="cb4-125">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"walking apart from each other"</span>,</span>
<span id="cb4-126">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span>  :  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"put on headphone"</span></span>
<span id="cb4-127">}</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sample Data has </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SAMPLE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>keys()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> keys"</span>)        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># frame이 각각 다른 것 같음 </span></span>
<span id="cb5-2">joint_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> SAMPLE[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(joint_number)].<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> SAMPLE[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(joint_number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)].<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>():</span>
<span id="cb5-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Each key has </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SAMPLE[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> values : joints"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sample Data has 158 keys
Each key has 25 values : joints</code></pre>
</div>
</div>
<div id="cell-5" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract_coordinates(data:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, target_joint:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, joint_annotations:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>joint_annotations):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args : </span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - data : dictionary type, skeleton extension raw NTU120 data</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - keys : total SAMPLE.keys().__len__() length, MUST be string   / length is not fixed</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - each key has 25 indexes which represents 25 joints</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - each key has 3 data which represents coordinate dimension: X, Y, (Z)</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - target_joint : configuration joint of ntu set (exact name)</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - joint_annotation : dictionary, match string 'target_joint' into its number</span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb7-11">    </span>
<span id="cb7-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Arguments</span></span>
<span id="cb7-13">    X, Y, Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-14">    dontknow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이중리스트임 [[값]]</span></span>
<span id="cb7-15">    start_frame, end_frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data.keys())</span>
<span id="cb7-16">    joint_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joint_annotations[target_joint] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0부터 시작하므로</span></span>
<span id="cb7-17"></span>
<span id="cb7-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print</span></span>
<span id="cb7-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb7-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_joint<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>)</span>
<span id="cb7-21"></span>
<span id="cb7-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> next_frame <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, end_frame, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb7-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"frame no. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>next_frame<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb7-24">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"X : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(start_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>next_frame)][dontknow][joint_number][X]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Y : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(start_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>next_frame)][dontknow][joint_number][Y]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Z : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(start_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>next_frame)][dontknow][joint_number][Z]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-27"></span>
<span id="cb7-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test</span></span>
<span id="cb7-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> joint <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base of spine'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'middle of spine'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'head'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right foot'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left foot'</span>]:</span>
<span id="cb7-30">    extract_coordinates(SAMPLE, joint)</span>
<span id="cb7-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================================================
[base of spine]
frame no. 1  X : 1047.710   Y : 513.642 Z : -0.191
frame no. 11     X : 1048.290   Y : 513.821 Z : -0.183
frame no. 21     X : 1048.281   Y : 511.923 Z : -0.216
frame no. 31     X : 1049.081   Y : 509.494 Z : -0.219
frame no. 41     X : 1048.423   Y : 512.998 Z : -0.216
frame no. 51     X : 1048.136   Y : 513.229 Z : -0.224
frame no. 61     X : 1048.910   Y : 511.708 Z : -0.197
frame no. 71     X : 1049.379   Y : 512.329 Z : -0.202
frame no. 81     X : 1049.375   Y : 512.324 Z : -0.237
frame no. 91     X : 1049.288   Y : 511.088 Z : -0.226
frame no. 101    X : 1048.591   Y : 510.243 Z : -0.277
frame no. 111    X : 1048.618   Y : 510.258 Z : -0.298
frame no. 121    X : 1048.800   Y : 510.808 Z : -0.230
frame no. 131    X : 1048.711   Y : 511.964 Z : -0.236
frame no. 141    X : 1049.196   Y : 511.940 Z : -0.268
frame no. 151    X : 1050.422   Y : 511.508 Z : -0.296</code></pre>
</div>
</div>
<div id="cell-6" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_label(sample_number:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SAMPLE_NUMBER, ntu_label_annotations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ntu_label_annotations) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - label: ntu_train_label, (0~59까지의 값:int, skeleton_file_name)</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # Note: actions labelled from A1 to A60 are contained in "NTU RGB+D" (https://rose1.ntu.edu.sg/dataset/actionRecognition/)</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb9-8">    label_name:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ntu_label_annotations[SAMPLE_NUMBER]</span>
<span id="cb9-9">    label_name_no_blank:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_name.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb9-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> label_name_no_blank</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test </span></span>
<span id="cb9-13">check_label(sample_number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SAMPLE_NUMBER)   </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>'eat_meal_snack'</code></pre>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PARAMS</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target_joints = ['base of spine', 'middle of spine', 'spine', 'head','right elbow', 'left elbow', 'tip of left hand', 'tip of right hand','right foot', 'left foot']     # temp selection</span></span>
<span id="cb11-3">target_joints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base of spine'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'middle of spine'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'neck'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'head'</span>, </span>
<span id="cb11-4">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left shoulder'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left elbow'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left wrist'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left hand'</span>, </span>
<span id="cb11-5">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right shoulder'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right elbow'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right wrist'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right hand'</span>, </span>
<span id="cb11-6">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left hip'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left knee'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left ankle'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left foot'</span>, </span>
<span id="cb11-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right hip'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right knee'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right ankle'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right foot'</span>, </span>
<span id="cb11-8">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spine'</span>,</span>
<span id="cb11-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tip of left hand'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left thumb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tip of right hand'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right thumb'</span>]     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># full joints (total 25)</span></span>
<span id="cb11-10">start_frame, dontknow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-11">X, Y, Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb11-12"></span>
<span id="cb11-13">joint_numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [joint_annotations[target_joint] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> target_joint <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_joints]</span>
<span id="cb11-14">Xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [SAMPLE[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(start_frame)][dontknow][joint_number][X] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> joint_number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> joint_numbers]</span>
<span id="cb11-15">Ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [SAMPLE[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(start_frame)][dontknow][joint_number][Y] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> joint_number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> joint_numbers]</span>
<span id="cb11-16">Zs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [SAMPLE[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(start_frame)][dontknow][joint_number][Z] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> joint_number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> joint_numbers]</span></code></pre></div>
</div>
<div id="cell-8" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Canvas (CV2) initial setting</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># canvas : [ref](https://bkshin.tistory.com/entry/OpenCV-5-%EC%B0%BD-%EA%B4%80%EB%A6%AC-%EB%B0%8F-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC)</span></span>
<span id="cb12-3">canvas_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1080</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1920</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 임의 지정 가능, video 가 1920 * 1080 이므로 그 기준으로 설정</span></span>
<span id="cb12-4">cation_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ref: 3.1.2, 82 daily actions, 12 health-related actions, 26 mutual actions</span></span>
<span id="cb12-5">subjects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">106</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ref: 3.1.3 106 distinct subject</span></span>
<span id="cb12-6"></span>
<span id="cb12-7">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((canvas_shape), np.uint8)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uint : 부호 없는 정수 or 0을 포함하는 양수로 uint 또는 int 뒤에 오는 숫자는 bit의 개수를 의미한다. (uint8 : 2^8개의 정수 표현 가능, 0~255)</span></span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># '''</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'base of spine', 'middle of spine', 'spine', 'head',</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'right elbow', 'left elbow', 'tip of left hand', 'tip of right hand',</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'right foot', 'left foot'</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># '''</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># base_of_spine     = (int(Xs[0]), int(Ys[0]))  # green</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># middle_of_spine   = (int(Xs[1]), int(Ys[1]))  # blue</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># spine             = (int(Xs[2]), int(Ys[2]))  # green</span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head              = (int(Xs[3]), int(Ys[3]))  # red</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right_elbow       = (int(Xs[4]), int(Ys[4]))  # yellow</span></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># left_elbow        = (int(Xs[5]), int(Ys[5]))  # yellow</span></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tip_of_left_hand  = (int(Xs[6]), int(Ys[6]))  # magenta</span></span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tip_of_right_hand = (int(Xs[7]), int(Ys[7]))  # magenta</span></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right_foot        = (int(Xs[8]), int(Ys[8]))  # cyan</span></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># left_foot         = (int(Xs[9]), int(Ys[9]))  # cyan</span></span></code></pre></div>
</div>
<div id="cell-10" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw line (temp selection / for 10 joints)</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_line_10(img, Xs, Ys):</span>
<span id="cb14-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Params</span></span>
<span id="cb14-4">    base_of_spine     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># green</span></span>
<span id="cb14-5">    middle_of_spine   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># blue</span></span>
<span id="cb14-6">    spine             <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># green</span></span>
<span id="cb14-7">    head              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># red</span></span>
<span id="cb14-8">    right_elbow       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># yellow</span></span>
<span id="cb14-9">    left_elbow        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># yellow</span></span>
<span id="cb14-10">    tip_of_left_hand  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># magenta</span></span>
<span id="cb14-11">    tip_of_right_hand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># magenta</span></span>
<span id="cb14-12">    right_foot        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cyan</span></span>
<span id="cb14-13">    left_foot         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cyan</span></span>
<span id="cb14-14">    </span>
<span id="cb14-15">    </span>
<span id="cb14-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## line</span></span>
<span id="cb14-17">    custom_thick <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb14-18"></span>
<span id="cb14-19">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>base_of_spine,    pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>middle_of_spine,    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>],      thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)  </span>
<span id="cb14-20">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>middle_of_spine,  pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>spine,              color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>],       thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)  </span>
<span id="cb14-21">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>spine,            pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>head,               color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>],        thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)  </span>
<span id="cb14-22">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>spine,            pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>right_elbow,        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cyan'</span>],       thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)  </span>
<span id="cb14-23">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>spine,            pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>left_elbow,         color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cyan'</span>],       thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)  </span>
<span id="cb14-24">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>right_elbow,      pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tip_of_right_hand,  color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span>],     thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)  </span>
<span id="cb14-25">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>left_elbow,       pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tip_of_left_hand,   color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span>],     thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)  </span>
<span id="cb14-26">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>base_of_spine,    pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>left_foot,          color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'magenta'</span>],    thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)  </span>
<span id="cb14-27">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>base_of_spine,    pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>right_foot,         color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'magenta'</span>],    thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)  </span>
<span id="cb14-28"></span>
<span id="cb14-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw line (full joints: 25)</span></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_line(img, Xs, Ys):</span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Args</span></span>
<span id="cb15-5">    connects:List[Tuple[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-6">                                (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>),<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-7">                                (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>),<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-8">                                (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-9">                                (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 논문 기준 (1 ~ 25)</span></span>
<span id="cb15-10">    </span>
<span id="cb15-11">    rgbcodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>], colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>], colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>], colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cyan'</span>], colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span>], colors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'magenta'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb15-12">    custom_thick <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb15-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, (idx1, idx2) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(connects):</span>
<span id="cb15-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># args</span></span>
<span id="cb15-15">        former:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[idx1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[idx1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list index에 맞게 idx1 -1</span></span>
<span id="cb15-16">        latter:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Xs[idx2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Ys[idx2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list index에 맞게 idx2 -1</span></span>
<span id="cb15-17">        </span>
<span id="cb15-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw</span></span>
<span id="cb15-19">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.line(img, pt1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>former, pt2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latter, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rgbcodes[i], thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_thick)</span>
<span id="cb15-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb15-21"></span>
<span id="cb15-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw_line(img, Xs, Ys)</span></span></code></pre></div>
</div>
<div id="cell-13" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Local Environment ##</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to prevent kernel crash</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cv2.imshow('plotting canvas', img)      # plotting canvas 창에 이미지 표시</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cv2.waitKey(0)                          # 아무 키나 누르면</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cv2.destroyAllWindows()                 # 모든 창 닫기</span></span></code></pre></div>
</div>
<div id="cell-14" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GIF으로 만들 이미지 저장</span></span>
<span id="cb17-2">PATH_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./plotting/images/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>file_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span></span>
<span id="cb17-3">PATH_gifs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./plotting/gifs/"</span></span>
<span id="cb17-4"></span>
<span id="cb17-5">os.makedirs(PATH_images, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-6">os.makedirs(PATH_gifs, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프레임 생성</span></span>
<span id="cb17-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> next_frame <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, SAMPLE.keys().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>()):</span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [</span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] Global Var</span></span>
<span id="cb17-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start frame = 1, dontknow = 0</span></span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target_joints = ['base of spine', 'middle of spine', 'spine', 'head','right elbow', 'left elbow', 'tip of left hand', 'tip of right hand','right foot', 'left foot']     # temp selection</span></span>
<span id="cb17-13">    </span>
<span id="cb17-14">    Xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [SAMPLE[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(start_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>next_frame)][dontknow][joint_number][X] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> joint_number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> joint_numbers] </span>
<span id="cb17-15">    Ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [SAMPLE[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(start_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>next_frame)][dontknow][joint_number][Y] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> joint_number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> joint_numbers]</span>
<span id="cb17-16">    Zs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [SAMPLE[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(start_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>next_frame)][dontknow][joint_number][Z] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> joint_number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> joint_numbers]</span>
<span id="cb17-17">    </span>
<span id="cb17-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw line</span></span>
<span id="cb17-19">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((canvas_shape), np.uint8)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 매번 초기화</span></span>
<span id="cb17-20">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_line(img, Xs, Ys)</span>
<span id="cb17-21">    rgb_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.cvtColor(result, cv2.COLOR_BGR2RGB)</span>
<span id="cb17-22"></span>
<span id="cb17-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb17-24">        cv2.imwrite(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PATH_images<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>next_frame<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.jpg'</span>, result)</span>
<span id="cb17-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PATH_images<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(PATH_images)]</span>
<span id="cb18-2">paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> path]</span>
<span id="cb18-3"></span>
<span id="cb18-4">imageio.mimsave(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PATH_gifs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>file_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>check_label(sample_number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SAMPLE_NUMBER)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Xs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.gif'</span>, paths, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<section id="ntu-rgbd" class="level3">
<h3 class="anchored" data-anchor-id="ntu-rgbd">NTU RGB+D</h3>
<table class="table">
<colgroup>
<col style="width: 47%">
<col style="width: 52%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">임의의 joint 10개 추출</th>
<th style="text-align: center;">25개 joint 전부 Plotting</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">S001C001P001R001A001</td>
<td style="text-align: center;">drink water</td>
</tr>
<tr class="even">
<td style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209933584-6097f7b1-019b-4048-8307-7a2fc20430a8.gif" class="img-fluid" alt="S001C001P001R001A001_drink_water"></td>
<td style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209933606-b68bb516-8085-4b70-be0e-74e8de97ab8a.gif" class="img-fluid" alt="S001C001P001R001A001_drink_water_25"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">S001C001P001R001A002</td>
<td style="text-align: center;">eat_meal/snack</td>
</tr>
<tr class="even">
<td style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209933618-b906ff57-46b9-4434-b3e0-de424a059443.gif" class="img-fluid" alt="S001C001P001R001A002_eat_meal_snack"></td>
<td style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209933612-6d9b6d29-aacf-4cd8-9152-f274f1a96a15.gif" class="img-fluid" alt="S001C001P001R001A002_eat_meal_snack_25"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">S001C001P001R001A003</td>
<td style="text-align: center;">brushing_teeth</td>
</tr>
<tr class="even">
<td style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209933626-680cc642-a086-46d0-8daf-d3db84461ac3.gif" class="img-fluid" alt="S001C001P001R001A003_brushing_teeth"></td>
<td style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209933622-5522f337-efc1-405b-abc8-b522669d4aa4.gif" class="img-fluid" alt="S001C001P001R001A003_brushing_teeth_25"></td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>HAR</category>
  <category>dataset</category>
  <guid>https://dotpyo.github.io/archive/posts/HAR/ntu-skl-plotting.html</guid>
  <pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Modalities</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/HAR/modalities.html</link>
  <description><![CDATA[ 





<section id="focused-and-reviewed" class="level4">
<h4 class="anchored" data-anchor-id="focused-and-reviewed">focused and reviewed</h4>
<ol type="1">
<li>mainstream deep learning architectures
<ul>
<li>single modalities</li>
<li>multiple modalities for enhanced HAR</li>
</ul></li>
<li>DATA : short trimmed video segments
<ul>
<li>one, only action instance</li>
</ul></li>
<li>Benchmark Datasets</li>
</ol>
</section>
<section id="contribution-follows" class="level4">
<h4 class="anchored" data-anchor-id="contribution-follows">Contribution follows</h4>
<ol type="1">
<li>various data modalities</li>
<li>multi-modality based HAR
<ul>
<li>approach 1: fusion based</li>
<li>approach 2: cross modality co-learning-based</li>
</ul></li>
<li>recent, advanced methods: SOTA approaches</li>
<li>comprehensive comparison of existing method</li>
</ol>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">1. introduction</h2>
<blockquote class="blockquote">
<p>다양한 data modalities들의 장점, 한계를 및 modality간의 연구 흐름 파악</p>
</blockquote>
<p>기술의 발전과 방법론의 창안은 선행 연구의 한계와 발전 가능성에 기초하므로 기술 발전의 흐름과 맥락을 숙지하는 과정은 중요하다. 본 논문은 2022 IEEE에 발표된 Review 논문으로 다양한 인간 행동 표현형을 인식하는 HAR 연구의 최신 흐름을 기술하고 있다. 개요에 따르면 인간 행동은 다양한 데이터 양식으로 표현될 수 있다. 데이터 양식은 크게 가시성 <code>visibility</code> 에 따라 <code>visual modalities</code>, <code>non-visual modalities</code> 로 나뉜다.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">visual modalities</th>
<th style="text-align: center;">non-visual modalities</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">RGB</td>
<td style="text-align: center;">audio</td>
</tr>
<tr class="even">
<td style="text-align: center;">Skeleton</td>
<td style="text-align: center;">acceleration</td>
</tr>
<tr class="odd">
<td style="text-align: center;">depth</td>
<td style="text-align: center;">radar</td>
</tr>
<tr class="even">
<td style="text-align: center;">infrared</td>
<td style="text-align: center;">wifi signal</td>
</tr>
<tr class="odd">
<td style="text-align: center;">point cloud <img src="https://latex.codecogs.com/png.latex?%5E%7B1%7D"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">event stream</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<ul>
<li>point cloud <img src="https://latex.codecogs.com/png.latex?%5E%7B1%7D"> 3차원 공간상에 퍼져 있는 여러 포인트(Point)의 집합(set cloud)으로 Lidar 센서와 RGB-D 센서로 수집된 데이터다.</li>
</ul>
<section id="visual-modalities" class="level3">
<h3 class="anchored" data-anchor-id="visual-modalities">1.1 visual modalities</h3>
<p>일반적으로는 visual modalities가 HAR 발전에 큰 영향을 미쳐왔다. HAR의 많은 발전이 RGB Video 또는 images를 기반으로 이루어졌음을 보면 알 수 있다. <code>RGB data</code>는 관측 (surveillance) 또는 추적 (monitoring) 시스템에서 보편적으로 사용되어왔다. RGB 는 기본적으로 세 채널을 가진 ’이미지(들)’이기 때문에 큰 computing resource 를 필요로 하는데 이를 보완하기 위해 사용된 데이터가 <code>skeleton</code> 이다. skeleton data는 인간 관절의 움직임 (trajectory of human body joints) 을 encoding한 데이터로 간명하고 효과적이다. 그러나 물체가 포함되어있거나 장면간 맥락을 고려해야 하는 경우 skeleton data 만으로는 정보를 충분히 얻을 수 없는데 이 때 <code>point cloud</code> 와 <code>depth data</code>를 사용한다. 또한, ’본다’는 행위는 근본적으로 빛에 의존하는데 이 한계를 극복하기 위해 <code>infrared data</code>를 사용하며 <code>event stream</code> 은 움직였을 때를 감지하는 동작 중심 modality다.</p>
<blockquote class="blockquote">
<p>정보를 얻고, insight 또는 활용 가능한 부분만 추려내어 새로운 방법론을 창안하고, 기술이 최적화 되었을 때 더 필요한 정보를 얻기 위해 또 다른 modality를 사용하며 다시 불필요한 부분을 제거하는 방식으로 기술이 발전되어왔다.</p>
</blockquote>
<ol type="1">
<li>가시영역에서 얻을 수 있는 정보를 얻거나 : RGB</li>
<li>인간이 눈으로 보고 이해하는 정보에 <strong>집중</strong>하여 인간 신체에서 이른바 ROI를 추출해내는 방법을 적용한다: skeleton</li>
<li>사람과 환경의 상호작용 또는 시공간적 맥락을 고려하기 위해 3D 구조에서 주요한 정보를 추출하는 작업을 거친다: point cloud, depth data</li>
<li>시각에 의존하지 않고 나아가 비가시영역인 적외선 영역에서 정보를 얻음으로써 <strong>빛에 의존해야 한다는</strong> visual modalities의 태생적 한계를 극복한다: infrared data</li>
<li>불필요한 중복, 또는 정보를 제거하여 HAR에 적합한 데이터를 구축한다: event stream</li>
</ol>
</section>
<section id="non-visual-modalities" class="level3">
<h3 class="anchored" data-anchor-id="non-visual-modalities">1.2 non-visual modalities</h3>
<p>눈으로 봤을 때 직관적이지 않지만 사람들의 행동을 표현하는 또 다른 방식이다. 직관적이지 않음에도 사용될 수 있는 이유는 특정 상황에서 대상의 <strong>개인정보 보호</strong>가 필요할 때다. <code>audio</code> 는 시간에 따른 상황 (temporal sequence) 에서 움직임을 인지하기에 적절하며, <code>acceleration</code> 는 fine-grained HAR에 사용된다. <img src="https://latex.codecogs.com/png.latex?%5E2"> 또한 <code>radar</code>는 물체 뒤의 움직임도 포착할 수 있다.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5E2"> fine-grained HAR : 세분화된 HAR. acceleration data가 이에 사용된다는 내용은 영상의 움직임에서 가속도를 알아내는 방향의 연구를 말하는 것으로 보인다. (<a href="https://arxiv.org/abs/2211.01342">관련 논문</a>)</p>
</section>
<section id="usage-of-modalities-single-vs-multi" class="level3">
<h3 class="anchored" data-anchor-id="usage-of-modalities-single-vs-multi">1.3 Usage of modalities (single vs multi)</h3>
<section id="single-modality-and-effect-of-their-fusion" class="level4">
<h4 class="anchored" data-anchor-id="single-modality-and-effect-of-their-fusion">single modality and effect of their fusion</h4>
<p>살펴본 바와 같이, 각 modality는 서로 다른 강점과 한계를 가지고 있으므로 여러 양식의 데이터들을 합치거나(<code>fusion</code>), 데이터 양식간 ‘transfer of knowledge’<img src="https://latex.codecogs.com/png.latex?%5E3"> 를 진행하여 정확도와 강건함을 높인다.<br>
나아가 fusion은, 서로 다른 두 개 이상의 데이터에서 각 데이터간 장단점을 상호보완하기 위한 방법론으로 소리 데이터와 시각 데이터를 포함함으로써 단순히 ‘물건을 내려 놓는’ label을 가방을 내려 놓는지, 접시를 내려놓는지 구체적으로 구분할 수 있게 한다.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5E3"> <code>Transfer learning</code> 은 Transfer Learning과 Knowledge Distillation으로 나뉘는데 (<a href="https://baeseongsu.github.io/posts/knowledge-distillation/#etc-%EA%B7%B8-%EB%B0%96%EC%97%90">ref</a>) 서로 다른 도메인에서 지식을 전달하는 방법이 Transfer Learning (fine tuning 필요) 이고, 같은 도메인에서 다른 모델 간 지식 전달이 이루어지는 것을 Knowledge Distillation이라고 하면 ’transfer of knowledge across modalities’는 Transfer Learning을 말하는 것으로 보인다.</p>
</section>
<section id="data-modalities-and-its-pros-and-cons" class="level4">
<h4 class="anchored" data-anchor-id="data-modalities-and-its-pros-and-cons">data modalities and its pros and cons</h4>
<table>
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209530662-e526a0ee-58a4-4ad1-abf2-34ad0bb32c5c.png" class="img-fluid" alt="image"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>
</section>
</section>
</section>
<section id="single-modality" class="level2">
<h2 class="anchored" data-anchor-id="single-modality">2. Single modality</h2>
<p>RGB, Skeleton, depth, infrared, point cloud, event stream, audio, acceleration, radar, WiFi will be reviewed</p>
</section>
<section id="visible-modalities" class="level2">
<h2 class="anchored" data-anchor-id="visible-modalities">visible Modalities</h2>
<section id="rgb" class="level3">
<h3 class="anchored" data-anchor-id="rgb">2.1 RGB</h3>
<blockquote class="blockquote">
<p>한계와 장점 모두 RGB Data의 특성에서 비롯된다.</p>
</blockquote>
<ul>
<li>특성
<ol type="1">
<li>이미지(들) 로 이루어져있다. (<img src="https://latex.codecogs.com/png.latex?%5Cbecause"> video is sequence of images)</li>
<li>RGB data를 생성하는 카메라는 사람의 눈으로 보는 장면을 재생산하는 것을 목적으로 한다.</li>
<li>수집하기 쉽고 상황과 맥락을 반영하고 있는 풍부한 외관 정보가 포함되어있다.
<ul>
<li>‘rich appearance information’</li>
</ul></li>
<li>폭넓은 분야에 사용될 수 있다.
<ul>
<li>visual surveillance: 사람이 한 순간도 놓치지 않고 관찰할 수는 없는데 이를 보완할 수 있다.</li>
<li>autonomous navigation: 자율주행(ANS)의 일부로써 사람의 개입 없이 정확하게 목적지까지 도달하도록 하는 기술이다.</li>
<li>sport analysis: 눈으로 쫓기 힘든 순간들을 정밀하게 판독해야 하는 분야이므로 이 또한 ’사람의 눈’을 대신한다.</li>
</ul></li>
</ol></li>
<li>한계
<ul>
<li>various of background, viewpoints, scales of humans
<ul>
<li>학습할 수 있는 데이터는 한정적이고, 이를 활용할 수 있는 변수는 너무 많다.</li>
</ul></li>
<li>illumination condition
<ul>
<li>촬영이라는 개념이 갖는 근본적인 한계로, 광원 상태에 따라 결과가 달라질 가능성이 있다.</li>
</ul></li>
<li>high computational cost
<ul>
<li>영상은 이미지의 연속이므로 공간과 시간을 동시에 고려하여 모델링하려면 많은 자원이 요구된다.</li>
</ul></li>
</ul></li>
<li>modeling methods
<ol type="1">
<li>pre-deep learning : handcrafted feature-based approach, 수작업 특징 기반 접근법
<ul>
<li>Space-Time Volume-based methods</li>
<li>Space-Time Interest Point (STIP)</li>
</ul></li>
<li>deep learning : currently mainstream
<ul>
<li>backbone model을 무엇으로 사용하느냐에 따라 나뉠 수 있다.</li>
</ul>
<ol type="1">
<li>two-stream CNN based method / multi stream architectures (extension of two stream)
<ul>
<li>backbone : 2D CNN</li>
<li>시간정보가 포함될 수 밖에 없기 때문에 temporal information, spatial information 모두 고려하는 two-stream 접근이 제안되었다.</li>
</ul></li>
<li>RNN based method
<ul>
<li>feature extractor : RNN model with 2D CNNs</li>
<li>RGB-based model</li>
</ul></li>
<li>3D CNN based method</li>
</ol></li>
</ol></li>
</ul>
<section id="two-stream-2d-cnn-based-methods" class="level4">
<h4 class="anchored" data-anchor-id="two-stream-2d-cnn-based-methods">2.1.1 Two Stream 2D CNN-Based Methods</h4>
<blockquote class="blockquote">
<p>two 2D CNN branches taking different input features extracted from RGB video for HAR and the <strong>final result</strong> is usually obtained through <strong>fusion strategy</strong></p>
</blockquote>
<p><strong>classical approach</strong></p>
<p>고전적으로 two stream network는 각 network를 병렬적으로 학습시킨 후 결과를 융합 <code>fusion</code> 하여 최종 결과를 추론했다. 예를들어, input이 video이면 video에 내재된 정보들을 크게 1) rgb 프레임들은 공간 네트워크의, 2) multi-frame-based optical flow는 시간 네트워크의 학습 정보가 된다. 각 stream은 1) 모양 특성, appearance feature 과 2) 동작 특성 motion feature을 각각 학습한다.</p>
<ul>
<li>multi-frame-based optical flow: 움직임을 묘사하는 방법으로, 주로 짧은 시간 간격을 두고 연속된 이미지들로 구성된다. optical flow는 이미지의 velocity(속도) 를 계산하는데 이 속도는 이미지의 특정 지점이 다음의 어디로 이동할지 예측할 수 있게 한다.
<ul>
<li>주로 video understanding 에서 사용되는 개념으로 보인다.</li>
<li>acceleration data와 어떻게 다른지 알 필요가 있다. &gt; <a href="https://arxiv.org/pdf/2008.02580.pdf">The optical flow is used to perform a prediction of the frame to code</a></li>
<li>networks: SpyFlow, PWC-Net; compute pixel-wise motion vectors</li>
</ul></li>
</ul>
<p><strong>overcome limitation</strong></p>
<p>RGB 양식 데이터를 사용함에 있어 주된 문제로 지적되는 점은 ’큰 데이터 용량으로 인한 computing resource 부담과 연산 속도 저하’이므로 연산 속도를 높이기 위해 해상도를 낮추거나, 고해상도 데이터에서 center crop을 하는 기법을 적용했다.</p>
<p><strong>better data representation</strong></p>
<p>모델의 성능은 데이터의 양과 <strong>질</strong>에 좌우된다. 따라서 더 나은 video representation 에 눈을 돌리게 된다. Wang은 multi-scale video frames, optical flow를 각 CNN stream에 넣어 특성맵 feature map을 추출했고 이에서 trajectories에 중심을 둔 <strong>spatio-temporal tubes</strong> (<code>action tube</code>)를 샘플링했다. 이렇게 한 결과, Fisher Vector representation <img src="https://latex.codecogs.com/png.latex?%5E%7B3)%7D"> 과 SVM을 통해 분류했다.</p>
<ul>
<li>왜 튜브일까? : <img src="https://latex.codecogs.com/png.latex?2)"> 가 시기상 더 먼저 나온 논문이므로 후자에서 제시된 개념일 것으로 추정됨. 후자 논문의 Abstract에서 tube는 “예측된 동작을 연결함으로써 시간일관적으로 객체를 탐지하는” 개념이다.
<ol type="1">
<li>suggest image region : 움직임이 두드러지는 영역을 선택</li>
<li>CNN을 이용하여 공간적 특징을 추출</li>
<li>Action tube를 생성</li>
</ol>
<blockquote class="blockquote">
<p>We link our predictions to produce detections consistent in time, which we call action tubes.</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209574143-74cb413a-7e2f-449f-ba72-6624404b8904.png" class="img-fluid" alt="Fig 1: Discovering Spatio-Temporal Action Tubes; An over view of action detection framework"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<figcaption>
Fig 1. Discovering Spatio-Temporal Action Tubes; An over view of action detection framework
</figcaption>
<table>
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/209574675-7829d4c4-f9d6-4e5a-89d0-59596ca8ff9e.png" class="img-fluid" alt="Fig 2. Finding action tubes; action tube approach, detect action on (a) and link detected actions in time to produce action tubes"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<figcaption>
Fig 2. Finding action tubes; action tube approach, detect action on (a) and link detected actions in time to produce action
</figcaption></li>
<li><img src="https://latex.codecogs.com/png.latex?%5E%7B1)%7D"> <a href="https://arxiv.org/abs/1811.12248">Discovering Spatio-Temporal Action Tubes (2018)</a></li>
<li><img src="https://latex.codecogs.com/png.latex?%5E%7B2)%7D"> <a href="https://ieeexplore.ieee.org/document/7298676">Finding action tubes</a> or <a href="https://openaccess.thecvf.com/content_cvpr_2015/papers/Gkioxari_Finding_Action_Tubes_2015_CVPR_paper.pdf">CVPR open access</a></li>
<li><img src="https://latex.codecogs.com/png.latex?%5E%7B3)%7D"> Fisher Vector Representation: <a href="https://zlthinker.github.io/Fisher-Vector">ref</a></li>
</ul>
<p><strong>Long term video level information</strong></p>
<blockquote class="blockquote">
<p>정보를 mean pooling하거나 누적하여 단일한 움직임이 아닌 움직임의 연속; 좀 더 복잡한 행동을 인식</p>
</blockquote>
<p>각 비디오를 세 개의 segment로 나눈 후 two stream network에 입력한 후, 각 segment의점수를 <strong>average pooling</strong> 을 이용해 융합한다. 또는 segment 점수를 pooling하지 않고 <strong>element-wise multiplication</strong>으로 특성의 총계를 구한다. 이 때 two stream framework에 의해 샘플링된 외형과 동작 프레임들은 ’하나의 video-level multiplied’를 위해 aggregate 연산되며 이를 <code>action words</code> 라고 칭한다. <img src="https://latex.codecogs.com/png.latex?%5E%7B4)%7D"></p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img width="100%" alt="image" src="https://user-images.githubusercontent.com/60145951/209576243-dfe0955c-7e9b-4375-88e1-f236719d6273.png"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Fig 3. 동작들에서 행동과 관계된 <code>action word</code>를 추출한 후 이를 총 망라하는 하나의 분류를 선택하는 과정</td>
</tr>
</tbody>
</table>

<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5E%7B4)%7D"> R. Girdhar, D. Ramanan, A. Gupta, J. Sivic, and B. Russell, “Actionvlad: Learning spatio-temporal aggregation for action classification,” in CVPR, 2017.</li>
</ul>
<p><strong>EXTENSION of two stream CNN based method</strong></p>
<p>3 stream 으로 확장하는 등, “움직임” 또는 “프레임간 연속성”을 학습시키기 위해 다양한 방법론을 도입했다. 이후 2 stream siamese network (SNN) 로 확장되었는데 이는 동작 발생 <strong>전</strong>과 동작 <strong>후</strong> 프레임에서 특징을 추출하는 <code>one shot learning</code>의 일종으로 연속성이 아닌 동작 시작, 전, 후를 구분하여 학습하는 발상의 전환을 꾀한다.</p>
<ul>
<li><p>one shot learning : 소량의 데이터로 학습할 수 있게 하는 방법이 few shot learning이라면 one shot은 그 극한으로 이미지 한장을 학습 데이터로 삼는 방법론이다. 사람은 물체간의 유사성을 학습하는데, 이 유사성은 물체를 배우고 물체간의 유사성을 또 다시 배우는 과정으로 나뉠 수 있다. 다시말해, <strong>물체의 특성을 학습하고 이를 일반화</strong>할 줄 아는 능력을 학습시키는 방법이 one/few shot learning이다.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctherefore"> 이미지 자체의 특성을 학습하는 것이 아닌, 이미지간의 유사성을 파악하고 유사도를 파악할 때 쓰는 기법인 ’거리 함수’를 사용한다.</li>
</ul></li>
<li><p>샴네트워크</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img width="100%" alt="siamese network" src="https://user-images.githubusercontent.com/60145951/209576942-b98a7973-be82-46f3-b292-cbf6be463153.png"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Fig 4. <a href="https://serokell.io/blog/nn-and-one-shot-learning">ref: A Guide to One-Shot Learning</a></td>
</tr>
</tbody>
</table>
<ul>
<li>two stages: verification and generalization 가 포함된다.</li>
<li>각각 다른 입력을 동일한 네트워크 인스턴스에 학습시키고, 이는 동일한 데이터셋에서 훈련되어 유사도를 반환한다.</li>
</ul></li>
</ul>
<p><strong>Tackle high computational cost</strong></p>
<p>Knowledge distillation <img src="https://latex.codecogs.com/png.latex?%5E%7B5)%7D"> 이 사용된다. “<a href="https://velog.io/@dldydldy75/%EC%A7%80%EC%8B%9D-%EC%A6%9D%EB%A5%98-Knowledge-Distillation">Data 에서 의미를 파악하면 Information 이 되고, Information 에서 문맥을 파악하면 Knowledge 이 되고, Knowledge 를 활용하면 Wisdom 이 된다.</a>” 모델 압축을 위한 절차로, soft label과 hard label을 일치시키는 것이 목적이며 soft label에는 temperature scaling function을 적용하여 확률 분포를 부드럽게 만든다. 예를 들어 feature들의 label이 <img src="https://latex.codecogs.com/png.latex?%5B0,%201,%200%5D%5E%7BT%7D"> 이면 Hard label, <img src="https://latex.codecogs.com/png.latex?%5B0.05,%200.75,%200.2%5D%5E%7BT%7D"> 이면 soft label이다. 각 feature들은 서로 다른 특성을 가지고 있지만 공통된 특성 또한 가지고 있기 때문에, 이 공통 요소를 포함하는 class score를 날려버리면 (hard label) 정보가 손실되는 셈이다. 이렇게 정보가 손실되지 않게 Teacher network를 구성하고 Student network가 teacher network에 최대한 가까운 정답을 반환하도록 학습시킨다. 위에서 언급한 <code>temperature</code>는 그 값이 낮을 때 입력값의 출력을 크게 만들어주는 등 필요에 따라 값에 가중치를 둠으로써 Soft label의 이점을 최대화 한다. <a href="https://light-tree.tistory.com/196">참고</a></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">teacher network; optical flow data</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">⬇︎ Knowledge Distillation ⬇︎</td>
</tr>
<tr class="even">
<td style="text-align: center;">student network; motion vector</td>
</tr>
</tbody>
</table>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://velog.velcdn.com/images%2Fdldydldy75%2Fpost%2F2bc5e3eb-b58b-456b-9b6b-420cd996ae38%2Fimage.png" class="img-fluid"></th>
<th style="text-align: center;"><img src="https://intellabs.github.io/distiller/imgs/knowledge_distillation.png" class="img-fluid" alt="https://intellabs.github.io/distiller/knowledge_distillation.html"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Knowledge Spectrum</td>
<td style="text-align: center;">Distillation Architecture</td>
</tr>
</tbody>
</table>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5E%7B5)%7D"> <a href="https://arxiv.org/abs/1503.02531">Distilling the Knowledge in a Neural Network(2015)</a></li>
</ul>
<p><strong>In Conclusion,</strong></p>
<p>여러개의 stream으로 CNN architecture들을 확장하거나 더 깊게 레이어를 쌓는 등 여러 시도를 해보았으나 수많은 video의 frame 개수를 고려할 때 깊이는 오히려 HAR에 방해가 될 수 있다. 선행 연구를 통해 ’차별화된 특징’을 예측하는 것이 중요함을 파악하게 되었다. 이 외에도, fusion strategy research의 마지막 conv layer에서 공간과 시간 네트워크를 융합하는 방법이 위에서 지적된 컴퓨팅 자원을 절약하면서 (params를 줄이면서) 정확도를 유지하는 효과적인 방법임을 알아냈다.</p>
</section>
<section id="rnn-based" class="level4">
<h4 class="anchored" data-anchor-id="rnn-based">2.1.2 RNN based</h4>
<blockquote class="blockquote">
<p>feature extractor 로 CNN을 사용한 hybrid architecture</p>
</blockquote>
<p><strong>LSTM based model</strong></p>
<p>Vanilla Recurrent Neural Network의 gradient vanishing 문제로 인해 RNN based solution은 gate 를 포함하는 RNN Architecture를 채택한다. (e.g.&nbsp;LSTM)</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img width="400" alt="image" src="https://user-images.githubusercontent.com/60145951/209581127-eba182df-90a6-4c9c-b146-268ebb92f144.png"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Fig 5. RGB modality modeling methods (CNN, RNN based)</td>
</tr>
</tbody>
</table>
<p>물론 ‘이미지’에서 공간적 요소를 빠트릴 수 없기 때문에 특징 추출은 여전히 <strong>2D CNN</strong>으로 진행하고, 시간요소를 LSTM에서 차용한 구조를 통해 모델링한다. 이를 <code>LRCN</code> (Long Term Recurrent Convolutional Network, Jeff Donahue et al.&nbsp;in 2016) 라고 하며 이는 ’2D CNN; 프레임 단위 RGB feature 추출’ + ’label 생성 LSTM’으로 구성된다.</p>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://kobiso.github.io//assets/images/lrcn.png" class="img-fluid" alt="LRCN architecture"></th>
<th style="text-align: center;"><img src="https://kobiso.github.io//assets/images/lrcn_tasks.png" class="img-fluid" alt="recognition examples"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Fig 6.1 LRCN architecture</td>
<td style="text-align: center;">Fig 6.2 LRCN model for some tasks</td>
</tr>
</tbody>
</table>
<ul>
<li>image reference : <a href="https://kobiso.github.io/research/research-lrcn/">Long-term Recurrent Convolution Network(LRCN)</a></li>
</ul>
<p><strong>attention mechanism</strong></p>
<p>multi layer LSTM model 설계 후 다음 프레임에 가중치를 부여한 Attention map 을 <strong>재귀적으로</strong> 출력함으로써 공간적 특성에 집중할 수 있게 되었다. - feature map을 중첩해서 뽑아내는 것 처럼? - recap : main idea of attention; decoder에서 출력 단어를 추론하는 매 순간마다 encoder에서의 전체 문장을 참고한다는 점. 단, ‘해당 시점에서 예측에 필요한 부분에 집중(attention)’해서 구한다. <img src="https://latex.codecogs.com/png.latex?Attention%20(Q,%20K,%20V)%20=%20Attention%20%5C%20Value"> 로, Query에 대해 모든 Key와의 유사도를 구한 후 (<em>전체 문장을 참고</em>) 이에 관계된 Value에 반영한다. 유사도가 반영된 값, value는 attention value라고도 한다. - Q : t 시점에서 디코더 셀에서의 은닉상태 - K : keys, ’모든 시점에서’ 인코더 셀의 은닉 상태 - V : Values, ‘모든 시점에서’ 인코더 셀의 은닉 상태로 각 인코더의 attention 가중치와 은닉상태가 가중합 된 값이다. (a.k.a. context vector)</p>
</section>
<section id="d-cnn-based-method" class="level4">
<h4 class="anchored" data-anchor-id="d-cnn-based-method">2.1.3 3D CNN based method</h4>
<blockquote class="blockquote">
<p>HAR의 공간과 시간을 모두 식별할 수 있다는 강력한 장점이 있으나 많은 양의 훈련 데이터를 요구함</p>
</blockquote>
<blockquote class="blockquote">
<p>한계: Long term Temporal information이 전해지지 않는 문제</p>
</blockquote>
<p>지금까지는 모두 2D CNN을 시간과 함께 모델링했다. 그러나 Tran et.al [66]은 raw video data에서 시공간 데이터를 end-to-end 학습하기 위해 3D CNN 모델을 도입한다. 단, 이 경우 클립 수준 (16 frames or so) 에서 사용되는 모델이므로 시간이 길어질수록 temporal 정보가 옅어지는 한계가 있다.<br>
이에, Diba et al.(<a href="https://github.com/MohsenFayyaz89/T3D">github</a>, <a href="https://paperswithcode.com/paper/temporal-3d-convnets-new-architecture-and">paper</a>)는 3D 필터 및 pooling kernel로 2D 구조였던 DenseNet을 확장한 T3D (Temporal 3D ConvNet) 과 새로운 시간 계층 TTL (Temporal Transition Layer) 을 제안했다. - 시간에 따라 convolution kernel depth가 달라지도록 모델링 한 것 같다. 3D CNN 모델이 2D 단위에서 학습한 것을 활용하지 않는 것에 착안해 2D와 3D를 함께 쓰는 방식을 채택한 것으로 보임 (논문까지 확인하기 전)</p>
<p>그 외에, 시간 범위를 늘린 LTC (Long-term Temporal Convolution) 모델, multi scale ‘temporal-only’ convolution; Timeception 모델 등이 제안되었으며 이는 모두 복잡하거나 긴 작업에서 영상의 길이에 구애받지 않고 인식할 수 있는 강건한 모델을 만들기 위함이다.</p>
</section>
</section>
<section id="skeleton" class="level3">
<h3 class="anchored" data-anchor-id="skeleton">2.2 Skeleton</h3>
<p>시점 변화에 민감한 pose estimation에서 motion capture system으로 수집한 데이터셋은 신뢰할 수 있다. (“Ntu rgb+d 120: A large-scale benchmark for 3d human activity understanding,” TPAMI, 2020.) 최근의 많은 연구는 Ntu의 depth map, 또는 RGB video를 사용한다 (st-gcn).</p>
<p>RGB video만 사용할 경우 옷 또는 신체의 부피를 포함해 RGB data의 문제였던 다양한 변수 (e.g.&nbsp;background, illumination environment) 로부터 상당부 자유로울 수 있다. 초기에는 수작업으로 특징을 추출하여 관절 또는 신체 부위 기반의 방법이 제안되었는데 딥러닝의 발전에 따라 RNn, CNN, GNN, GCN을 적용하게 되었다.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img width="539" alt="image" src="https://user-images.githubusercontent.com/60145951/209585313-6fc0b53c-f815-4b60-baa0-13c677a06ab5.png"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Fig 7. Performance of skeleton-based deep learning HAR methods on NTU RGB+D and NTU RGB+D 120 datasets.</td>
</tr>
</tbody>
</table>
</section>
<section id="depth" class="level3">
<h3 class="anchored" data-anchor-id="depth">2.3 depth</h3>
<blockquote class="blockquote">
<p>Depth maps refer to images where the pixel values represent the distance information from a given viewpoint to the points in the scene.</p>
</blockquote>
<p>색상, 질감 등의 변화에 강건하며 3차원 상의 정보이므로 신뢰할 수 있는 3D 구조 및 기하학적 정보를 제공한다. depth map은 왜 필요한가? 3D 데이터를 2D 이미지로 변환하기 위함이다: depth 정보는 특수한 센서를 필요로 하는데, 이는 active sensors (e.g., Time-of-Flight and structured-light-based cameras) and pas- sive sensors (e.g., stereo cameras) 로 나뉜다.<br>
active sensor는 방사선을 물체에 방출하여 <strong>반사되는 에너지를 측정</strong>하여 깊이정보를 얻는, 말그대로 능동적인 행동에 의해 발생하는 정보를 수집하는 센서다. Kinect, RealSense3D 등의 특수한 장치를 포함하는 센서가 포함된다. passive sensor는 물체가 방출하거나 반사하는 <strong>자연적인 에너지</strong> 를 말한다. 수동센서의 예인 stereo camera는 인간의 양안을 시뮬레이션 하는 카메라로 are recovered by seek- ing image point correspondences between stereo pairs 한다.</p>
<p>둘을 비교했을 때, passive depth map generation은 RGB 이미지 사이에서 깊이를 연산해내는 과정이 포함되므로 계산 비용이 많이 들 뿐 아니라 질감이 없거나 반복 패턴이 있는; view point에 따라 크게 달라지지 않는 대상에는 효과를 보이지 않을 수 있다. 따라서 대부분의 연구는 active sensor를 이용한 depth map에 초점을 맞추고 있다. (“only a few works used depth maps captured by stereo cameras”)</p>
<p><strong>datasets and methods</strong></p>
<p>데이터셋으로는 Deep Learning methods가 도래하기 전까지 사용했던 hand-crafted Depth Motion Map (DMM) features가 있다. 딥러닝 프레임워크도 이 DMM을 활용하는데, <code>weighted hierarchial DMMs</code> 이 제안되었다. 그러나 기존의 DMMs가 구체적인 시간정보를 포착하지 못하는 한계를 직면하자 Wang et.al 은 dynamic images at the body, body part, joint level 총 세가지를 짝지은 <code>depth sequences</code> 를 CNNs에 먹이는 방식을 제안했다.</p>
<p>depth modality의 성능은 1. depth maps including dynamic (depth images, 2. dynamic depth normal images, 3. dynamic depth motion normal images 의 발견에 힘입어 크게 성장했다. 발전을 위해 제안된 아이디어는 <code>view invarient</code> 을 이용한 방법론들이 다수인데, 다른 시각에서 본 이미지들을 high-level space로 옮김으로써 입체감을 부여하고 (Rahmani et al.&nbsp;[9]) CNN 모델이 human pose model과 Fourier Temporal Pyramids를 학습하게 하여 시점에 따른 행동 변화를 학습하게 하는 방식이 있다.</p>
<p><strong>estimate without depth sensor</strong></p>
<p>그러나 <strong>depth 정보를 추정해낼 수 있는 방법 또한 있다.</strong> <code>depth estimation</code> 기술이 이미 존재하고 Zhu and Newsam [224] 는 depth estimation을 이용해 RGB video에서 depth 을 추출해낸 바 있다.</p>
<ul>
<li><a href="https://paperswithcode.com/task/depth-estimation">paperswithcode:depth estimation</a> &gt; Newer methods can directly estimate depth by minimizing the regression loss, or by learning to generate a novel view from a sequence. &gt; The most popular benchmarks are KITTI and NYUv2. Models are typically evaluated according to a RMS metric.
<ul>
<li>Subtask로는 Monocular Depth Estimation, Stereo Depth Estimation 등이 있다.</li>
</ul></li>
<li>2022 큰 주목을 받았던 diffusion model 또한 depth estimation을 사용하고 있다. multi-view 이미지들에서 차이점이 되는 point들을 찾고, 이 차이를 “splatting and diffusion”하여 depth map을 생성한다.
<ul>
<li><a href="https://visual.cs.brown.edu/projects/diffdiffdepth-webpage/">differentiable diffusion for dense depth estimation from multi-view images (CVPR, 2021)</a></li>
</ul>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/210206872-5b823b30-f566-4043-b0df-4eed1fcff155.png" class="img-fluid" alt="generating diffusion map by splatting and diffusion differences of Multi-View images"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">generating diffusion map by splatting and diffusion differences of Multi-View images</td>
</tr>
</tbody>
</table></li>
</ul>
<p><strong>limitation</strong></p>
<p>그러나 일반적으로 depth information은 외형정보가 부족하므로 다른 data modality와 융합하여 사용된다. - section 3 에서 더 살펴볼 수 있으나, 본 포스트에서는 single modality까지만 다루겠다.</p>
</section>
<section id="infrared-ir" class="level3">
<h3 class="anchored" data-anchor-id="infrared-ir">2.4 infrared (IR)</h3>
<blockquote class="blockquote">
<p>Infrared radiation is emitted from all surfaces that have a temperature above 0 K (−273.15 °C) and the strength of emitted radiation depends on the surface temperature (higher temperatures have greater radiant energy) (<a href="https://www.sciencedirect.com/topics/physics-and-astronomy/infrared-radiation">sciencedirect/infrared-radiation</a>)</p>
</blockquote>
<p>주변광에 의지하지 않아도 되므로 야간 HAR에 적합하다. depth sensor와 마찬가지로 반사광선을 활용하여 물체를 인식하는데, 적외선을 내보내는 센서가 active sensor라면 대상에서 방출되는 광선 (열 에너지 등) 을 인식하는 방법은 수동 인식이다.</p>
<p><strong>methods</strong></p>
<p>Kawashima et.al 의 Action recognition from extremely low-resolution thermal image sequence (2017, AVSS) 에 의하면 극히 낮은 해상도 <img src="https://latex.codecogs.com/png.latex?%5E%7B1%7D"> <img src="https://latex.codecogs.com/png.latex?%5E%7B2%7D"> 의 row resolution thermal images에서 먼저 사람의 무게중심을 기반으로 사람 부분만 추출하고, 다음으로 cropped sequences들과 frame간 차이를 LSTM기반의 CNN에 입력해 시공간 정보를 담은 모델을 생성한다. 해당 연구에서 이어진 연구로는 열화상 비디오들에서 학습된 시공간 정보를 동시에 학습하기 위해 3D CNN을 적용한 Shah et al의 연구가 있고, Meglouli et al는 raw thermal images를 사용하는 대신 raw thermal sequences를 3D CNN에 적용하여 optical flow information를 연산해냈다.</p>
<ul>
<li><p>thermal images vs thermal sequence?</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://www.researchgate.net/profile/Yasutomo-Kawanishi/publication/320649612/figure/fig2/AS:667869876596744@1536243995369/Example-of-a-thermal-image-sequence.png" class="img-fluid" alt="Example of a thermal image sequence"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Example of a thermal image sequence (Action Recognition from Extremely Low-Resolution Thermal Image Sequence)</td>
</tr>
</tbody>
</table></li>
</ul>
<p>이미지간 차이를 추출해낸 결과로 보인다.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5E%7B1%7D"> 왜 저해상도라는 말이 언급되는가? - 기본적으로 IR(InfraRed) radiation은 전자기파 (electromagnetic waves) 이며 oscillate (진동) 주기는 <img src="https://latex.codecogs.com/png.latex?3%20*%2010%5E%7B11%7DHz"> 에서 <img src="https://latex.codecogs.com/png.latex?4%20*%2010%5E%7B14%7DHz"> 다. (<a href="https://www.sciencedirect.com/topics/chemistry/ir-radiation">sciencedirect/IR Radiation/Jyrki K. Kauppinen, Jari O. Partanen, in Encyclopedia of Spectroscopy and Spectrometry (Third Edition), 2017</a>) - 고주파면 High-Frequency, 고해상도면 High-Resolution인데 왜 해상도가 언급되는가: 적외선 이미지는 해상도가 rgb 이미지보다 훨씬 낮다. 여기서 말하는 해상도가 낮다는건 픽셀정보인 공간 해상도를 구분하는것</p>
<pre><code>| ![Example of RGB and InfRared (IR pair images in real maritime dataset)](https://www.researchgate.net/publication/343453594/figure/fig5/AS:928906546802693@1598479987148/Example-of-RGB-and-InfRared-IR-pair-images-in-the-real-maritime-dataset-at-a.png) |
| :-: |
| Example of RGB and InfRared (IR pair images in real maritime dataset) |</code></pre>
<ul>
<li>해상도란 : 신호에서 minimum하게 구분할 수 있는 간격으로 탐지하기 위해 받아들이는게 신호라고 할 때 서로 다른 신호의 간격이 얼마나 가까이까지 구분해낼 수 있는가를 해상도라고 말한다. 즉, 실제로 서로 다른걸 다르다고 말할 수 있는 거리가 해상도다. 해상도가 높으면 같은 이미지도 높은 픽셀로 표현할 수 있다.</li>
<li>예를들어 High Resolution infrared Radiation Sounder (HIRS) sensor 는 적외선 방사선 검출기의 단점내지 한계인 해상도를 개선한 센서라고 생각할 수 있다.</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%5E%7B2%7D"> 그렇다면 왜 <em>초</em>저해상도 이미지를 굳이 사용하는가? - quotation : <a href="https://www.researchgate.net/publication/320649612_Action_recognition_from_extremely_low-resolution_thermal_image_sequence">Kawashima, Takayuki &amp; Kawanishi, Yasutomo &amp; Ide, Ichiro &amp; Murase, H. &amp; Deguchi, Daisuke &amp; Aizawa, Tomoyoshi &amp; Kawade, Masato. (2017). Action recognition from extremely low-resolution thermal image sequence. 1-6. 10.1109/AVSS.2017.8078497.</a></p>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/210193383-9f232405-bbfb-4758-8ff9-4660b1afe83d.png" class="img-fluid" alt="Figure 3. Example of images captured at night-time"></th>
<th style="text-align: center;"><img src="https://user-images.githubusercontent.com/60145951/210193861-5a363fd9-d470-4374-b7aa-16a8cf59044e.png" class="img-fluid" alt="Figure 4. Example of a thermal image sequence"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Figure 3. Example of images captured at night-time</td>
<td style="text-align: center;">Figure 4. Example of a thermal image sequence</td>
</tr>
</tbody>
</table>
<blockquote class="blockquote">
<p>Therefore, it is difficult to compute feature points and to obtain a clear edge of the human body from it. More-over, the pixel values will be easily affected by factors such as the motion of a person and the distance between the sen-sor and the human body. Therefore, most conventional action recognition methods using a visible-light camera are not suitable for being applied to extremely low-resolution thermal image sequences</p>
</blockquote>
<p>이러한 이유로 초저해상도 열화상 이미지를 사용하게 된다.</p>
<p>low-resolution thermal image sequences는 아래와 같은 특성을 가진다.</p>
<ol type="1">
<li>edge of the human body does not appear clearly
<ul>
<li>위 인용에서 초저해상도 열화상 이미지를 사용하는 이유로 든 사례와 같다. RGB high resolution image 도 human body edge를 명확하게 연산하기는 어려우며 pixel values들은 사람의 움직임, 센서와의 거리 등에 크게 영향을 받는다.</li>
<li>high resolution image가 집중하는 human body edge가 연산해내기 어려운 특성이라면 아예 이를 제외하고 다른 부분에 초점을 맞추겠다는 선언으로 보인다.</li>
</ul></li>
<li>The motion of a person changes the pixel values of both the human body and its surrounding region
<ul>
<li>1이 low resolution image sequence를 사용해야 하는 이유와 관계가 있다면 이 항목은 edge를 명확하게 찾을 수 없는 대신 얻을 수 있는 정보를 말한다.</li>
<li>대략적인 범위를 알 수 있으니 결국 얼만큼 움직이는지만 감지해내면 되고, 그 움직임은 pixel 값으로 표현되니 optical image 를 대신할 수 있다.</li>
</ul></li>
<li>When the distance between the sensor and the human body changes, the pixel values also change
<ul>
<li>또 다른 RGB image approach의 한계였던 센서와의 거리가 thermal image에도 영향을 미치지만 이것은 pixel value에 영향을 미치므로 연산으로 보완할 수 있을 것으로 보인다.</li>
</ul></li>
<li>A pixel value changes depending on the occupancy area ratio of the human body in the observation range of a thermopile infrared sensor
<ul>
<li>결과적으로 센서와의 거리 (view point) 등의 변수도 pixel에 반영이 되므로 적외선 센서의 특징을 고려할 때 기존 접근법의 한계를 극복할 수 있을 것이다.</li>
</ul></li>
</ol>
</section>
<section id="point-cloud" class="level3">
<h3 class="anchored" data-anchor-id="point-cloud">2.5 Point Cloud</h3>
<blockquote class="blockquote">
<p>Point cloud data is composed of a numerous collection of points that represent the spatial distribution and surface characteristics of the target under a spatial reference system.</p>
</blockquote>
<p>시공간보다는 2D와 3D 모두 풍부한 정보를 얻을 수 있는 데이터 양식으로 2차원에서는 실루엣을, 3차원에서는 대상의 기하학적 정보를 포함하기 때문에 3D HAR에서 확고한 입지를 다지고 있다. 해당 정보를 얻기 위한 방법은 두가지가 있는데 하나는 3D sensor (cf.&nbsp;LiDar, Kinect) 를 사용하는 것이고 다른 하나는 이미지를 기반으로 한 3차원 재구성 (image based 3D reconstruction) 을 수행하는 것이다.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://miro.medium.com/max/1400/1*Gbzp4-b8zXe5JGZmG-uXNw.webp" class="img-fluid" alt="lidar point cloud"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Fig 1. lidar point cloud</td>
</tr>
</tbody>
</table>
<p><strong>Using point cloud sequence by Voxel</strong></p>
<p>또한 딥러닝의 발전으로 딥러닝 방법론이 주목받았고, 일반적으로 더 나은 성능을 보였다. 2020년 CVPR에서 “3dv: 3d dynamic voxel for action recognition in depth video,” 발표되어 raw point cloud sequence를 일반적으로 사용할 수 있는 3D 화소 집합 (<code>voxel sets</code>) 으로 변환한 바 있다.</p>
<ul>
<li><p>?: temporal rank pooling이 뭘까? 선형대수의 그 rank 인가? rank를 어떻게 풀링하는가…? 그걸 하는게 어떤 효과가 있는가…?</p></li>
<li><p>voxel : 입체 화상을 구성하는 3D 화소로 volume element를 말한다. 데이터 포인트로 구성되는데 이는 하나 또는 여러개의 데이터 조각으로 구성된다. (e.g.&nbsp;불투명도, 색상 …) 따라서 Vector (or Tensor) 데이터로 구성되며 다양한 속성을 표현할 수 있다. (e.g.&nbsp;CT에서 재료의 불투명도를 부여하는 Hounsfield scale: 방사선의 밀도를 표현)</p>
<ul>
<li>pixel : <em>pic</em>ture + <em>el</em>ement
<ul>
<li>raster image를 구성하는 가장 작은 단위 또는 display에서 접근 가능한 모든 점들의 집합을 말하며 대부분 digital display 에서 표현되는 그래픽들의 가장 작은 단위로 사용된다.</li>
</ul></li>
<li>voxel : <em>vo</em>lume + <em>el</em>ement
<ul>
<li>3D Computer graphic에서 3차원 상의 일반 격자(regular grid)를 나타내기 위한 단위로, 고유한 state parameter를 가지며 모델 객체에 종속된다. (<a href="https://en.wikipedia.org/wiki/Voxel">wiki</a>)
<ul>
<li><em>regular grid?</em> : grid는 regular grid와 irregular grid로 구분되는데 일반 격자는 테셀레이션(tesselation)의 n차원 유클리디안 공간으로 규칙적인 간격을 가진다.</li>
<li><em>tesselation?</em> : 테셀레이션은 computer graphic 용어로 장면의 객체를 렌더링하기에 적합하도록 나타내는 다각형 데이터 집합 또는 vertex sets 이다.*</li>
</ul></li>
</ul></li>
<li>texel : <em>tex</em>ture + <em>el</em>ement
<ul>
<li>texture map의 기본단위로, 이미지를 픽셀로 표현하는 것 처럼 배열을 texture 공간에 나타내어 질감을 표현한다.</li>
</ul></li>
<li>resel : <em>res</em>olution + <em>el</em>ement
<ul>
<li>실제 공간 해상도에서 이미지 또는 부피데이터셋이 차지하는 비율을 나타낸다. resels per pixel, resels per voxel 등으로 표현한다.</li>
</ul></li>
</ul></li>
</ul>
<p>이렇듯 voxel에는 다양한 속성을 표현할 수 있으므로 voxel sets 을 3D action information으로 인코딩할 수 있다. 이러한 추상화 과정을 통해 학습한 모델이 <code>PointNet++</code>다.</p>
<p>물론, point cloud를 voxel로 변환하는 과정에서 다량의 양자화 오차(quantization errors)가 발생하여 효력면에서 충분히 효과적이지 않은데 이를 해결하기 위해 제안된 모델이 <code>MeteorNet</code>이다. 해당 모델은 여러 프레임의 point cloud들을 local 특성으로 합산하는데 이 때 spatio-temporal neighboring point 들을 사용한다. 다시 말해, 모든 point cloud를 voxel로 변환할 때 유실되는 값이 많으므로 국소 범위에서 관계가 있을 것으로 추정되는 주변 값을 변환하고, 또 변환하여 오차를 줄이는 방식을 채용한 셈이다. - 양자화 오차 : ADC (Analog to Digital Converter) 에서 입력 아날로그 신호가 출력 디지털 신호로 변환될 때 유실되는 값이다.</p>
<p>이와 반대로 점의 공간적 불규칙성이 정보값에 혼란을 줄 것을 우려한 <code>PSTNet</code>은 시공간 정보를 분리하기도 했다.</p>
<p><strong>Modeling</strong></p>
<p>이렇게 재구성된 Point Cloud로 수행해야하는 바는 다른 modality와 동일하게, 시공간을 동시에 고려고 그 특성을 파악하는 작업이다. 3차원 공간의 정보의 누수를 막고 voxel sets을 구해낸 후의 연구는 시간을 모델링하는데 초점을 맞추는데 이는 여타 방법론과 유사하다. RNN 기반의 모델인 LSTM을 적용한다. 눈여겨 볼 점은 4D CNN이 도입되었다는 점인데, 이는 LSTM 도입의 연장선으로 이미 3차원인 공간 모델링에 시간 차원을 추가하는 방식이다. - self-supervised modeling이 상대적으로 자주 언급되는데 최신 연구이기 때문인지 point cloud 특성 때문인지 확인이 필요하다.</p>


</section>
</section>

 ]]></description>
  <category>HAR</category>
  <category>paper review</category>
  <guid>https://dotpyo.github.io/archive/posts/HAR/modalities.html</guid>
  <pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>LLMs Are Zero-Shot Time Series Forecasters</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/papers/2310.07820.html</link>
  <description><![CDATA[ 





<section id="abstract" class="level3">
<h3 class="anchored" data-anchor-id="abstract">Abstract</h3>
<p>시계열을 ’숫자 문자열’로 인코딩하면, 시계열 예측을 자연어 처리에서의 다음 토큰 예측과 같이 구성할 수 있다는 접근으로 시작한다. 따라서 저자들은 GPT-3, LLaMA-2 모델과 같은 LLM 이 zero-shot 시계열 추정(extrapolate)의 비교가능한 수준에서, 또는 시계열 학습을 목적으로 만들어진 모델을 상회하는 능력을 보임을 발견했다. 이러한 성능을 촉진하기 위해서 본 논문에서는 <em>시계열 데이터를 효과적으로 토큰화 하는 방법</em>과 토큰에 대한 <em>이산적 분포를 매우 유연한 밀도의 연속값으로 전환</em>하는 방법을 제안한다. 저자들은 시계열에 대한 LLM의 성공이 단순성 및 반복에 대한 편향과 함께 multi-modal distributions을 자연스럽게 표현하는 LLM의 능력에 있다고 주장하는데 이는 많은 시계열에서 두드러지는 특징이며 특히 반복되는 계절 추세에서 그러하다는 점에서 본 논문의 주장과 상통한다.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
토큰의 이산적 분포를 연속값의 유연한 밀도로 변환하는 방법?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li>이산분포(불연속분포)는 가능한 결과가 뚜렷하고 분리되어있는 확률 분포를 의미한다. 예를 들면 특정 토큰이 시퀀스에서 발생할 확률과 같다.</li>
<li>연속값은 반대로, 어떤 실수에서 온도나 주가와 같은 특정 범위를 취할 수 있는 값을 말한다.</li>
<li>이산분포를 연속값으로 전환함으로써 저자는 LLM이 고정된 토큰의 집합에 국한되지 않고 가능한 다양한 값을 나타낼 수 있는 예측을 생성할 수 있음에 초점을 맞춘다.</li>
</ul>
</div>
</div>
</div>
<p>또한 연구진은 본 논문에서 LLM이 누락된 비-수학적 데이터를 자연스럽게 처리하는 방법과 텍스트 정보를 수용하는 방법을 보이며 QA를 예측 결과를 설명하는데 도움이 되도록 사용한다. 모델의 크기와 시계열 성능은 일반적으로 비례하지만 이를 밝혀내는 과정에서 연구진은 GPT-4가 토큰 개수로 인해 GPT-3보다 더 좋지 않은 성능과 나쁜 불확실성 교정 성능을 보임을 알아낸다. 이는 RLHF와 같은 정렬 중재(alignment intervention method)의 결과일 수 있다; 사용자가 GPT-4를 이용하여 정렬하던 과정에서 오류 또는 보정이 제대로 이루어지지 않았을 가능성을 명시한다.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
‘단순성 및 반복에 대한 편향과 함께’ + ’다중 분포를 자연스럽게 표현’하는 능력?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<blockquote class="blockquote">
<p>We argue the success of LLMs for time series stems from their ability to naturally represent multimodal distributions, in conjunction with biases for simplicity, and repetition, which align with the salient features in many time series, such as repeated seasonal trend</p>
</blockquote>
<ol type="1">
<li>Multimodal distribution, 여러개의 peak와 mode가 있는 확률분포로 여러개의 그룹 또는 데이터의 패턴이 존재함을 나타낸다.<br>
</li>
<li>modality란 양식, 양상이라는 뜻으로 어떤 형태로 나타나는 현상 또는 ’그것을 받아들이는 방식’을 말한다. LLM은 텍스트로 된 입력을 받아왔는데 텍스트만이 아닌 다른 양식들(사진, 소리 등)을 학습하거나 표현할 수 있게 발전해왔다. 예를 들어, OpenAI의 DALL-E 2는 대표적인 multi-modal AI인데 사용자가 문장을 입력하면 모델이 이해한 바를 그림 또는 사진으로 표현한다. <a href="https://www.samsungsds.com/kr/insights/multi-modal-ai.html">DALL-E 2는 기존 이미지들을 개체별로 나누고 이름을 부여한 다음, 위치와 색상, 어떤 동작을 하고 있는지를 이해하고 이미지를 설명하는데 이용된 텍스트 간의 관계를 학습</a>한다.</li>
<li>따라서 LLM에서의 Multimodal distribution은 LLM이 다중양식을 학습했을 때 보일 수 있는 확률분포다.</li>
<li>단순성 및 반복에 대한 편향이 중요한 이유는 다양한 유형의 분포가 내재되어있는 시계열의 특징 때문이다. 시계열에서는 추세를 단순화하고, 반복을 찾아내어 경향을 파악해야 하기 때문에 해당 편향을 유지해야만 한다.</li>
</ol>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
RLHF, alignment method
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><code>R</code>einforcement <code>L</code>earning by <code>H</code>uman <code>F</code>eedback 의 약자로 LLM의 <code>alignment intervention method</code>다.</p></li>
<li><p>정렬 (alignment) 이란 LLM을 사용자에게 적합하게 조율하는 과정으로 사용자와의 상호작용 사이에서 이루어진다. 따라서 말 그대로 RLHF: 사람의 피드백에 의한 강화학습은 사용자가 프롬프트로 하는 미세조정이라고 볼 수 있겠다. (확인 필)</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5E*"> 하지만 Meta AI에서 발표한 LIMA (Less Is More for Alignment) 논문은 LLM의 Pre-training이 중요하다고 하는데 주장을 살펴보기 위해 논문을 읽어볼 필요가 있다.</p></li>
</ul>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>LLM</category>
  <category>Zero Shot</category>
  <category>paper review</category>
  <guid>https://dotpyo.github.io/archive/posts/papers/2310.07820.html</guid>
  <pubDate>Sat, 23 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>LoRA: Low-Rank Adaptation of Large Language Models</title>
  <dc:creator>dotpyo </dc:creator>
  <link>https://dotpyo.github.io/archive/posts/papers/2106.09685.html</link>
  <description><![CDATA[ 





<ul>
<li><a href="https://github.com/microsoft/LoRA">github</a></li>
</ul>
<section id="abstract" class="level3">
<h3 class="anchored" data-anchor-id="abstract">Abstract</h3>
<p>MS사에서 진행한 연구. 자연어 처리에서의 중요한 패러다임 중 하나는 일반적인 도메인에서 학습된 대규모 사전학습 모델을 특정 과업이나 도메인에 적용시키는 것이다. 이 작업을 fine tuning이라고 하는데 더 큰 사전학습 모델을 사용할수록 모델의 매개변수를 유지하는 것은 더욱 어려워진다. 이는 더 많은 컴퓨팅 파워를 요구하고, 더 많은 비용을 야기하므로 현재 패러다임에서 큰 모델을 효과적으로 fine tuning 하는 방법을 찾는 것은 중요하다.</p>
<p>이에 연구진은 <strong>L</strong>ow <strong>R</strong>ank <strong>A</strong>daption (<code>LoRA</code>)를 제안한다. LoRA는 사전학습 모델의 가중치를 freeze하고 학습 가능한 rank decomposition matrices를 각 레이어에 끼워넣는 방식이다. 이는 downstream 작업에서 학습 가능한 매개변수의 개수를 크게 줄일 수 있다.</p>
<p>연구진이 예시로 든 GPT-3 175B 모델은 매개변수가 175 Billion 개라는 의미로 수많은 매개변수가 모델 안에 내재되어있음을 이름으로 알 수 있다. 해당 모델을 비롯하여 현재의 LLM 모델들은 billion 단위의 매개변수를 기본적으로 탑재하고 있고 이는 자연히 막대한 컴퓨팅 자원을 필요로 하게 된다.</p>
<p>예시 모델을 LoRA와 Adam으로 fine tuning한 경우 학습 가능한 매개변수는 10,000배 줄어들고 GPU memory 크기는 3배 줄어들게 된다. LoRA는 fine tuning된 RoBERTa, DeBERTa, GPT-2, GPT-3의 능력 동급 혹은 그 이상으로 기능한다. 더 적은 개수의 학습 가능 매개변수를 가졌음에도 불구하고 더 많은 학습 처리량을 보이며, adapter와는 다르게 추론 지연(<em>inference latency</em>)이 일어나지 않는다는 장점이 있다.</p>
<p>연구진은 또한 경험적 조사를 통해 language model adaptation의 낮은 계수(rank of matrix)가 모델의 효과를 조명함을 알아냈다.</p>
<p>이에 연구진은 RoBERTa, DeBERTa, GPT-2의 checkpoints와 LoRA를 PyTorch로 구현한 통합 구현체를 배포한다. : <a href="https://github.com/microsoft/LoRA">https://github.com/microsoft/LoRA</a></p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
fine tuning에 최적화 함수가 필요한 이유
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol start="17" type="A">
<li><p>fine tuning은 새로운 데이터로 모델을 학습하여 일반적인 과제를 수행하는 대형 모델을 특수한 도메인에 정착시키는 과정이다. 이 과정은 단순 학습인데 왜 최적화 함수가 필요한가? 이전에 사용했던 최적화 함수를 다시 사용하면 되지 않나?</p></li>
<li><p>fine tuning도 결과적으로 ’학습’을 하는 과정이다. 학습 과정에서 optimizer는 최적화 함수로 loss function의 값이 가장 작은 값으로 수렴하도록 돕는 역할을 한다. 즉, loss function을 최적화하는 것이 optimizer의 목표다. optimizer 함수는 모델의 매개변수(parameter)를 매번 조절하여 손실함수의 값을 최소화하는데, 이를 통해 fine tuning에서도 tuning이 제대로 되고 있는지 확인할 수 있다. 최적화는 모델 성능에도 영향을 미치므로 단순히 이전에 사용했던 최적화 함수를 재사용하기보다는 새로운 전략을 모색하는 것이 효과적이다. 최적화 전략은 데이터셋의 크기, 사용 가능한 계산 리소스를 포함한 여러가지 요소를 고려하기 때문이다.</p></li>
</ol>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img a="optimization process" src="https://velog.velcdn.com/images/freesky/post/762c7c9b-6276-4343-aa9d-9fda9684cb3f/image.gif" width="80%"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">optimization process</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>LLM</category>
  <category>paper review</category>
  <guid>https://dotpyo.github.io/archive/posts/papers/2106.09685.html</guid>
  <pubDate>Sat, 23 Sep 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
